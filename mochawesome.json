{
  "stats": {
    "suites": 53,
    "tests": 236,
    "passes": 109,
    "pending": 0,
    "failures": 127,
    "start": "2025-04-06T14:13:09.967Z",
    "end": "2025-04-06T14:16:58.354Z",
    "duration": 228387,
    "testsRegistered": 246,
    "passPercent": 44.3089430894309,
    "pendingPercent": 0,
    "other": 4,
    "hasOther": true,
    "skipped": 10,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "57f5b4cc-a244-4526-9f0a-7eb2ed0e6c8e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "eb254adb-25a4-4ddc-97bd-5a30f8532fd5",
          "title": "Get Balance Successfully after Transactions",
          "fullFile": "/opt/app/src/accounting/accountManagement/AccountBalance.test.js",
          "file": "/src/accounting/accountManagement/AccountBalance.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Get Balance Successfully after Transactions\"",
              "fullTitle": "Get Balance Successfully after Transactions \"before all\" hook in \"Get Balance Successfully after Transactions\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "88a71f05-5755-4c34-a1fb-cc2cfee73e12",
              "parentUUID": "eb254adb-25a4-4ddc-97bd-5a30f8532fd5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook for \"should show balance correctly after multiple transactions\"",
              "fullTitle": "Get Balance Successfully after Transactions \"before each\" hook for \"should show balance correctly after multiple transactions\"",
              "timedOut": true,
              "duration": 2000,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nconst userId1 = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577237\",\n  },\n});\nconst userId2 = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01711106485\",\n  },\n});\nconst userId3 = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577238\",\n  },\n});\ntokenUser1 = generateUserToken(userId1.id, \"01317577237\", \"USER\");\ntokenUser2 = generateUserToken(userId2.id, \"01711106485\", \"USER\");\ntokenUser3 = generateUserToken(userId3.id, \"01317577238\", \"USER\");\nconst chartOfAccounts = await createBasicChartOfAccounts();\nconst customer = chartOfAccounts.find(\n  (account) => account.code === \"customer-01\"\n);\nawait setupTransactionTypes(chartOfAccounts);\ntype = await prismaAccounting.transactionType.findUnique({\n  where: { transactionCode: \"1002\" },\n});\nawait createUserAccounts(chartOfAccounts);\ncustomerAccount1 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\ncustomerAccount2 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01711106485\" },\n});\ncustomerAccount3 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577238\" },\n});",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/accounting/accountManagement/AccountBalance.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/accounting/accountManagement/AccountBalance.test.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "a846c48c-efe6-406a-b199-52c3b9b5a7ce",
              "parentUUID": "eb254adb-25a4-4ddc-97bd-5a30f8532fd5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Get Balance Successfully after Transactions\"",
              "fullTitle": "Get Balance Successfully after Transactions \"after all\" hook in \"Get Balance Successfully after Transactions\"",
              "timedOut": false,
              "duration": 586,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "1c56cefe-dde1-4879-8b8b-3df086fdbb3b",
              "parentUUID": "eb254adb-25a4-4ddc-97bd-5a30f8532fd5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should show account balance after initial Transaction",
              "fullTitle": "Get Balance Successfully after Transactions should show account balance after initial Transaction",
              "timedOut": false,
              "duration": 1952,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await addInitialBalance(customerAccount1, 10000);\nawait addInitialBalance(customerAccount2, 10000);\nawait addInitialBalance(customerAccount3, 10000);\nconst responseBalanceForAcc1 = await pactum\n  .spec()\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.getAccountbalance}`)\n  .withBearerToken(tokenUser1)\n  .expectStatus(200);\nconst responseBalanceForAcc2 = await pactum\n  .spec()\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.getAccountbalance}`)\n  .withBearerToken(tokenUser2)\n  .expectStatus(200);\nconst responseBalanceForAcc3 = await pactum\n  .spec()\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.getAccountbalance}`)\n  .withBearerToken(tokenUser3)\n  .expectStatus(200);\nexpect(responseBalanceForAcc1.body.balance).to.equal(10000);\nexpect(responseBalanceForAcc2.body.balance).to.equal(10000);\nexpect(responseBalanceForAcc3.body.balance).to.equal(10000);",
              "err": {},
              "uuid": "160fabf7-a468-4cd0-ae66-24b57018f215",
              "parentUUID": "eb254adb-25a4-4ddc-97bd-5a30f8532fd5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show balance correctly after multiple transactions",
              "fullTitle": "Get Balance Successfully after Transactions should show balance correctly after multiple transactions",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let initialAmount = 1000;\nawait addInitialBalance(customerAccount1, initialAmount);\nawait addInitialBalance(customerAccount2, initialAmount);\nawait addInitialBalance(customerAccount3, initialAmount);\nlet amounts = [100, 100, 50, 65, 88];\nlet acc1balance = 597;\nlet acc2balance = 1403;\nconst transactionsFromAcc1toAcc2 = await CreateTransactions(\n  customerAccount1,\n  customerAccount2,\n  amounts,\n  type\n);\nawait createLedgerEntries(transactionsFromAcc1toAcc2);\nconst responseBalanceForAcc1 = await pactum\n  .spec()\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.getAccountbalance}`)\n  .withBearerToken(tokenUser1)\n  .expectStatus(200);\nexpect(responseBalanceForAcc1.body.balance).to.equal(597);\nconst responseBalanceForAcc2 = await pactum\n  .spec()\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.getAccountbalance}`)\n  .withBearerToken(tokenUser2)\n  .expectStatus(200);\nexpect(responseBalanceForAcc2.body.balance).to.equal(1403);\nlet amounts2 = [50, 300, 200, 20, 10];\nlet newBalanceForAcc2 = 1983;\nlet newBalanceForAcc3 = 420;\nconst transactionsFromAcc3toAcc2 = await CreateTransactions(\n  customerAccount3,\n  customerAccount2,\n  amounts2,\n  type\n);\nawait createLedgerEntries(transactionsFromAcc3toAcc2);\nconst responseBalanceForAcc2afterTrxn = await pactum\n  .spec()\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.getAccountbalance}`)\n  .withBearerToken(tokenUser2)\n  .expectStatus(200);\nexpect(responseBalanceForAcc2afterTrxn.body.balance).to.equal(2386);\nconst responseBalanceForAcc3 = await pactum\n  .spec()\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.getAccountbalance}`)\n  .withBearerToken(tokenUser3)\n  .expectStatus(200);\nexpect(responseBalanceForAcc3.body.balance).to.equal(420);",
              "err": {},
              "uuid": "2aabe947-5ab7-4e89-b0e4-b7a98c3e07ca",
              "parentUUID": "eb254adb-25a4-4ddc-97bd-5a30f8532fd5",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [
            "160fabf7-a468-4cd0-ae66-24b57018f215"
          ],
          "failures": [],
          "pending": [],
          "skipped": [
            "2aabe947-5ab7-4e89-b0e4-b7a98c3e07ca"
          ],
          "duration": 1952,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "44a37bae-e0a1-44c1-9ed4-95d756050355",
          "title": "Account Change Status PUT API",
          "fullFile": "/opt/app/src/accounting/accountManagement/changeAccountStatus.test.js",
          "file": "/src/accounting/accountManagement/changeAccountStatus.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Account Change Status PUT API\"",
              "fullTitle": "Account Change Status PUT API \"before all\" hook in \"Account Change Status PUT API\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$connect();",
              "err": {},
              "uuid": "5eefb24f-5f03-4e06-bd3e-a5023e34f774",
              "parentUUID": "44a37bae-e0a1-44c1-9ed4-95d756050355",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook for \"should show error upon updating status from anywhere except admin panel\"",
              "fullTitle": "Account Change Status PUT API \"before each\" hook for \"should show error upon updating status from anywhere except admin panel\"",
              "timedOut": true,
              "duration": 2000,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.Ledger.deleteMany({});\nawait prismaAccounting.Transaction.deleteMany({});\nawait prismaAccounting.TransactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.TransactionType.deleteMany({});\nawait prismaAccounting. transactionLegLog.deleteMany({});\nawait prismaAccounting.TransactionLeg.deleteMany({});\nawait prismaAccounting.UserAccount.deleteMany({});\nawait prismaAccounting.AccountLog.deleteMany({});\nawait prismaAccounting.ChartOfAccountLog.deleteMany({});\nawait prismaAccounting.ChartOfAccount.deleteMany({});",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/accounting/accountManagement/changeAccountStatus.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/accounting/accountManagement/changeAccountStatus.test.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "e746b05c-c732-4dc9-b5c8-8c7913d9570e",
              "parentUUID": "44a37bae-e0a1-44c1-9ed4-95d756050355",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Account Change Status PUT API\"",
              "fullTitle": "Account Change Status PUT API \"after all\" hook in \"Account Change Status PUT API\"",
              "timedOut": false,
              "duration": 298,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "39ae1e47-98bb-4d57-91ec-13985652c7d1",
              "parentUUID": "44a37bae-e0a1-44c1-9ed4-95d756050355",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should change account status successfully",
              "fullTitle": "Account Change Status PUT API should change account status successfully",
              "timedOut": false,
              "duration": 1725,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst appUser = {\n  phoneNumber: \"01747538382\"\n};\n   let token2 = generateUserToken(1, appUser.phoneNumber, \"USER\");\n\nconst chartOfAccountData = {\n  name: \"Sample Account Name\",\n  adminId: 1,\n  description: \"This is a description for the chart of account.\",\n  transactionType: \"SYSTEM\",\n  headType: \"ASSET\",\n  code: \"ACC-001\",\n  onlyParent: false,\n};\nconst chartOfAccount = await prismaAccounting.ChartOfAccount.create({\n  data: chartOfAccountData,\n});\nconst CoAID = chartOfAccount.id;\nconst testData = {\n  accountName: \"John\",\n  identifier: \"01711699870\",\n  status: \"FULL_ACTIVE\",\n  chartOfAccount: {\n    connect: {\n      id: CoAID,\n    },\n  },\n};\nconst createdAccount = await prismaAccounting.UserAccount.create({\n  data: testData,\n});\nconst accountID = createdAccount.id;\nconst AccountStatusChangeData = {\n  status: \"LIMITED_ACTIVE\",\n};\nawait pactum\n  .spec()\n  .withMethod(\"PUT\")\n  .withPath(\n    `${ApiUrls.apiBaseUrl}${ApiUrls.changeAccountStatus}${accountID}/status-update`\n  )\n  .withBearerToken(token)\n  .withJson(AccountStatusChangeData)\n  .expectStatus(200);\nconst updatedAccountStatus = await prismaAccounting.UserAccount.findUnique({\n  where: { id: accountID },\n});\nexpect(updatedAccountStatus).to.not.be.null;\nexpect(updatedAccountStatus.status).to.equal(\n  AccountStatusChangeData.status\n);",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 200\n\n500 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 200\n\n500 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 200\n"
              },
              "uuid": "f835bd87-6b4a-467a-99f0-92de96f6ca0e",
              "parentUUID": "44a37bae-e0a1-44c1-9ed4-95d756050355",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check logs for updating status",
              "fullTitle": "Account Change Status PUT API should check logs for updating status",
              "timedOut": false,
              "duration": 1874,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst chartOfAccountData = {\n  name: \"Sample Account Name\",\n  adminId: 1,\n  description: \"This is a description for the chart of account.\",\n  transactionType: \"SYSTEM\",\n  headType: \"ASSET\",\n  code: \"ACC-001\",\n  onlyParent: false,\n};\nconst chartOfAccount = await prismaAccounting.ChartOfAccount.create({\n  data: chartOfAccountData,\n});\nconst CoAID = chartOfAccount.id;\nconst testData = {\n  accountName: \"John\",\n  identifier: \"01711699870\",\n  status: \"LIMITED_ACTIVE\",\n  chartOfAccount: {\n    connect: {\n      id: CoAID,\n    },\n  },\n};\nconst createdAccount = await prismaAccounting.UserAccount.create({\n  data: testData,\n});\nconst accountID = createdAccount.id;\nconst AccountStatusChangeData = {\n  status: \"FULL_ACTIVE\",\n};\nawait pactum\n  .spec()\n  .withMethod(\"PUT\")\n  .withPath(\n    `${ApiUrls.apiBaseUrl}${ApiUrls.changeAccountStatus}${accountID}/status-update`\n  )\n  .withBearerToken(token)\n  .withJson(AccountStatusChangeData)\n  .expectStatus(200);\nawait new Promise(resolve => setTimeout(resolve, 50));\nconst logs = await prismaAccounting.AccountLog.findMany({\n  where: {\n    accountId: BigInt(accountID),\n  },\n  orderBy: {\n    createdAt: \"desc\",\n  },\n  take: 1,\n});\nexpect(logs).to.not.be.empty;\nconst lastLog = logs[0];\nexpect(lastLog).to.not.be.null;\nexpect(lastLog).to.have.property(\"accountId\");\nexpect(lastLog.accountId.toString()).to.equal(accountID.toString());\nexpect(lastLog).to.have.property(\"status\");\nexpect(lastLog.status).to.equal(AccountStatusChangeData.status);\nconst updatedAccount = await prismaAccounting.UserAccount.findUnique({\n  where: { id: accountID },\n});\nexpect(updatedAccount.status).to.equal(AccountStatusChangeData.status);",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 200\n\n500 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 200\n\n500 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 200\n"
              },
              "uuid": "bcbf299a-1e95-4b2c-8f62-55aa187b4c30",
              "parentUUID": "44a37bae-e0a1-44c1-9ed4-95d756050355",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error upon updating status from anywhere except admin panel",
              "fullTitle": "Account Change Status PUT API should show error upon updating status from anywhere except admin panel",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const appUser1Data = {\n  phoneNumber: \"01747538382\",\n};\nconst tokenforUserAccount = generateUserToken(\n  1,\n  appUser1Data.phoneNumber,\n  \"USER\"\n);\nconst chartOfAccountData = {\n  name: \"Sample Account Name\",\n  adminId: 1,\n  description: \"This is a description for the chart of account.\",\n  transactionType: \"SYSTEM\",\n  headType: \"ASSET\",\n  code: \"ACC-001\",\n  onlyParent: false,\n};\nconst chartOfAccount = await prismaAccounting.ChartOfAccount.create({\n  data: chartOfAccountData,\n});\nconst CoAID = chartOfAccount.id;\nconst testData = {\n  accountName: \"John\",\n  identifier: \"01711699870\",\n  status: \"LIMITED_ACTIVE\",\n  chartOfAccount: {\n    connect: {\n      id: CoAID,\n    },\n  },\n};\nconst createdAccount = await prismaAccounting.UserAccount.create({\n  data: testData,\n});\nconst accountID = createdAccount.id;\nconst AccountStatusChangeData = {\n  status: \"FULL_ACTIVE\",\n};\nconst response = await pactum\n  .spec()\n  .withMethod(\"PUT\")\n  .withPath(\n    `${ApiUrls.apiBaseUrl}${ApiUrls.changeAccountStatus}${accountID}/status-update`\n  )\n  .withBearerToken(tokenforUserAccount)\n  .withJson(AccountStatusChangeData)\n  .expectStatus(401);",
              "err": {},
              "uuid": "ab31cfd8-c822-444a-b7f2-9643098dbc13",
              "parentUUID": "44a37bae-e0a1-44c1-9ed4-95d756050355",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should show error upon updating the status to current status",
              "fullTitle": "Account Change Status PUT API should show error upon updating the status to current status",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst chartOfAccountData = {\n  name: \"Sample Account Name\",\n  adminId: 1,\n  description: \"This is a description for the chart of account.\",\n  transactionType: \"SYSTEM\",\n  headType: \"ASSET\",\n  code: \"ACC-001\",\n  onlyParent: false,\n};\nconst chartOfAccount = await prismaAccounting.ChartOfAccount.create({\n  data: chartOfAccountData,\n});\nconst CoAID = chartOfAccount.id;\nconst testData = {\n  accountName: \"John\",\n  identifier: \"01711699870\",\n  status: \"LIMITED_ACTIVE\",\n  chartOfAccount: {\n    connect: {\n      id: CoAID,\n    },\n  },\n};\nconst createdAccount = await prismaAccounting.UserAccount.create({\n  data: testData,\n});\nconst accountID = createdAccount.id;\nconst AccountStatusChangeData = {\n  status: \"LIMITED_ACTIVE\",\n};\nawait pactum\n  .spec()\n  .withMethod(\"PUT\")\n  .withPath(\n    `${ApiUrls.apiBaseUrl}${ApiUrls.changeAccountStatus}${accountID}/status-update`\n  )\n  .withBearerToken(token)\n  .withJson(AccountStatusChangeData)\n  .expectStatus(400);",
              "err": {},
              "uuid": "746b5ff3-8bde-4e73-a1ee-602bfa026e09",
              "parentUUID": "44a37bae-e0a1-44c1-9ed4-95d756050355",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should show error when trying to change status of a system account",
              "fullTitle": "Account Change Status PUT API should show error when trying to change status of a system account",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst chartOfAccountData = {\n  name: \"System Account Name\",\n  adminId: 1,\n  description: \"This is a description for the chart of account.\",\n  transactionType: \"SYSTEM\",\n  headType: \"ASSET\",\n  code: \"ACC-001\",\n  onlyParent: true,\n};\nconst chartOfAccount = await prismaAccounting.ChartOfAccount.create({\n  data: chartOfAccountData,\n});\nconst CoAID = chartOfAccount.id;\nconst testData = {\n  accountName: \"System Account\",\n  identifier: \"ACC-001\",\n  status: \"FULL_ACTIVE\",\n  chartOfAccount: {\n    connect: {\n      id: CoAID,\n    },\n  },\n};\nconst createdAccount = await prismaAccounting.UserAccount.create({\n  data: testData,\n});\nconst accountID = createdAccount.id;\nconst AccountStatusChangeData = {\n  status: \"LIMITED_ACTIVE\",\n};\nawait pactum\n  .spec()\n  .withMethod(\"PUT\")\n  .withPath(\n    `${ApiUrls.apiBaseUrl}${ApiUrls.changeAccountStatus}${accountID}/status-update`\n  )\n  .withBearerToken(token)\n  .withJson(AccountStatusChangeData)\n  .expectStatus(404);",
              "err": {},
              "uuid": "7b799989-83cb-45df-92a9-7b5e75da94d7",
              "parentUUID": "44a37bae-e0a1-44c1-9ed4-95d756050355",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f835bd87-6b4a-467a-99f0-92de96f6ca0e",
            "bcbf299a-1e95-4b2c-8f62-55aa187b4c30"
          ],
          "pending": [],
          "skipped": [
            "ab31cfd8-c822-444a-b7f2-9643098dbc13",
            "746b5ff3-8bde-4e73-a1ee-602bfa026e09",
            "7b799989-83cb-45df-92a9-7b5e75da94d7"
          ],
          "duration": 3599,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c3ab6f48-682a-4939-991f-a99546acdb5f",
          "title": "Account Details GET API: apiUrl",
          "fullFile": "/opt/app/src/accounting/accountManagement/getAccountDetails.test.js",
          "file": "/src/accounting/accountManagement/getAccountDetails.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Account Details GET API: apiUrl\"",
              "fullTitle": "Account Details GET API: apiUrl \"before all\" hook in \"Account Details GET API: apiUrl\"",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$connect();",
              "err": {},
              "uuid": "bfb7c6e5-7c3c-4ddf-89ac-c508804a2776",
              "parentUUID": "c3ab6f48-682a-4939-991f-a99546acdb5f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Account Details GET API: apiUrl\"",
              "fullTitle": "Account Details GET API: apiUrl \"before each\" hook in \"Account Details GET API: apiUrl\"",
              "timedOut": false,
              "duration": 182,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.Ledger.deleteMany({});\nawait prismaAccounting.Transaction.deleteMany({});\nawait prismaAccounting.TransactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.TransactionType.deleteMany({});\nawait prismaAccounting. transactionLegLog.deleteMany({});\nawait prismaAccounting.TransactionLeg.deleteMany({});\nawait prismaAccounting.UserAccount.deleteMany({});\nawait prismaAccounting.ChartOfAccountLog.deleteMany({});\nawait prismaAccounting.ChartOfAccount.deleteMany({});",
              "err": {},
              "uuid": "98eee0e1-32d5-4f2e-a56c-8c36cd5ca19f",
              "parentUUID": "c3ab6f48-682a-4939-991f-a99546acdb5f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Account Details GET API: apiUrl\"",
              "fullTitle": "Account Details GET API: apiUrl \"after all\" hook in \"Account Details GET API: apiUrl\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "36b3ea7e-05ba-4b81-a943-a4fbeef9cf29",
              "parentUUID": "c3ab6f48-682a-4939-991f-a99546acdb5f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get user details successfully",
              "fullTitle": "Account Details GET API: apiUrl should get user details successfully",
              "timedOut": true,
              "duration": 2001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst chartOfAccountData = {\n  name: \"Sample Account Name\",\n  adminId: 1,\n  description: \"This is a description for the chart of account.\",\n  transactionType: \"SYSTEM\",\n  headType: \"ASSET\",\n  code: \"ACC-001\",\n  onlyParent: false,\n};\nconst chartOfAccount = await prismaAccounting.ChartOfAccount.create({\n  data: chartOfAccountData,\n});\nconst CoAID = chartOfAccount.id;\nconst testData = {\n  accountName: \"John\",\n  identifier: \"01711699870\",\n  status: \"FULL_ACTIVE\",\n  chartOfAccount: {\n    connect: {\n      id: CoAID,\n    },\n  },\n  dailyLimitCount: 100,\n  monthlyLimitCount: 1000,\n  dailyLimitAmount: 100000,\n  monthlyLimitAmount: 1000000,\n  weeklyLimitAmount: 500,\n  weeklyLimitCount: 50,\n  maxWalletAmount: 1000,\n  minWalletAmount: 0,\n};\nconst createdAccount = await prismaAccounting.UserAccount.create({\n  data: testData,\n});\nconst accountID = createdAccount.id;\nconst response = await pactum\n  .spec()\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.getAccountDetails}${accountID}`)\n  .withBearerToken(token)\n  .expectStatus(200);\n  console.log\nexpect(response.body.id).to.equal(accountID);\nexpect(response.body.name).to.equal(createdAccount.accountName);\nexpect(response.body.identifier).to.equal(createdAccount.identifier);\nexpect(response.body.status).to.equal(createdAccount.status);\nexpect(response.body.chartofaccount.id).to.equal(CoAID);\nexpect(response.body.dailylimit.count).to.equal(createdAccount.dailyLimitCount);\nexpect(response.body.monthlylimit.count).to.equal(createdAccount.monthlyLimitCount);\nexpect(response.body.dailylimit.amount).to.equal(createdAccount.dailyLimitAmount);\nexpect(response.body.monthlylimit.amount).to.equal(createdAccount.monthlyLimitAmount);\nexpect(response.body.minwalletamount).to.equal(createdAccount.minWalletAmount);\nexpect(response.body.weeklylimit.count).to.equal(createdAccount.weeklyLimitCount);\nexpect(response.body.weeklylimit.amount).to.equal(createdAccount.weeklyLimitAmount);\nexpect(response.body.maxwalletamount).to.equal(createdAccount.maxWalletAmount);\nexpect(createdAccount.aitPercentage).to.equal(2.5);",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/accounting/accountManagement/getAccountDetails.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/accounting/accountManagement/getAccountDetails.test.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "a088a874-3156-469f-b2dd-2842fa0dd0ad",
              "parentUUID": "c3ab6f48-682a-4939-991f-a99546acdb5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error if the user is not logged in",
              "fullTitle": "Account Details GET API: apiUrl should show error if the user is not logged in",
              "timedOut": false,
              "duration": 235,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const chartOfAccountData = {\n  name: \"Sample Account Name\",\n  adminId: 1,\n  description: \"This is a description for the chart of account.\",\n  transactionType: \"SYSTEM\",\n  headType: \"ASSET\",\n  code: \"ACC-001\",\n  onlyParent: false,\n};\nconst chartOfAccount = await prismaAccounting.ChartOfAccount.create({\n  data: chartOfAccountData,\n});\nconst CoAID = chartOfAccount.id;\nconst testData = {\n  accountName: \"John\",\n  identifier: \"01711699870\",\n  status: \"FULL_ACTIVE\",\n  chartOfAccount: {\n    connect: {\n      id: CoAID,\n    },\n  },\n};\nconst createdAccount = await prismaAccounting.UserAccount.create({\n  data: testData,\n});\nconst accountID = createdAccount.id;\nconst response = await pactum\n  .spec()\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.getAccountDetails}${accountID}`)\n  .expectStatus(403);",
              "err": {},
              "uuid": "b1b73b26-1bf3-42ff-9ac9-4e64dd0dbc21",
              "parentUUID": "c3ab6f48-682a-4939-991f-a99546acdb5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error if the account ID does not exist",
              "fullTitle": "Account Details GET API: apiUrl should show error if the account ID does not exist",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst accountID = 111;\nconst response = await pactum\n  .spec()\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.getAccountDetails}${accountID}`)\n  .withBearerToken(token)\n  .expectStatus(404);",
              "err": {},
              "uuid": "14a5de80-64cf-4d38-91b1-454ba7fcaf11",
              "parentUUID": "c3ab6f48-682a-4939-991f-a99546acdb5f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b1b73b26-1bf3-42ff-9ac9-4e64dd0dbc21",
            "14a5de80-64cf-4d38-91b1-454ba7fcaf11"
          ],
          "failures": [
            "a088a874-3156-469f-b2dd-2842fa0dd0ad"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2256,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "83fc42df-1d16-45e2-a708-695146c1f8ba",
          "title": "Account LIST GET API: apiUrl",
          "fullFile": "/opt/app/src/accounting/accountManagement/getAccountList.test.js",
          "file": "/src/accounting/accountManagement/getAccountList.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Account LIST GET API: apiUrl\"",
              "fullTitle": "Account LIST GET API: apiUrl \"before all\" hook in \"Account LIST GET API: apiUrl\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$connect();",
              "err": {},
              "uuid": "b798b85f-568b-4d7e-9644-5b4c4a392567",
              "parentUUID": "83fc42df-1d16-45e2-a708-695146c1f8ba",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Account LIST GET API: apiUrl\"",
              "fullTitle": "Account LIST GET API: apiUrl \"before each\" hook in \"Account LIST GET API: apiUrl\"",
              "timedOut": false,
              "duration": 265,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.Ledger.deleteMany({});\nawait prismaAccounting.Transaction.deleteMany({});\nawait prismaAccounting.TransactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.TransactionType.deleteMany({});\nawait prismaAccounting. transactionLegLog.deleteMany({});\nawait prismaAccounting.TransactionLeg.deleteMany({});\nawait prismaAccounting.UserAccount.deleteMany({});\nawait prismaAccounting.ChartOfAccountLog.deleteMany({});\nawait prismaAccounting.ChartOfAccount.deleteMany({});",
              "err": {},
              "uuid": "29325fbd-f49c-4e54-8c2c-d99b7497959a",
              "parentUUID": "83fc42df-1d16-45e2-a708-695146c1f8ba",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Account LIST GET API: apiUrl\"",
              "fullTitle": "Account LIST GET API: apiUrl \"after all\" hook in \"Account LIST GET API: apiUrl\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "09aa8e2d-e200-43a0-a2e3-af55b12d6e24",
              "parentUUID": "83fc42df-1d16-45e2-a708-695146c1f8ba",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get user accounts LIST successfully",
              "fullTitle": "Account LIST GET API: apiUrl should get user accounts LIST successfully",
              "timedOut": false,
              "duration": 279,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst chartOfAccountData = {\n  name: \"Sample Account Name\",\n  adminId: 1,\n  description: \"This is a description for the chart of account.\",\n  transactionType: \"SYSTEM\",\n  headType: \"ASSET\",\n  code: \"ACC-001\",\n  onlyParent: false,\n};\nconst chartOfAccount = await prismaAccounting.ChartOfAccount.create({\n  data: chartOfAccountData,\n});\nconst CoAID = chartOfAccount.id;\nconst testData1 = {\n  accountName: \"John\",\n  identifier: \"01711699870\",\n  status: \"FULL_ACTIVE\",\n  chartOfAccount_id: CoAID,\n};\nconst testData2 = {\n  accountName: \"John Doe\",\n  identifier: \"01711699871\",\n  status: \"FULL_ACTIVE\",\n  chartOfAccount_id: CoAID,\n};\nconst testData3 = {\n  accountName: \"Johny Depp\",\n  identifier: \"01711699879\",\n  status: \"FULL_ACTIVE\",\n  chartOfAccount_id: CoAID,\n};\nawait prismaAccounting.UserAccount.createMany({\n  data: [testData1, testData2, testData3],\n});\nconst response = await pactum\n  .spec()\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.getAccountList}`)\n  .withBearerToken(token)\n  .expectStatus(200);\nexpect(response.body.accounts).to.have.lengthOf(3);\nexpect(response.body.accounts[0].name).to.equal(\"John\");\nexpect(response.body.accounts[0].identifier).to.equal(\"01711699870\");\nexpect(response.body.accounts[0].chartofaccount.id).to.equal(CoAID);\nexpect(response.body.accounts[0].chartofaccount.name).to.equal(\n  \"Sample Account Name\"\n);\nexpect(response.body.accounts[0].status).to.equal(\"FULL_ACTIVE\");\nexpect(response.body.accounts[1].name).to.equal(\"John Doe\");\nexpect(response.body.accounts[1].identifier).to.equal(\"01711699871\");\nexpect(response.body.accounts[1].chartofaccount.name).to.equal(\n  \"Sample Account Name\"\n);\nexpect(response.body.accounts[1].status).to.equal(\"FULL_ACTIVE\");\nexpect(response.body.accounts[2].name).to.equal(\"Johny Depp\");\nexpect(response.body.accounts[2].identifier).to.equal(\"01711699879\");\nexpect(response.body.accounts[2].chartofaccount.name).to.equal(\n  \"Sample Account Name\"\n);\nexpect(response.body.accounts[2].status).to.equal(\"FULL_ACTIVE\");",
              "err": {},
              "uuid": "e1ac1ee7-71ce-4db6-bf4a-5bbdc0cd2ebb",
              "parentUUID": "83fc42df-1d16-45e2-a708-695146c1f8ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error if the user is not logged in",
              "fullTitle": "Account LIST GET API: apiUrl should show error if the user is not logged in",
              "timedOut": false,
              "duration": 273,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const chartOfAccountData = {\n  name: \"Sample Account Name\",\n  adminId: 1,\n  description: \"This is a description for the chart of account.\",\n  transactionType: \"SYSTEM\",\n  headType: \"ASSET\",\n  code: \"ACC-001\",\n  onlyParent: false,\n};\nconst chartOfAccount = await prismaAccounting.ChartOfAccount.create({\n  data: chartOfAccountData,\n});\nconst CoAID = chartOfAccount.id;\nconst testData = {\n  accountName: \"John\",\n  identifier: \"01711699870\",\n  chartOfAccount_id: CoAID,\n};\nawait prismaAccounting.UserAccount.createMany({\n  data: testData,\n});\nconst response = await pactum\n  .spec()\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.getAccountList}`)\n  .expectStatus(403);",
              "err": {},
              "uuid": "31a2d3f4-2998-4c19-af05-b43e030f62ed",
              "parentUUID": "83fc42df-1d16-45e2-a708-695146c1f8ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show only 10 accounts in the account List ",
              "fullTitle": "Account LIST GET API: apiUrl should show only 10 accounts in the account List ",
              "timedOut": false,
              "duration": 546,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await userAccountsDb();\nconst users = await prismaAccounting.UserAccount.findMany({});\nconst response = await pactum\n  .spec()\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.getAccountList}`)\n  .withBearerToken(token)\n  .expectStatus(200);\nexpect(response.body.accounts).to.have.lengthOf(10);\nexpect(response.body.pagination.currentpage).to.equal(0);\nexpect(response.body.pagination.currentpagetotalcount).to.equal(10);\nexpect(response.body.pagination.hasnext).to.equal(true);",
              "err": {},
              "uuid": "0547ebf8-7a00-4032-a783-01774cdf8346",
              "parentUUID": "83fc42df-1d16-45e2-a708-695146c1f8ba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the remaining accounts in next page when the account list exceeds the count shown in one page",
              "fullTitle": "Account LIST GET API: apiUrl should show the remaining accounts in next page when the account list exceeds the count shown in one page",
              "timedOut": false,
              "duration": 445,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await userAccountsDb();\nconst users = await prismaAccounting.UserAccount.findMany({});\nconst response = await pactum\n  .spec()\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.getAccountList}?page=1`)\n  .withBearerToken(token)\n  .expectStatus(200);\nexpect(response.body.accounts).to.have.lengthOf(2);\nexpect(response.body.pagination.currentpage).to.equal(1);\nexpect(response.body.pagination.currentpagetotalcount).to.equal(2);\nexpect(response.body.pagination.hasnext).to.equal(false);",
              "err": {},
              "uuid": "60754970-9265-40ee-b747-ea681643512a",
              "parentUUID": "83fc42df-1d16-45e2-a708-695146c1f8ba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e1ac1ee7-71ce-4db6-bf4a-5bbdc0cd2ebb",
            "31a2d3f4-2998-4c19-af05-b43e030f62ed",
            "0547ebf8-7a00-4032-a783-01774cdf8346",
            "60754970-9265-40ee-b747-ea681643512a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1543,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7f36d066-9a58-4944-b558-8df4a48ee99b",
          "title": "Account Details Update API",
          "fullFile": "/opt/app/src/accounting/accountManagement/updateAccountDetails.test.js",
          "file": "/src/accounting/accountManagement/updateAccountDetails.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Account Details Update API\"",
              "fullTitle": "Account Details Update API \"before all\" hook in \"Account Details Update API\"",
              "timedOut": false,
              "duration": 27,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$connect();",
              "err": {},
              "uuid": "fcae2586-71fd-4ac5-8485-0af2b71f7581",
              "parentUUID": "7f36d066-9a58-4944-b558-8df4a48ee99b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Account Details Update API\"",
              "fullTitle": "Account Details Update API \"before each\" hook in \"Account Details Update API\"",
              "timedOut": false,
              "duration": 409,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.Ledger.deleteMany({});\nawait prismaAccounting.Transaction.deleteMany({});\nawait prismaAccounting.TransactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.TransactionType.deleteMany({});\nawait prismaAccounting.transactionLegLog.deleteMany({});\nawait prismaAccounting.TransactionLeg.deleteMany({});\nawait prismaAccounting.UserAccount.deleteMany({});\nawait prismaAccounting.AccountLog.deleteMany({});\nawait prismaAccounting.ChartOfAccountLog.deleteMany({});\nawait prismaAccounting.ChartOfAccount.deleteMany({});\nconst chartOfAccountData = {\n  name: \"Sample Account Name\",\n  adminId: 1,\n  description: \"This is a description for the chart of account.\",\n  transactionType: \"SYSTEM\",\n  headType: \"ASSET\",\n  code: \"ACC-001\",\n  onlyParent: false,\n};\nconst chartOfAccount = await prismaAccounting.ChartOfAccount.create({\n  data: chartOfAccountData,\n});\nCoAID = chartOfAccount.id;\nconst initialAccountData = {\n  accountName: \"John\",\n  identifier: \"01747538382\",\n  status: \"LIMITED_ACTIVE\",\n  chartOfAccount: {\n    connect: {\n      id: CoAID,\n    },\n  },\n  minWalletAmount: 100,\n  dailyLimitCount: 10,\n  dailyLimitAmount: 1000,\n  monthlyLimitCount: 100,\n  monthlyLimitAmount: 1000,\n  maxWalletAmount: 1000,\n  weeklyLimitCount: 10,\n  weeklyLimitAmount: 100,\n  aitPercentage: 2.5\n};\nconst createdAccount = await prismaAccounting.UserAccount.create({\n  data: initialAccountData,\n});\naccountID = createdAccount.id;",
              "err": {},
              "uuid": "4e22c695-7316-4ec9-b2b4-8fb8a2ad0dae",
              "parentUUID": "7f36d066-9a58-4944-b558-8df4a48ee99b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Account Details Update API\"",
              "fullTitle": "Account Details Update API \"after all\" hook in \"Account Details Update API\"",
              "timedOut": false,
              "duration": 135,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();\n  await prismaAccounting.AccountLog.deleteMany({});\n  await prismaAccounting.UserAccount.deleteMany({});",
              "err": {},
              "uuid": "8c5d580c-53ae-4062-89f7-d559fbb6d6aa",
              "parentUUID": "7f36d066-9a58-4944-b558-8df4a48ee99b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should update user details successfully",
              "fullTitle": "Account Details Update API should update user details successfully",
              "timedOut": false,
              "duration": 149,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const updatedAccountData = {\n  accountName: \"cccccccccc\",\n  minWalletAmount: 500,\n  dailyLimit: {\n    count: 50,\n    amount: 5000,\n  },\n  monthlyLimit: {\n    count: 500,\n    amount: 5000,\n  },\n  weeklyLimit: {\n    count: 500,\n    amount: 5000,\n  },\n  maxWalletAmount: 5000,\n  aitPercentage: 3.5\n};\nconst adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst response = await pactum\n  .spec()\n  .withMethod(\"PUT\")\n  .withPath(\n    `${ApiUrls.apiBaseUrl}${ApiUrls.updateAccountDetails}${accountID}/limit-update`\n  )\n  .withBearerToken(token)\n  .withJson(updatedAccountData)\n  .expectStatus(200);\nawait new Promise((resolve) => setTimeout(resolve, 500));\nconst updatedAccount = await prismaAccounting.UserAccount.findUnique({\n  where: { id: accountID },\n});\nexpect(updatedAccount).to.not.be.null;\nexpect(updatedAccount.accountName).to.equal(updatedAccountData.accountName);\nexpect(updatedAccount.minWalletAmount).to.equal(\n  updatedAccountData.minWalletAmount\n);\nexpect(updatedAccount.maxWalletAmount).to.equal(\n  updatedAccountData.maxWalletAmount\n);\nexpect(updatedAccount.dailyLimitAmount).to.equal(\n  updatedAccountData.dailyLimit.amount\n);\nexpect(updatedAccount.dailyLimitCount).to.equal(\n  updatedAccountData.dailyLimit.count\n);\nexpect(updatedAccount.weeklyLimitAmount).to.equal(\n  updatedAccountData.weeklyLimit.amount\n);\nexpect(updatedAccount.weeklyLimitCount).to.equal(\n  updatedAccountData.weeklyLimit.count\n);\nexpect(updatedAccount.monthlyLimitAmount).to.equal(\n  updatedAccountData.monthlyLimit.amount\n);\nexpect(updatedAccount.monthlyLimitCount).to.equal(\n  updatedAccountData.monthlyLimit.count\n);\nexpect(updatedAccount.chartOfAccount_id).to.equal(CoAID);\nexpect(updatedAccount.aitPercentage).to.equal(updatedAccountData.aitPercentage);",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 200\n\n500 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 200\n\n500 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 200\n"
              },
              "uuid": "5cd0704c-f1e4-41c4-bce8-d02b10d67889",
              "parentUUID": "7f36d066-9a58-4944-b558-8df4a48ee99b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error if the user is not logged in",
              "fullTitle": "Account Details Update API should show error if the user is not logged in",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedAccountData = {\n      accountName: \"bbbbbbb\",\n      minWalletAmount: 100,\n      dailyLimit: {\n        count: 10,\n      },\n      monthlyLimit: {\n        count: 100,\n      },\n    };\n    const response = await pactum\n      .spec()\n      .withMethod(\"PUT\")\n      .withPath(\n        `${ApiUrls.apiBaseUrl}${ApiUrls.updateAccountDetails}${accountID}/limit-update`\n      )\n      .withJson(updatedAccountData)\n      .expectStatus(403);",
              "err": {},
              "uuid": "42fcd2a1-3a80-4d68-a5c8-be3ced54f710",
              "parentUUID": "7f36d066-9a58-4944-b558-8df4a48ee99b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error if the account ID does not exist",
              "fullTitle": "Account Details Update API should show error if the account ID does not exist",
              "timedOut": false,
              "duration": 128,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst accountID = 1111111;\nconst updatedAccountData = {\n  accountName: \"bbbbbbb\",\n  minWalletAmount: 100,\n  dailyLimit: {\n    count: 10,\n    amount: 5000,\n  },\n  monthlyLimit: {\n    count: 100,\n    amount: 5000,\n  },\n  weeklyLimit: {\n    count: 500,\n    amount: 5000,\n  },\n};\nconst response = await pactum\n  .spec()\n  .withMethod(\"PUT\")\n  .withPath(\n    `${ApiUrls.apiBaseUrl}${ApiUrls.updateAccountDetails}${accountID}/limit-update`\n  )\n  .withJson(updatedAccountData)\n  .withBearerToken(token)\n  .expectStatus(404);",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 404\n\n500 !== 404\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 404\n\n500 !== 404\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 404\n"
              },
              "uuid": "b9a1c77d-0172-4a07-a905-d71e354621fa",
              "parentUUID": "7f36d066-9a58-4944-b558-8df4a48ee99b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check logs for updating account",
              "fullTitle": "Account Details Update API should check logs for updating account",
              "timedOut": false,
              "duration": 177,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const updatedAccountData = {\n      accountName: \"John\",\n      dailyLimit: { count: 50, amount: 5000 },\n      monthlyLimit: { count: 500, amount: 5000 },\n      weeklyLimit: { count: 500, amount: 5000 },\n      maxWalletAmount: 5000,\n      minWalletAmount: 600,\n    };\n    const adminUser = {\n      email: \"admin@ppay.com\",\n      roles: \"Admin\",\n      adminRole: \"ADMIN\",\n    };\n    token = generateToken(\n      1,\n      adminUser.email,\n      adminUser.roles,\n      adminUser.adminRole\n    );\n    const response = await pactum\n      .spec()\n      .withMethod(\"PUT\")\n      .withPath(\n        `${ApiUrls.apiBaseUrl}${ApiUrls.updateAccountDetails}${accountID}/limit-update`\n      )\n      .withBearerToken(token)\n      .withJson(updatedAccountData)\n      .expectStatus(200);\n    await new Promise((resolve) => setTimeout(resolve, 500));\n    const updatedAccount = await prismaAccounting.UserAccount.findUnique({\n      where: { id: accountID },\n    });\n    const logEntry = await prismaAccounting.AccountLog.findMany({\n      where: {\n        accountId: BigInt(accountID),\n      },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n    expect(logEntry[0].accountName).to.equal(\"John\");\n    expect(Number(logEntry[0].minWalletAmount)).to.equal(600);\n    expect(Number(logEntry[0].dailyLimitCount)).to.equal(50);\n    expect(Number(logEntry[0].dailyLimitAmount)).to.equal(5000);\n    expect(Number(logEntry[0].weeklyLimitCount)).to.equal(500);\n    expect(Number(logEntry[0].weeklyLimitAmount)).to.equal(5000);\n    expect(Number(logEntry[0].monthlyLimitCount)).to.equal(500);\n    expect(Number(logEntry[0].monthlyLimitAmount)).to.equal(5000);\n    expect(Number(logEntry[0].maxWalletAmount)).to.equal(5000);",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 200\n\n500 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 200\n\n500 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 200\n"
              },
              "uuid": "7c2bf84e-841c-4614-9b74-2569b891c523",
              "parentUUID": "7f36d066-9a58-4944-b558-8df4a48ee99b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "42fcd2a1-3a80-4d68-a5c8-be3ced54f710"
          ],
          "failures": [
            "5cd0704c-f1e4-41c4-bce8-d02b10d67889",
            "b9a1c77d-0172-4a07-a905-d71e354621fa",
            "7c2bf84e-841c-4614-9b74-2569b891c523"
          ],
          "pending": [],
          "skipped": [],
          "duration": 465,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ec5c8284-bd75-4e25-87e6-a64de58eab20",
          "title": "Create Chart of Account API Tests (POST /v1/chart-of-account)",
          "fullFile": "/opt/app/src/accounting/chartOfAccount/createChartOfAccount.test.js",
          "file": "/src/accounting/chartOfAccount/createChartOfAccount.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Create Chart of Account API Tests (POST /v1/chart-of-account)\"",
              "fullTitle": "Create Chart of Account API Tests (POST /v1/chart-of-account) \"before all\" hook in \"Create Chart of Account API Tests (POST /v1/chart-of-account)\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Promise.all([prismaAuth.$connect(), prismaAccounting.$connect()]);\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);",
              "err": {},
              "uuid": "22e6ec96-fa3c-4e2e-8250-946e8fe7dca4",
              "parentUUID": "ec5c8284-bd75-4e25-87e6-a64de58eab20",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Create Chart of Account API Tests (POST /v1/chart-of-account)\"",
              "fullTitle": "Create Chart of Account API Tests (POST /v1/chart-of-account) \"before each\" hook in \"Create Chart of Account API Tests (POST /v1/chart-of-account)\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$transaction([\n  prismaAccounting.ledger.deleteMany(),\n  prismaAccounting.transaction.deleteMany(),\n  prismaAccounting. transactionLegLog.deleteMany(),\n  prismaAccounting. transactionLeg.deleteMany(),\n  prismaAccounting.transactionTypeChangeLog.deleteMany(),\n  prismaAccounting.transactionType.deleteMany(),\n  prismaAccounting.userAccount.deleteMany(),\n  prismaAccounting.chartOfAccountLog.deleteMany(),\n  prismaAccounting.chartOfAccount.deleteMany(),\n]);",
              "err": {},
              "uuid": "29444238-c7bf-46c1-ac31-d663abe12a4b",
              "parentUUID": "ec5c8284-bd75-4e25-87e6-a64de58eab20",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Create Chart of Account API Tests (POST /v1/chart-of-account)\"",
              "fullTitle": "Create Chart of Account API Tests (POST /v1/chart-of-account) \"after all\" hook in \"Create Chart of Account API Tests (POST /v1/chart-of-account)\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Promise.all([\n  prismaAuth.$disconnect(),\n  prismaAccounting.$disconnect(),\n]);",
              "err": {},
              "uuid": "0f62fd59-c051-4aba-a0b6-42c00705659c",
              "parentUUID": "ec5c8284-bd75-4e25-87e6-a64de58eab20",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create a new chart of account",
              "fullTitle": "Create Chart of Account API Tests (POST /v1/chart-of-account) should create a new chart of account",
              "timedOut": false,
              "duration": 171,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await makeRequest(sampleCharOfAccount).expectStatus(201);\nconst createdCoA = await prismaAccounting.chartOfAccount.findFirst({\n  where: { code: sampleCharOfAccount.code },\n});\nexpect(createdCoA).to.not.be.null;\nexpect(createdCoA).to.include({\n  name: sampleCharOfAccount.name,\n  description: sampleCharOfAccount.description,\n  transactionType: sampleCharOfAccount.transactionType,\n  headType: sampleCharOfAccount.headType,\n  code: sampleCharOfAccount.code,\n  onlyParent: sampleCharOfAccount.onlyParent,\n  minWalletAmount: sampleCharOfAccount.minWalletAmount,\n  maxWalletAmount: sampleCharOfAccount.maxWalletAmount,\n});\nexpect(createdCoA.dailyLimitCount).to.deep.equal(\n  sampleCharOfAccount.dailyLimit.count\n);\nexpect(createdCoA.weeklyLimitCount).to.deep.equal(\n  sampleCharOfAccount.weeklyLimit.count\n);\nexpect(createdCoA.monthlyLimitCount).to.deep.equal(\n  sampleCharOfAccount.monthlyLimit.count\n);\nexpect(createdCoA.dailyLimitAmount).to.deep.equal(\n  sampleCharOfAccount.dailyLimit.amount\n);\nexpect(createdCoA.weeklyLimitAmount).to.deep.equal(\n  sampleCharOfAccount.weeklyLimit.amount\n);\nexpect(createdCoA.monthlyLimitAmount).to.deep.equal(\n  sampleCharOfAccount.monthlyLimit.amount\n);",
              "err": {
                "message": "AssertionError: expected null not to be null",
                "estack": "AssertionError: expected null not to be null\n    at Context.<anonymous> (file:///opt/app/src/accounting/chartOfAccount/createChartOfAccount.test.js:103:33)",
                "diff": null
              },
              "uuid": "41281f56-f27e-4a1e-b5e5-0ef8e78ee9ef",
              "parentUUID": "ec5c8284-bd75-4e25-87e6-a64de58eab20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new chart of account when limits are not inserted",
              "fullTitle": "Create Chart of Account API Tests (POST /v1/chart-of-account) should create a new chart of account when limits are not inserted",
              "timedOut": false,
              "duration": 482,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const sampleCoA2 = {\n  name: \"Sample Account Name\",\n  description: \"This is a description for the chart of account.\",\n  transactionType: \"SYSTEM\",\n  headType: \"ASSET\",\n  code: \"ACC-4002\",\n  onlyParent: false,\n};\nawait makeRequest(sampleCoA2).expectStatus(201);\nconst createdCoA = await prismaAccounting.chartOfAccount.findFirst({\n  where: { code: sampleCharOfAccount.code },\n});\nexpect(createdCoA).to.not.be.null;\nexpect(createdCoA).to.include({\n  name: sampleCharOfAccount.name,\n  description: sampleCharOfAccount.description,\n  transactionType: sampleCharOfAccount.transactionType,\n  headType: sampleCharOfAccount.headType,\n  code: sampleCharOfAccount.code,\n  onlyParent: sampleCharOfAccount.onlyParent\n});\nexpect(createdCoA.minWalletAmount).to.be.null;\nexpect(createdCoA.maxWalletAmount).to.be.null;\nexpect(createdCoA.dailyLimitCount).to.be.null;\nexpect(createdCoA.weeklyLimitCount).to.be.null;\nexpect(createdCoA.monthlyLimitCount).to.be.null;\nexpect(createdCoA.dailyLimitAmount).to.be.null;\nexpect(createdCoA.weeklyLimitAmount).to.be.null;\nexpect(createdCoA.monthlyLimitAmount).to.be.null;",
              "err": {},
              "uuid": "e37d1adb-6d94-4bb1-980a-b2a45c6305c1",
              "parentUUID": "ec5c8284-bd75-4e25-87e6-a64de58eab20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for negative values input in CoA",
              "fullTitle": "Create Chart of Account API Tests (POST /v1/chart-of-account) should return 400 for negative values input in CoA",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidInput = {\n  ...sampleCharOfAccount,\n  dailyLimit: {\n    count: -20,\n    amount: -30,\n  },\n  monthlyLimit: {\n    count: -20,\n    amount: -30,\n  },\n  weeklyLimit: {\n    count: -20,\n    amount: -30,\n  },\n  minWalletAmount: -600,\n  maxWalletAmount: -1200,\n};\nawait makeRequest(invalidInput).expectStatus(400);",
              "err": {},
              "uuid": "a3780fee-0cd8-4e9e-884e-697b12ecd308",
              "parentUUID": "ec5c8284-bd75-4e25-87e6-a64de58eab20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 409 if the code is already taken",
              "fullTitle": "Create Chart of Account API Tests (POST /v1/chart-of-account) should return 409 if the code is already taken",
              "timedOut": false,
              "duration": 194,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.chartOfAccount.create({\n  data: getPrismaData(sampleCharOfAccount),\n});\nawait makeRequest(sampleCharOfAccount).expectStatus(409);\nconst accounts = await prismaAccounting.chartOfAccount.findMany({\n  where: { code: sampleCharOfAccount.code },\n});\nexpect(accounts).to.have.lengthOf(1);",
              "err": {
                "message": "AssertionError: HTTP status 201 !== 409\n\n201 !== 409\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 201 !== 409\n\n201 !== 409\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 201\n+ 409\n"
              },
              "uuid": "a0ba2999-b715-4af8-b2e1-36459d90f16e",
              "parentUUID": "ec5c8284-bd75-4e25-87e6-a64de58eab20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create chart of account and user account when onlyParent is true",
              "fullTitle": "Create Chart of Account API Tests (POST /v1/chart-of-account) should create chart of account and user account when onlyParent is true",
              "timedOut": false,
              "duration": 539,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const chartData = { ...sampleCharOfAccount, onlyParent: true };\nawait makeRequest(chartData).expectStatus(201);\nconst createdCoA = await prismaAccounting.chartOfAccount.findFirst({\n  where: { code: chartData.code },\n});\nexpect(createdCoA).to.not.be.null;\nconst userAccount = await prismaAccounting.userAccount.findFirst({\n  where: { chartOfAccount_id: createdCoA.id },\n});\nexpect(userAccount).to.not.be.null;",
              "err": {},
              "uuid": "1df200d7-5c3a-4ba8-a455-079e6ba5b04b",
              "parentUUID": "ec5c8284-bd75-4e25-87e6-a64de58eab20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create user account when onlyParent is false",
              "fullTitle": "Create Chart of Account API Tests (POST /v1/chart-of-account) should not create user account when onlyParent is false",
              "timedOut": false,
              "duration": 148,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await makeRequest(sampleCharOfAccount).expectStatus(201);\nconst createdCoA = await prismaAccounting.chartOfAccount.findFirst({\n  where: { code: sampleCharOfAccount.code },\n});\nexpect(createdCoA).to.not.be.null;\nconst userAccount = await prismaAccounting.userAccount.findFirst({\n  where: { chartOfAccount_id: createdCoA.id },\n});\nexpect(userAccount).to.be.null;",
              "err": {
                "message": "AssertionError: expected null not to be null",
                "estack": "AssertionError: expected null not to be null\n    at Context.<anonymous> (file:///opt/app/src/accounting/chartOfAccount/createChartOfAccount.test.js:230:33)",
                "diff": null
              },
              "uuid": "6ba5a63d-a094-4286-82bf-948b663ea3d7",
              "parentUUID": "ec5c8284-bd75-4e25-87e6-a64de58eab20",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create appropriate logs for new chart of account",
              "fullTitle": "Create Chart of Account API Tests (POST /v1/chart-of-account) should create appropriate logs for new chart of account",
              "timedOut": false,
              "duration": 313,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await makeRequest(sampleCharOfAccount).expectStatus(201);\nconst logEntry = await prismaAccounting.chartOfAccountLog.findFirst({\n  where: { createdByAdminId: 1 },\n});\nexpect(logEntry).to.include({\n  changeType: \"CREATE\",\n  oldValue: null,\n});\nexpect(logEntry.newValue).to.not.be.null;",
              "err": {},
              "uuid": "3460fe17-7278-47fa-b262-365e44ef8c26",
              "parentUUID": "ec5c8284-bd75-4e25-87e6-a64de58eab20",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e37d1adb-6d94-4bb1-980a-b2a45c6305c1",
            "a3780fee-0cd8-4e9e-884e-697b12ecd308",
            "1df200d7-5c3a-4ba8-a455-079e6ba5b04b",
            "3460fe17-7278-47fa-b262-365e44ef8c26"
          ],
          "failures": [
            "41281f56-f27e-4a1e-b5e5-0ef8e78ee9ef",
            "a0ba2999-b715-4af8-b2e1-36459d90f16e",
            "6ba5a63d-a094-4286-82bf-948b663ea3d7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1862,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "892b8797-094d-4d4b-b1ee-d13275650727",
          "title": "GET Chart of Account API Tests (GET :/v1/chart-of-account)",
          "fullFile": "/opt/app/src/accounting/chartOfAccount/getChartOfAccount.test.js",
          "file": "/src/accounting/chartOfAccount/getChartOfAccount.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET Chart of Account API Tests (GET :/v1/chart-of-account)\"",
              "fullTitle": "GET Chart of Account API Tests (GET :/v1/chart-of-account) \"before all\" hook in \"GET Chart of Account API Tests (GET :/v1/chart-of-account)\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Promise.all([prismaAuth.$connect(), prismaAccounting.$connect()]);\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);",
              "err": {},
              "uuid": "da160359-144d-46a3-a1e0-133a007facef",
              "parentUUID": "892b8797-094d-4d4b-b1ee-d13275650727",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"GET Chart of Account API Tests (GET :/v1/chart-of-account)\"",
              "fullTitle": "GET Chart of Account API Tests (GET :/v1/chart-of-account) \"before each\" hook in \"GET Chart of Account API Tests (GET :/v1/chart-of-account)\"",
              "timedOut": false,
              "duration": 192,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$transaction([\n  prismaAccounting.userAccount.deleteMany(),\n  prismaAccounting.chartOfAccount.deleteMany(),\n]);\nconst charOfAccounts = [\n  sampleCharOfAccount,\n  {\n    ...sampleCharOfAccount,\n    name: \"Account B\",\n    code: \"002\",\n    onlyParent: true,\n    adminId: 1,\n    description: \"Description for Account 2\",\n  },\n];\nawait prismaAccounting.chartOfAccount.createMany({\n  data: charOfAccounts,\n});",
              "err": {},
              "uuid": "9a1cfce6-9561-44f3-8e17-6bc642f6ff88",
              "parentUUID": "892b8797-094d-4d4b-b1ee-d13275650727",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"GET Chart of Account API Tests (GET :/v1/chart-of-account)\"",
              "fullTitle": "GET Chart of Account API Tests (GET :/v1/chart-of-account) \"after all\" hook in \"GET Chart of Account API Tests (GET :/v1/chart-of-account)\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Promise.all([\n  prismaAccounting.$disconnect(),\n  prismaAuth.$disconnect(),\n]);",
              "err": {},
              "uuid": "49e7db39-2b42-4a9c-a346-ab2520e56a29",
              "parentUUID": "892b8797-094d-4d4b-b1ee-d13275650727",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return all Chart of Accounts",
              "fullTitle": "GET Chart of Account API Tests (GET :/v1/chart-of-account) should return all Chart of Accounts",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await makeGetRequest().expectStatus(200);\nconst dbAccounts = await prismaAccounting.chartOfAccount.findMany();\nexpect(response.body.chartofaccounts).to.have.lengthOf(dbAccounts.length);\ndbAccounts.forEach((account, index) => {\n  expect(response.body.chartofaccounts[index]).to.deep.include({\n    name: account.name,\n    description: account.description,\n    transactiontype: account.transactionType,\n    headtype: account.headType,\n    code: account.code,\n    onlyparent: account.onlyParent,\n  });\n});\nexpect(response.body.chartofaccounts[0].name).to.equal(sampleCharOfAccount.name);\nexpect(response.body.chartofaccounts[1].name).to.equal(\"Account B\");",
              "err": {},
              "uuid": "b2a4947e-8366-4658-b059-8965b704d7e0",
              "parentUUID": "892b8797-094d-4d4b-b1ee-d13275650727",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b2a4947e-8366-4658-b059-8965b704d7e0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c783a47e-beb3-4ad1-a88f-f34995322d09",
          "title": "GET Chart of Account Details API Tests (GET :/v1/chart-of-account/:id)",
          "fullFile": "/opt/app/src/accounting/chartOfAccount/getChartOfAccountDetail.test.js",
          "file": "/src/accounting/chartOfAccount/getChartOfAccountDetail.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET Chart of Account Details API Tests (GET :/v1/chart-of-account/:id)\"",
              "fullTitle": "GET Chart of Account Details API Tests (GET :/v1/chart-of-account/:id) \"before all\" hook in \"GET Chart of Account Details API Tests (GET :/v1/chart-of-account/:id)\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Promise.all([prismaAuth.$connect(), prismaAccounting.$connect()]);\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);",
              "err": {},
              "uuid": "3882c02b-8598-4296-8aa3-c69ff3991470",
              "parentUUID": "c783a47e-beb3-4ad1-a88f-f34995322d09",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"GET Chart of Account Details API Tests (GET :/v1/chart-of-account/:id)\"",
              "fullTitle": "GET Chart of Account Details API Tests (GET :/v1/chart-of-account/:id) \"before each\" hook in \"GET Chart of Account Details API Tests (GET :/v1/chart-of-account/:id)\"",
              "timedOut": false,
              "duration": 72,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$transaction([\n  prismaAccounting.userAccount.deleteMany(),\n  prismaAccounting.chartOfAccount.deleteMany(),\n]);",
              "err": {},
              "uuid": "7587eaae-e462-4ea7-a239-d9e0744ef790",
              "parentUUID": "c783a47e-beb3-4ad1-a88f-f34995322d09",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"GET Chart of Account Details API Tests (GET :/v1/chart-of-account/:id)\"",
              "fullTitle": "GET Chart of Account Details API Tests (GET :/v1/chart-of-account/:id) \"after all\" hook in \"GET Chart of Account Details API Tests (GET :/v1/chart-of-account/:id)\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Promise.all([\n  prismaAuth.$disconnect(),\n  prismaAccounting.$disconnect(),\n]);",
              "err": {},
              "uuid": "de19e309-7cb5-4355-9aa3-947452c36441",
              "parentUUID": "c783a47e-beb3-4ad1-a88f-f34995322d09",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return details of a Chart of Account",
              "fullTitle": "GET Chart of Account Details API Tests (GET :/v1/chart-of-account/:id) should return details of a Chart of Account",
              "timedOut": false,
              "duration": 136,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dbCoA = await prismaAccounting.chartOfAccount.create({\n  data: sampleAccount,\n});\nconst response = await makeGetDetailsRequest(dbCoA.id).expectStatus(200);\nconst dbAccount = await prismaAccounting.chartOfAccount.findUnique({\n  where: { id: dbCoA.id },\n});\nexpect(response.body).to.include({\n  name: sampleAccount.name,\n  description: sampleAccount.description,\n  transactiontype: sampleAccount.transactionType,\n  headtype: sampleAccount.headType,\n  code: sampleAccount.code,\n  onlyparent: sampleAccount.onlyParent,\n  minwalletamount: sampleAccount.minWalletAmount,\n  maxwalletamount: sampleAccount.maxWalletAmount,\n});\nexpect(dbAccount.dailyLimitCount).to.equal(response.body.dailylimit.count);\nexpect(dbAccount.monthlyLimitCount).to.equal(response.body.monthlylimit.count);\nexpect(dbAccount.weeklyLimitCount).to.equal(response.body.weeklylimit.count);\nexpect(dbAccount.dailyLimitAmount).to.equal(response.body.dailylimit.amount);\nexpect(dbAccount.monthlyLimitAmount).to.equal(response.body.monthlylimit.amount);\nexpect(dbAccount.weeklyLimitAmount).to.equal(response.body.weeklylimit.amount);",
              "err": {},
              "uuid": "4d72817a-941c-4296-b46c-6ff57eb72f4e",
              "parentUUID": "c783a47e-beb3-4ad1-a88f-f34995322d09",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4d72817a-941c-4296-b46c-6ff57eb72f4e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 136,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "856a4cba-9bd0-4416-9101-d668883d1458",
          "title": "Update Chart of Account API Tests (PATCH :/v1/chart-of-account)",
          "fullFile": "/opt/app/src/accounting/chartOfAccount/updateChartsOfAccount.test.js",
          "file": "/src/accounting/chartOfAccount/updateChartsOfAccount.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Update Chart of Account API Tests (PATCH :/v1/chart-of-account)\"",
              "fullTitle": "Update Chart of Account API Tests (PATCH :/v1/chart-of-account) \"before all\" hook in \"Update Chart of Account API Tests (PATCH :/v1/chart-of-account)\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Promise.all([prismaAuth.$connect(), prismaAccounting.$connect()]);\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);",
              "err": {},
              "uuid": "7cc259a9-3447-4c99-aa92-22b785a22804",
              "parentUUID": "856a4cba-9bd0-4416-9101-d668883d1458",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Update Chart of Account API Tests (PATCH :/v1/chart-of-account)\"",
              "fullTitle": "Update Chart of Account API Tests (PATCH :/v1/chart-of-account) \"before each\" hook in \"Update Chart of Account API Tests (PATCH :/v1/chart-of-account)\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$transaction([\n  prismaAccounting.chartOfAccountLog.deleteMany(),\n  prismaAccounting.chartOfAccount.deleteMany(),\n]);",
              "err": {},
              "uuid": "811519e9-2725-4511-a4ac-a3d25b7cdf9d",
              "parentUUID": "856a4cba-9bd0-4416-9101-d668883d1458",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Update Chart of Account API Tests (PATCH :/v1/chart-of-account)\"",
              "fullTitle": "Update Chart of Account API Tests (PATCH :/v1/chart-of-account) \"after all\" hook in \"Update Chart of Account API Tests (PATCH :/v1/chart-of-account)\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Promise.all([\n  prismaAccounting.$disconnect(),\n  prismaAuth.$disconnect(),\n]);",
              "err": {},
              "uuid": "119e5c00-f3c2-4c3d-8270-b9133a33f479",
              "parentUUID": "856a4cba-9bd0-4416-9101-d668883d1458",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should update chart of account with valid fields",
              "fullTitle": "Update Chart of Account API Tests (PATCH :/v1/chart-of-account) should update chart of account with valid fields",
              "timedOut": false,
              "duration": 326,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const createdCoA = await createChartOfAccount(initialCoA);\nawait makeUpdateRequest(createdCoA.id, updatedFields).expectStatus(200);\nconst updatedCoADb = await prismaAccounting.chartOfAccount.findUnique({\n  where: { id: createdCoA.id },\n  select: {\n    name: true,\n    description: true,\n    code: true,\n    dailyLimitCount: true,\n    dailyLimitAmount: true,\n    monthlyLimitCount: true,\n    monthlyLimitAmount: true,\n    weeklyLimitCount:true,\n    weeklyLimitAmount:true,\n    minWalletAmount: true,\n    maxWalletAmount: true,\n  },\n});\n \nexpect(updatedCoADb.name).to.equal(updatedFields.name);\nexpect(updatedCoADb.description).to.equal(updatedFields.description);\nexpect(updatedCoADb.code).to.equal(updatedFields.code);\nexpect(updatedCoADb.dailyLimitCount).to.equal(updatedFields.dailyLimit.count);\nexpect(updatedCoADb.dailyLimitAmount).to.equal(updatedFields.dailyLimit.amount);\nexpect(updatedCoADb.weeklyLimitCount).to.equal(updatedFields.weeklyLimit.count);\nexpect(updatedCoADb.weeklyLimitAmount).to.equal(updatedFields.weeklyLimit.amount);\nexpect(updatedCoADb.monthlyLimitCount).to.equal(updatedFields.monthlyLimit.count);\nexpect(updatedCoADb.monthlyLimitAmount).to.equal(updatedFields.monthlyLimit.amount);\nexpect(updatedCoADb.minWalletAmount).to.equal(updatedFields.minWalletAmount);\nexpect(updatedCoADb.maxWalletAmount).to.equal(updatedFields.maxWalletAmount);\nconst duplicateCoA = await prismaAccounting.chartOfAccount.findMany({\n  where: { code: updatedFields.code },\n});\nexpect(duplicateCoA).to.have.lengthOf(1);",
              "err": {
                "message": "AssertionError: HTTP status 201 !== 200\n\n201 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 201 !== 200\n\n201 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 201\n+ 200\n"
              },
              "uuid": "9528adcd-183d-4947-b22b-f68d72c9bd24",
              "parentUUID": "856a4cba-9bd0-4416-9101-d668883d1458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not let user update CoA limits with negative values",
              "fullTitle": "Update Chart of Account API Tests (PATCH :/v1/chart-of-account) should not let user update CoA limits with negative values",
              "timedOut": false,
              "duration": 204,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createdCoA = await createChartOfAccount(initialCoA);\nconst negFieldsForCoA = {\n  name: \"Updated Account Name\",\n  description: \"This is an updated description for the chart of account.\",\n  code: \"ACC-002\",\n  dailyLimit: {\n    count: -10,\n    amount: -60,\n  },\n  monthlyLimit: {\n    count: -30,\n    amount: -50,\n  },\n  weeklyLimit: {\n    count: -20,\n    amount:- 30\n},\n  minWalletAmount: -300,\n  maxWalletAmount: -1500,\n};\nawait makeUpdateRequest(createdCoA.id, negFieldsForCoA).expectStatus(400);\nconst updatedCoADb = await prismaAccounting.chartOfAccount.findUnique({\n  where: { id: createdCoA.id },\n  select: {\n    name: true,\n    description: true,\n    code: true,\n    dailyLimitCount: true,\n    dailyLimitAmount: true,\n    monthlyLimitCount: true,\n    monthlyLimitAmount: true,\n    weeklyLimitCount:true,\n    weeklyLimitAmount:true,\n    minWalletAmount: true,\n    maxWalletAmount: true,\n  },\n});\n \nexpect(updatedCoADb.name).to.equal(initialCoA.name);\nexpect(updatedCoADb.description).to.equal(initialCoA.description);\nexpect(updatedCoADb.code).to.equal(initialCoA.code);\nexpect(updatedCoADb.dailyLimitCount).to.equal(initialCoA.dailyLimitCount);\nexpect(updatedCoADb.dailyLimitAmount).to.equal(initialCoA.dailyLimitAmount);\nexpect(updatedCoADb.weeklyLimitCount).to.equal(initialCoA.weeklyLimitCount);\nexpect(updatedCoADb.weeklyLimitAmount).to.equal(initialCoA.weeklyLimitAmount);\nexpect(updatedCoADb.monthlyLimitCount).to.equal(initialCoA.monthlyLimitCount);\nexpect(updatedCoADb.monthlyLimitAmount).to.equal(initialCoA.monthlyLimitAmount);\nexpect(updatedCoADb.minWalletAmount).to.equal(initialCoA.minWalletAmount);\nexpect(updatedCoADb.maxWalletAmount).to.equal(initialCoA.maxWalletAmount);",
              "err": {},
              "uuid": "1e821fe5-ac62-4985-afab-dbda334f9a7b",
              "parentUUID": "856a4cba-9bd0-4416-9101-d668883d1458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get 200 if the user does not insert limits in CoA",
              "fullTitle": "Update Chart of Account API Tests (PATCH :/v1/chart-of-account) should get 200 if the user does not insert limits in CoA",
              "timedOut": false,
              "duration": 368,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const createdCoA = await createChartOfAccount(initialCoA);\nconst coAFieldsWithoutLimits = {\n  name: \"Updated Account Name\",\n  description: \"This is an updated description for the chart of account.\",\n  code: \"ACC-002\",\n  dailyLimitCount: null,\n  dailyLimitAmount: null,\n  monthlyLimitAmount: null,\n  monthlyLimitCount: null,\n  weeklyLimitAmount: null,\n  weeklyLimitCount: null,\n  minWalletAmount: null,\n  maxWalletAmount: null,\n};\nawait makeUpdateRequest(createdCoA.id, coAFieldsWithoutLimits).expectStatus(200);\nconst updatedCoADb = await prismaAccounting.chartOfAccount.findUnique({\n  where: { id: createdCoA.id },\n  select: {\n    name: true,\n    description: true,\n    code: true,\n    dailyLimitCount: true,\n    dailyLimitAmount: true,\n    monthlyLimitCount: true,\n    monthlyLimitAmount: true,\n    weeklyLimitCount:true,\n    weeklyLimitAmount:true,\n    minWalletAmount: true,\n    maxWalletAmount: true,\n  },\n});\n \nexpect(updatedCoADb.name).to.equal(coAFieldsWithoutLimits.name);\nexpect(updatedCoADb.description).to.equal(coAFieldsWithoutLimits.description);\nexpect(updatedCoADb.code).to.equal(coAFieldsWithoutLimits.code);\nexpect(updatedCoADb.dailyLimitCount).to.be.null;\nexpect(updatedCoADb.dailyLimitAmount).to.be.null;\nexpect(updatedCoADb.weeklyLimitCount).to.be.null;\nexpect(updatedCoADb.weeklyLimitAmount).to.be.null;\nexpect(updatedCoADb.monthlyLimitCount).to.be.null;\nexpect(updatedCoADb.monthlyLimitAmount).to.be.null;\nexpect(updatedCoADb.minWalletAmount).to.be.null;\nexpect(updatedCoADb.maxWalletAmount).to.be.null;",
              "err": {
                "message": "AssertionError: HTTP status 201 !== 200\n\n201 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 201 !== 200\n\n201 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 201\n+ 200\n"
              },
              "uuid": "093a8a63-5a92-43ae-8278-da0d6de83169",
              "parentUUID": "856a4cba-9bd0-4416-9101-d668883d1458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create log entry after update",
              "fullTitle": "Update Chart of Account API Tests (PATCH :/v1/chart-of-account) should create log entry after update",
              "timedOut": false,
              "duration": 29,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const createdCoA = await createChartOfAccount(initialCoA);\nawait makeUpdateRequest(createdCoA.id, updatedFields).expectStatus(200);\nconst logEntry = await prismaAccounting.chartOfAccountLog.findFirst({\n  where: { createdByAdminId: 1 },\n});\nexpect(logEntry).to.include({\n  changeType: \"UPDATE\",\n});\nexpect(logEntry.oldValue).to.not.be.null;\nexpect(logEntry.newValue).to.not.be.null;",
              "err": {
                "message": "AssertionError: HTTP status 201 !== 200\n\n201 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 201 !== 200\n\n201 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 201\n+ 200\n"
              },
              "uuid": "23f4d75f-61bb-4928-8742-0bd15d1b90db",
              "parentUUID": "856a4cba-9bd0-4416-9101-d668883d1458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for non-allowed field updates",
              "fullTitle": "Update Chart of Account API Tests (PATCH :/v1/chart-of-account) should return 400 for non-allowed field updates",
              "timedOut": false,
              "duration": 20,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const createdCoA = await createChartOfAccount(initialCoA);\nconst nonAllowedUpdates = {\n  onlyParent: true,\n  headType: \"ASSET\",\n  transactionType: \"SYSTEM\",\n};\nawait makeUpdateRequest(createdCoA.id, nonAllowedUpdates).expectStatus(200);\nconst unchanged = await prismaAccounting.chartOfAccount.findUnique({\n  where: { id: createdCoA.id },\n});\nexpect(unchanged.onlyParent).to.equal(initialCoA.onlyParent);\nexpect(unchanged.headType).to.equal(initialCoA.headType);\nexpect(unchanged.transactionType).to.equal(initialCoA.transactionType);",
              "err": {
                "message": "AssertionError: HTTP status 201 !== 200\n\n201 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 201 !== 200\n\n201 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 201\n+ 200\n"
              },
              "uuid": "ad19e2fb-8c30-4e22-b761-470f221eeefd",
              "parentUUID": "856a4cba-9bd0-4416-9101-d668883d1458",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for non-existent chart of account",
              "fullTitle": "Update Chart of Account API Tests (PATCH :/v1/chart-of-account) should return 404 for non-existent chart of account",
              "timedOut": false,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const nonExistentId = 99999;\nawait makeUpdateRequest(nonExistentId, updatedFields).expectStatus(404);",
              "err": {
                "message": "AssertionError: HTTP status 201 !== 404\n\n201 !== 404\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 201 !== 404\n\n201 !== 404\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 201\n+ 404\n"
              },
              "uuid": "46003311-13fb-470d-80ee-d586b422e774",
              "parentUUID": "856a4cba-9bd0-4416-9101-d668883d1458",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1e821fe5-ac62-4985-afab-dbda334f9a7b"
          ],
          "failures": [
            "9528adcd-183d-4947-b22b-f68d72c9bd24",
            "093a8a63-5a92-43ae-8278-da0d6de83169",
            "23f4d75f-61bb-4928-8742-0bd15d1b90db",
            "ad19e2fb-8c30-4e22-b761-470f221eeefd",
            "46003311-13fb-470d-80ee-d586b422e774"
          ],
          "pending": [],
          "skipped": [],
          "duration": 964,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3c4ab817-2e42-4996-8df8-22d9b2561e25",
          "title": "Enable or Disable Trxn Leg API Tests (PUT :v1/trxn-leg/change-status)",
          "fullFile": "/opt/app/src/accounting/transactionLeg/changeTrxLegStatus.test.js",
          "file": "/src/accounting/transactionLeg/changeTrxLegStatus.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Enable or Disable Trxn Leg API Tests (PUT :v1/trxn-leg/change-status)\"",
              "fullTitle": "Enable or Disable Trxn Leg API Tests (PUT :v1/trxn-leg/change-status) \"before all\" hook in \"Enable or Disable Trxn Leg API Tests (PUT :v1/trxn-leg/change-status)\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$connect();",
              "err": {},
              "uuid": "3f30289d-4329-4336-b531-04774204e766",
              "parentUUID": "3c4ab817-2e42-4996-8df8-22d9b2561e25",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Enable or Disable Trxn Leg API Tests (PUT :v1/trxn-leg/change-status)\"",
              "fullTitle": "Enable or Disable Trxn Leg API Tests (PUT :v1/trxn-leg/change-status) \"before each\" hook in \"Enable or Disable Trxn Leg API Tests (PUT :v1/trxn-leg/change-status)\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.transactionLegLog.deleteMany({});\nawait prismaAccounting.transactionLeg.deleteMany({});\nawait prismaAccounting.transactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.transactionType.deleteMany({});\nawait prismaAccounting.chartOfAccountLog.deleteMany({});\nawait prismaAccounting.chartOfAccount.deleteMany({});\nawait prismaAccounting.chartOfAccount.createMany({\n  data: [\n    {\n      name: \"Account 1\",\n      description: \"Description for Account 1\",\n      transactionType: \"SYSTEM\",\n      headType: \"ASSET\",\n      code: \"001\",\n      onlyParent: false,\n      adminId: 1,\n    },\n    {\n      name: \"Account 2\",\n      description: \"Description for Account 2\",\n      transactionType: \"SYSTEM\",\n      headType: \"ASSET\",\n      code: \"002\",\n      onlyParent: true,\n      adminId: 1,\n    },\n  ],\n});\nconst account1 = await prismaAccounting.chartOfAccount.findUnique({\n  where: {\n    code: \"001\",\n  },\n});\nconst account2 = await prismaAccounting.chartOfAccount.findUnique({\n  where: {\n    code: \"002\",\n  },\n});\nconst typeA = await prismaAccounting.transactionType.create({\n  data: {\n    transactionCode: \"223\",\n    name: \"TypeA\",\n    description: \"qqqqqqqqqqqqqqqqq\",\n    minAmount: 66,\n    maxAmount: 666,\n    createdByAdminId: 1,\n    createdByAdminIdentifier: \"11\",\n    isActive: true,\n    fromChartOfAccountId: account1.id,\n    toChartOfAccountId: account2.id,\n  },\n});\nconst typeB = await prismaAccounting.transactionType.create({\n  data: {\n    transactionCode: \"224\",\n    name: \"TypeB\",\n    description: \"qqqqqqqqqqqqqqqqq\",\n    minAmount: 66,\n    maxAmount: 666,\n    createdByAdminId: 1,\n    createdByAdminIdentifier: \"11\",\n    isActive: true,\n    fromChartOfAccountId: account1.id,\n    toChartOfAccountId: account2.id,\n  },\n});\nawait prismaAccounting. transactionLeg.create({\n  data: {\n    name: \"Public\",\n    description: \"Initial description\",\n    type: \"FEE\",\n    isEnable: true,\n    originalTransactionTypeId: typeA.id,\n    generatedTransactionTypeId: typeB.id,\n    chargeType: \"FIXED\",\n    fixedAmount: 100,\n    minAmount: 10,\n    maxAmount: 200,\n    percentageAmount: 5,\n  },\n});",
              "err": {},
              "uuid": "5650d752-6a85-402b-92e2-d0be338ffd36",
              "parentUUID": "3c4ab817-2e42-4996-8df8-22d9b2561e25",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Enable or Disable Trxn Leg API Tests (PUT :v1/trxn-leg/change-status)\"",
              "fullTitle": "Enable or Disable Trxn Leg API Tests (PUT :v1/trxn-leg/change-status) \"after all\" hook in \"Enable or Disable Trxn Leg API Tests (PUT :v1/trxn-leg/change-status)\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "c0c793cb-0f70-4fa3-b6a2-a93f5f4cd467",
              "parentUUID": "3c4ab817-2e42-4996-8df8-22d9b2561e25",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should disable a leg and change log",
              "fullTitle": "Enable or Disable Trxn Leg API Tests (PUT :v1/trxn-leg/change-status) should disable a leg and change log",
              "timedOut": false,
              "duration": 69,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\nconst token = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst testFee = await prismaAccounting. transactionLeg.findMany({});\nconst feeId = testFee[0].id;\nawait pactum\n  .spec()\n  .put(`${ApiUrls.apiBaseUrl}${ApiUrls.enableDisableLeg}${feeId}`)\n  .withBearerToken(token)\n  .withJson({\n    isEnable: false,\n  })\n  .expectStatus(200);\nconst updatedFeeRecord = await prismaAccounting.transactionLeg.findUnique({\n  where: { id: feeId },\n});\nexpect(updatedFeeRecord.isEnable).to.be.false;\nconst logEntry = await prismaAccounting.transactionLegLog.findMany({\n  where: {\n    transactionLegId: feeId,\n    changeType: \"CHANGE_STATUS\",\n  }\n});\nexpect(logEntry).to.not.be.null;\nexpect(logEntry.changeType).to.equal(\"CHANGE_STATUS\");",
              "err": {
                "message": "AssertionError: expected undefined to equal 'CHANGE_STATUS'",
                "estack": "AssertionError: expected undefined to equal 'CHANGE_STATUS'\n    at Context.<anonymous> (file:///opt/app/src/accounting/transactionLeg/changeTrxLegStatus.test.js:146:36)",
                "diff": null
              },
              "uuid": "ae352f32-6196-4421-be30-e95251249ee9",
              "parentUUID": "3c4ab817-2e42-4996-8df8-22d9b2561e25",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ae352f32-6196-4421-be30-e95251249ee9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 69,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bceef61d-6676-4201-a53d-91e2df01e598",
          "title": "Create Trxn Fee API Tests (POST fee:/v1/trxn-leg)",
          "fullFile": "/opt/app/src/accounting/transactionLeg/createTrxnLeg.test.js",
          "file": "/src/accounting/transactionLeg/createTrxnLeg.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Create Trxn Fee API Tests (POST fee:/v1/trxn-leg)\"",
              "fullTitle": "Create Trxn Fee API Tests (POST fee:/v1/trxn-leg) \"before all\" hook in \"Create Trxn Fee API Tests (POST fee:/v1/trxn-leg)\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$connect();",
              "err": {},
              "uuid": "7523378b-6e8e-4655-9995-29bc20c6494e",
              "parentUUID": "bceef61d-6676-4201-a53d-91e2df01e598",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Create Trxn Fee API Tests (POST fee:/v1/trxn-leg)\"",
              "fullTitle": "Create Trxn Fee API Tests (POST fee:/v1/trxn-leg) \"before each\" hook in \"Create Trxn Fee API Tests (POST fee:/v1/trxn-leg)\"",
              "timedOut": false,
              "duration": 28,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\n    await prismaAccounting.transaction.deleteMany({});\n    await prismaAccounting.transactionLegLog.deleteMany({});\n    await prismaAccounting.transactionLeg.deleteMany({});\n    await prismaAccounting.transactionTypeChangeLog.deleteMany({});\n    await prismaAccounting.transactionType.deleteMany({});\n    await prismaAccounting.userAccount.deleteMany({});\n    await prismaAccounting.chartOfAccountLog.deleteMany({});\n    await prismaAccounting.chartOfAccount.deleteMany({});\n    \n    await prismaAccounting.chartOfAccount.createMany({\n      data: [\n        {\n          name: \"Account 1\",\n          description: \"Description for Account 1\",\n          transactionType: \"SYSTEM\",\n          headType: \"ASSET\",\n          code: \"001\",\n          onlyParent: false,\n          adminId: 1,\n        },\n        {\n          name: \"Account 2\",\n          description: \"Description for Account 2\",\n          transactionType: \"SYSTEM\",\n          headType: \"ASSET\",\n          code: \"002\",\n          onlyParent: true,\n          adminId: 1,\n        },\n      ],\n    });\n    const account1 = await prismaAccounting.chartOfAccount.findUnique({\n      where: {\n        code: \"001\",\n      },\n    });\n    const account2 = await prismaAccounting.chartOfAccount.findUnique({\n      where: {\n        code: \"002\",\n      },\n    });\n    typeA = await prismaAccounting.transactionType.create({\n      data: {\n        transactionCode: \"223\",\n        name: \"TypeA\",\n        description: \"qqqqqqqqqqqqqqqqq\",\n        minAmount: 66,\n        maxAmount: 666,\n        createdByAdminId: 1,\n        createdByAdminIdentifier: \"11\",\n        isActive: true,\n        fromChartOfAccountId: account1.id,\n        toChartOfAccountId: account2.id,\n      },\n    });\n    typeB = await prismaAccounting.transactionType.create({\n      data: {\n        transactionCode: \"224\",\n        name: \"TypeB\",\n        description: \"qqqqqqqqqqqqqqqqq\",\n        minAmount: 66,\n        maxAmount: 666,\n        createdByAdminId: 1,\n        createdByAdminIdentifier: \"11\",\n        isActive: true,\n        fromChartOfAccountId: account1.id,\n        toChartOfAccountId: account2.id,\n      },\n    });\n    const adminUser = {\n      email: \"admin@ppay.com\",\n      roles: \"Admin\",\n      adminRole: \"ADMIN\",\n    };\n    token = generateToken(\n      1,\n      adminUser.email,\n      adminUser.roles,\n      adminUser.adminRole\n    );",
              "err": {},
              "uuid": "457ecdd4-19d4-4379-b103-d6c1ceb80901",
              "parentUUID": "bceef61d-6676-4201-a53d-91e2df01e598",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Create Trxn Fee API Tests (POST fee:/v1/trxn-leg)\"",
              "fullTitle": "Create Trxn Fee API Tests (POST fee:/v1/trxn-leg) \"after all\" hook in \"Create Trxn Fee API Tests (POST fee:/v1/trxn-leg)\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "8b9cfad2-f749-4846-97e4-abcef642c535",
              "parentUUID": "bceef61d-6676-4201-a53d-91e2df01e598",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create a new leg",
              "fullTitle": "Create Trxn Fee API Tests (POST fee:/v1/trxn-leg) should create a new leg",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.createLeg}`)\n  .withJson({\n    name: \"Send Money Fee\",\n    description: \"Corporate description\",\n    type: \"FEE\",\n    isEnable: true,\n    originalTransactionType: typeA.id.toString(),\n    generatedTransactionType: typeB.id.toString(),\n    chargeType: \"Percentage\",\n    amount: 30,\n    minAmount: 30,\n    maxAmount: 100,\n  })\n  .expectStatus(201);\nconst createdFee = await prismaAccounting.transactionLeg.findMany({\n  where: { name: \"Corporate\" },\n});\nexpect(createdFee).to.not.be.null;",
              "err": {},
              "uuid": "e456fe75-de21-423f-8aad-b5f2df157be4",
              "parentUUID": "bceef61d-6676-4201-a53d-91e2df01e598",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for invalid input of fee",
              "fullTitle": "Create Trxn Fee API Tests (POST fee:/v1/trxn-leg) should return 400 for invalid input of fee",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidFee = {\n  name: \"\",\n  description: \"Invalid description\",\n  type: \"Type C\",\n  isEnable: true,\n  originalTransactionType: 1,\n  generatedTransactionType: 2,\n  chargeType: \"Charge Invalid\",\n  amount: -100,\n  minAmount: -50,\n  maxAmount: -200,\n};\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.createLeg}`)\n  .withJson({\n    name: \"\",\n    description: \"Invalid description\",\n    type: \"Type C\",\n    isEnable: true,\n    originalTransactionType: 1,\n    generatedTransactionType: 2,\n    chargeType: \"Charge Invalid\",\n    amount: -100,\n    minAmount: -50,\n    maxAmount: -200,\n  })\n  .expectStatus(400);\nconst dbFees = await prismaAccounting.transactionLeg.findMany({});\nexpect(dbFees).to.have.lengthOf(0);",
              "err": {},
              "uuid": "afe74d5b-2236-482d-ad5c-342806d50f9d",
              "parentUUID": "bceef61d-6676-4201-a53d-91e2df01e598",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 419 if the fee already exists and cannot be created again",
              "fullTitle": "Create Trxn Fee API Tests (POST fee:/v1/trxn-leg) should return 419 if the fee already exists and cannot be created again",
              "timedOut": false,
              "duration": 19,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.transactionLeg.create({\n   data: {\n     name: \"Public\",\n     description: \"Initial description\",\n     type: \"FEE\",\n     isEnable: true,\n     originalTransactionTypeId: typeA.id,\n     generatedTransactionTypeId: typeB.id,\n     chargeType: \"FIXED\",\n     fixedAmount: 100,\n     minAmount: 10,\n     maxAmount: 200,\n     percentageAmount: 5,\n   },\n });\n const existingFee = {\n   name: \"Public\",\n   description: \"Initial description\",\n   type: \"FEE\",\n   isEnable: true,\n   originalTransactionTypeId: typeA.id,\n   generatedTransactionTypeId: typeB.id,\n   chargeType: \"FIXED\",\n   fixedAmount: 100,\n   minAmount: 10,\n   maxAmount: 200,\n   percentageAmount: 5,\n };\n await pactum\n   .spec()\n   .withMethod(\"POST\")\n   .withBearerToken(token)\n   .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.createLeg}`)\n   .withJson({\n     name: \"Corporate\",\n     description: \"Corporate description\",\n     type: \"FEE\",\n     isEnable: true,\n     originalTransactionType: typeA.id.toString(),\n     generatedTransactionType: typeB.id.toString(),\n     chargeType: \"Percentage\",\n     amount: 30,\n     minAmount: 30,\n     maxAmount: 100,\n   })\n   .expectStatus(400);\n const dbFees = await prismaAccounting.transactionLeg.findMany({\n   where: {\n     name: existingFee.name,\n     description: existingFee.description,\n     type: existingFee.type,\n     isEnable: existingFee.isEnable,\n     originalTransactionType: existingFee.originalTransactionType,\n     generatedTransactionType: existingFee.generatedTransactionType,\n     chargeType: existingFee.chargeType,\n     amount: existingFee.amount,\n     minAmount: existingFee.minAmount,\n     maxAmount: existingFee.maxAmount,\n   },\n });\n const feeRecord = dbFees[0];\n expect(feeRecord).to.exist;\n expect(feeRecord.name).to.equal(existingFee.name);\n expect(feeRecord.description).to.equal(existingFee.description);\n expect(feeRecord.type).to.equal(existingFee.type);",
              "err": {
                "message": "AssertionError: HTTP status 201 !== 400\n\n201 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 201 !== 400\n\n201 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 201\n+ 400\n"
              },
              "uuid": "81d81af6-8551-4cf2-833c-e09e05f6308b",
              "parentUUID": "bceef61d-6676-4201-a53d-91e2df01e598",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for multiple missing mandatory fields",
              "fullTitle": "Create Trxn Fee API Tests (POST fee:/v1/trxn-leg) should return 400 for multiple missing mandatory fields",
              "timedOut": false,
              "duration": 19,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.createLeg}`)\n  .withJson({\n    description: \"Test description\",\n    type: \"FEE\",\n    originalTransactionType: 1,\n    chargeType: \"Percentage\",\n    amount: 100,\n  })\n  .expectStatus(400);",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 400\n\n500 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 400\n\n500 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 400\n"
              },
              "uuid": "0ff486b6-0105-4473-8c52-6155cfb50ad2",
              "parentUUID": "bceef61d-6676-4201-a53d-91e2df01e598",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if originalTransactionType and generatedTransactionType are the same",
              "fullTitle": "Create Trxn Fee API Tests (POST fee:/v1/trxn-leg) should return 400 if originalTransactionType and generatedTransactionType are the same",
              "timedOut": false,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const feeWithSameTypes = {\n  name: \"Public\",\n  description: \"Initial description\",\n  type: \"FEE\",\n  isEnable: true,\n  originalTransactionType: typeA.id,\n  generatedTransactionType: typeA.id,\n  chargeType: \"FIXED\",\n  fixedAmount: 100,\n  minAmount: 10,\n  maxAmount: 200,\n  percentageAmount: 5,\n};\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.createLeg}`)\n  .withJson({\n    name: \"Public\",\n    description: \"Initial description\",\n    type: \"FEE\",\n    isEnable: true,\n    originalTransactionType: typeA.id.toString(),\n    generatedTransactionType: typeA.id.toString(),\n    chargeType: \"FIXED\",\n    fixedAmount: 100,\n    minAmount: 10,\n    maxAmount: 200,\n    percentageAmount: 5,\n  })\n  .expectStatus(400);\nconst dbFees = await prismaAccounting.transactionLeg.findMany({\n  where: {\n    originalTransactionTypeId: feeWithSameTypes.originalTransactionType,\n    generatedTransactionTypeId: feeWithSameTypes.generatedTransactionType,\n  },\n});\nexpect(dbFees).to.have.lengthOf(0);",
              "err": {
                "message": "AssertionError: HTTP status 201 !== 400\n\n201 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 201 !== 400\n\n201 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 201\n+ 400\n"
              },
              "uuid": "8af10e06-7d4a-483d-a1f0-6d854f0eaea0",
              "parentUUID": "bceef61d-6676-4201-a53d-91e2df01e598",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if type is AIT and charge type is anything but No Charge",
              "fullTitle": "Create Trxn Fee API Tests (POST fee:/v1/trxn-leg) should return 400 if type is AIT and charge type is anything but No Charge",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const feeWithSameTypes = {\n      name: \"Public\",\n      description: \"Initial description\",\n      type: \"AIT\",\n      isEnable: true,\n      originalTransactionType: typeA.id.toString(),\n      generatedTransactionType: typeA.id.toString(),\n      chargeType: \"FIXED\",\n      fixedAmount: 100,\n      minAmount: 10,\n      maxAmount: 200,\n      percentageAmount: 5,\n    };\n    await pactum\n      .spec()\n      .withMethod(\"POST\")\n      .withBearerToken(token)\n      .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.createLeg}`)\n      .withJson(feeWithSameTypes)\n      .expectStatus(400);\n    const dbFees = await prismaAccounting.transactionLeg.findMany({\n      where: {\n        originalTransactionTypeId: feeWithSameTypes.originalTransactionType,\n        generatedTransactionTypeId: feeWithSameTypes.generatedTransactionType,\n      },\n    });\n    expect(dbFees).to.have.lengthOf(0);",
              "err": {},
              "uuid": "40987898-2b19-4fd5-803d-837b8a2986cd",
              "parentUUID": "bceef61d-6676-4201-a53d-91e2df01e598",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if type is VAT and charge type is anything but Percentage",
              "fullTitle": "Create Trxn Fee API Tests (POST fee:/v1/trxn-leg) should return 400 if type is VAT and charge type is anything but Percentage",
              "timedOut": false,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const feeWithSameTypes = {\n      name: \"Public\",\n      description: \"Initial description\",\n      type: \"VAT\",\n      isEnable: true,\n      originalTransactionType: typeA.id.toString(),\n      generatedTransactionType: typeA.id.toString(),\n      chargeType: \"FIXED\",\n      fixedAmount: 100,\n      minAmount: 10,\n      maxAmount: 200,\n      percentageAmount: 5,\n    };\n    await pactum\n      .spec()\n      .withMethod(\"POST\")\n      .withBearerToken(token)\n      .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.createLeg}`)\n      .withJson(feeWithSameTypes)\n      .expectStatus(400);\n    const dbFees = await prismaAccounting.transactionLeg.findMany({\n      where: {\n        originalTransactionTypeId: feeWithSameTypes.originalTransactionType,\n        generatedTransactionTypeId: feeWithSameTypes.generatedTransactionType,\n      },\n    });\n    expect(dbFees).to.have.lengthOf(0);",
              "err": {
                "message": "AssertionError: HTTP status 201 !== 400\n\n201 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 201 !== 400\n\n201 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 201\n+ 400\n"
              },
              "uuid": "092c7b6b-f706-444c-b10f-d19865cdd7f1",
              "parentUUID": "bceef61d-6676-4201-a53d-91e2df01e598",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if maxAmount is less than or equal to minAmount",
              "fullTitle": "Create Trxn Fee API Tests (POST fee:/v1/trxn-leg) should return 400 if maxAmount is less than or equal to minAmount",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const feeWithInvalidMaxAmount = {\n  name: \"Public\",\n  description: \"Initial description\",\n  type: \"FEE\",\n  isEnable: true,\n  originalTransactionTypeId: typeA.id,\n  generatedTransactionTypeId: typeB.id,\n  chargeType: \"FIXED\",\n  fixedAmount: 100,\n  minAmount: 10,\n  maxAmount: 10,\n  percentageAmount: 5,\n};\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.createLeg}`)\n  .withJson({\n    name: \"Public\",\n    description: \"Initial description\",\n    type: \"FEE\",\n    isEnable: true,\n    originalTransactionTypeId: typeA.id.toString(),\n    generatedTransactionTypeId: typeB.id.toString(),\n    chargeType: \"FIXED\",\n    fixedAmount: 100,\n    minAmount: 10,\n    maxAmount: 10,\n    percentageAmount: 5,\n  })\n  .expectStatus(400);\nconst dbFees = await prismaAccounting.transactionLeg.findMany({\n  where: {\n    name: feeWithInvalidMaxAmount.name,\n  },\n});\nexpect(dbFees).to.have.lengthOf(0);\nconst feeRecord = dbFees[0];\nif (feeRecord) {\n  expect(feeRecord.minAmount).to.be.at.most(feeRecord.maxAmount);\n}",
              "err": {},
              "uuid": "91860c8a-4d2e-49c2-b2b0-e40c62ddd0d0",
              "parentUUID": "bceef61d-6676-4201-a53d-91e2df01e598",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if amount exceeds 100",
              "fullTitle": "Create Trxn Fee API Tests (POST fee:/v1/trxn-leg) should return 400 if amount exceeds 100",
              "timedOut": false,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const feeWithInvalidMaxAmount = {\n      name: \"Public\",\n      description: \"Initial description\",\n      type: \"FEE\",\n      isEnable: true,\n      originalTransactionTypeId: typeA.id,\n      generatedTransactionTypeId: typeB.id,\n      chargeType: \"FIXED\",\n      fixedAmount: 1000,\n      minAmount: 10,\n      maxAmount: 200,\n      percentageAmount: 5,\n    };\n    await pactum\n      .spec()\n      .withMethod(\"POST\")\n      .withBearerToken(token)\n      .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.createLeg}`)\n      .withJson({\n        name: \"Public\",\n        description: \"Initial description\",\n        type: \"FEE\",\n        isEnable: true,\n        originalTransactionType: typeA.id.toString(),\n        generatedTransactionType: typeB.id.toString(),\n        chargeType: \"FIXED\",\n        fixedAmount: 1000,\n        minAmount: 10,\n        maxAmount: 200,\n        percentageAmount: 5,\n      })\n      .expectStatus(400);\n    const dbFees = await prismaAccounting.transactionLeg.findMany({\n      where: {\n        name: feeWithInvalidMaxAmount.name,\n      },\n    });\n    expect(dbFees).to.have.lengthOf(0);",
              "err": {
                "message": "AssertionError: HTTP status 201 !== 400\n\n201 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 201 !== 400\n\n201 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 201\n+ 400\n"
              },
              "uuid": "f648b3b2-11ff-46f5-a8ef-472911dd277e",
              "parentUUID": "bceef61d-6676-4201-a53d-91e2df01e598",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should store null in database min and max value if type is Fixed",
              "fullTitle": "Create Trxn Fee API Tests (POST fee:/v1/trxn-leg) should store null in database min and max value if type is Fixed",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const feeWithFixedType = {\n  name: \"Public\",\n  description: \"Initial description\",\n  type: \"FEE\",\n  isEnable: true,\n  originalTransactionTypeId: typeA.id,\n  generatedTransactionTypeId: typeB.id,\n  chargeType: \"FIXED\",\n  fixedAmount: 50,\n  minAmount: 10,\n  maxAmount: 200,\n  amount: 5,\n};\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.createLeg}`)\n  .withJson({\n    name: feeWithFixedType.name,\n    description: feeWithFixedType.description,\n    type: feeWithFixedType.type,\n    isEnable: feeWithFixedType.isEnable,\n    originalTransactionType:\n      feeWithFixedType.originalTransactionTypeId.toString(),\n    generatedTransactionType:\n      feeWithFixedType.generatedTransactionTypeId.toString(),\n    chargeType: feeWithFixedType.chargeType,\n    amount: 50,\n    percentageAmount: 0,\n  })\n  .expectStatus(201);\nconst dbFees = await prismaAccounting.transactionLeg.findMany({\n  where: { name: feeWithFixedType.name },\n});\nexpect(dbFees).to.have.lengthOf(1);\nconst feeRecord = dbFees[0];\nexpect(feeRecord.minAmount).to.be.null;\nexpect(feeRecord.maxAmount).to.be.null;",
              "err": {},
              "uuid": "d287591b-d437-4b99-beb5-9f4f5ca8c279",
              "parentUUID": "bceef61d-6676-4201-a53d-91e2df01e598",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check the logs for creating a fee",
              "fullTitle": "Create Trxn Fee API Tests (POST fee:/v1/trxn-leg) should check the logs for creating a fee",
              "timedOut": false,
              "duration": 14,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.createLeg}`)\n  .withJson({\n    name: \"Corporate\",\n    description: \"Corporate description\",\n    type: \"FEE\",\n    isEnable: true,\n    originalTransactionType: typeA.id.toString(),\n    generatedTransactionType: typeB.id.toString(),\n    chargeType: \"Percentage\",\n    amount: 30,\n    minAmount: 30,\n    maxAmount: 100,\n  });\nconst createdFee = await prismaAccounting.transactionLeg.findMany({\n  where: { name: \"Corporate\" },\n});\nconst logEntry = await prismaAccounting.transactionLegLog.findMany({\n  where: { transactionLegId: createdFee[0].id },\n});\nexpect(logEntry).to.be.an(\"array\").that.is.not.empty;\nexpect(logEntry[0]).to.have.property(\"changeType\").to.equal(\"CREATE\");\nexpect(logEntry[0]).to.have.property(\"oldValue\").to.be.null;\nexpect(logEntry[0]).to.have.property(\"newValue\").not.to.be.null;",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'id')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'id')\n    at Context.<anonymous> (file:///opt/app/src/accounting/transactionLeg/createTrxnLeg.test.js:544:48)",
                "diff": null
              },
              "uuid": "66175db8-4c71-4d71-a582-4dd6311e1d5c",
              "parentUUID": "bceef61d-6676-4201-a53d-91e2df01e598",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e456fe75-de21-423f-8aad-b5f2df157be4",
            "afe74d5b-2236-482d-ad5c-342806d50f9d",
            "40987898-2b19-4fd5-803d-837b8a2986cd",
            "91860c8a-4d2e-49c2-b2b0-e40c62ddd0d0",
            "d287591b-d437-4b99-beb5-9f4f5ca8c279"
          ],
          "failures": [
            "81d81af6-8551-4cf2-833c-e09e05f6308b",
            "0ff486b6-0105-4473-8c52-6155cfb50ad2",
            "8af10e06-7d4a-483d-a1f0-6d854f0eaea0",
            "092c7b6b-f706-444c-b10f-d19865cdd7f1",
            "f648b3b2-11ff-46f5-a8ef-472911dd277e",
            "66175db8-4c71-4d71-a582-4dd6311e1d5c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 316,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5d5a643f-057d-4ec9-98db-d193a443c526",
          "title": "GET Trxn Leg API Tests (:GET /v1/transaction-leg)",
          "fullFile": "/opt/app/src/accounting/transactionLeg/getTrxnLeg.test.js",
          "file": "/src/accounting/transactionLeg/getTrxnLeg.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET Trxn Leg API Tests (:GET /v1/transaction-leg)\"",
              "fullTitle": "GET Trxn Leg API Tests (:GET /v1/transaction-leg) \"before all\" hook in \"GET Trxn Leg API Tests (:GET /v1/transaction-leg)\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$connect();",
              "err": {},
              "uuid": "6b6fa6fd-a20d-40d9-b3da-e105f216ed0e",
              "parentUUID": "5d5a643f-057d-4ec9-98db-d193a443c526",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"GET Trxn Leg API Tests (:GET /v1/transaction-leg)\"",
              "fullTitle": "GET Trxn Leg API Tests (:GET /v1/transaction-leg) \"before each\" hook in \"GET Trxn Leg API Tests (:GET /v1/transaction-leg)\"",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\nawait prismaAccounting.transaction.deleteMany({});\nawait prismaAccounting.transactionLegLog.deleteMany({});\nawait prismaAccounting.transactionLeg.deleteMany({});\nawait prismaAccounting.transactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.transactionType.deleteMany({});\nawait prismaAccounting.userAccount.deleteMany({});\nawait prismaAccounting.chartOfAccountLog.deleteMany({});\nawait prismaAccounting.chartOfAccount.deleteMany({});\nawait prismaAccounting.chartOfAccount.createMany({\n  data: [\n    {\n      name: 'Account 1',\n      description: 'Description for Account 1',\n      transactionType: 'SYSTEM',\n      headType: 'ASSET',\n      code: '001',\n      onlyParent: false,\n      adminId: 1\n    },\n    {\n      name: 'Account 2',\n      description: 'Description for Account 2',\n      transactionType: 'SYSTEM',\n      headType: 'ASSET',\n      code: '002',\n      onlyParent: true,\n      adminId: 1\n    }\n  ]\n});\nconst account1 = await prismaAccounting.chartOfAccount.findUnique({\n  where: {\n    code: '001'\n  }\n});\nconst account2 = await prismaAccounting.chartOfAccount.findUnique({\n  where: {\n    code: '002'\n  }\n});\n\nconst typeA = await prismaAccounting.transactionType.create({\n  data: {\n    transactionCode: '223',\n    name: 'TypeA',\n    description: 'qqqqqqqqqqqqqqqqq',\n    minAmount: 66,\n    maxAmount: 666,\n    createdByAdminId: 1,\n    createdByAdminIdentifier: '11',\n    isActive: true,\n    fromChartOfAccountId: account1.id,\n    toChartOfAccountId: account2.id,\n  },\n});\nconst typeB = await prismaAccounting.transactionType.create({\n  data: {\n    transactionCode: '224',\n    name: 'TypeB',\n    description: 'qqqqqqqqqqqqqqqqq',\n    minAmount: 66,\n    maxAmount: 666,\n    createdByAdminId: 1,\n    createdByAdminIdentifier: '11',\n    isActive: true,\n    fromChartOfAccountId: account1.id,\n    toChartOfAccountId: account2.id,\n  },\n});\nawait prismaAccounting. transactionLeg.create({\n  data: {\n    name: 'Public',\n    description: 'Initial description',\n    type: 'FEE',\n    isEnable: true,\n    originalTransactionTypeId: typeA.id,\n    generatedTransactionTypeId: typeB.id,\n    chargeType: \"FIXED\",\n    fixedAmount: 100,\n    minAmount: 10,\n    maxAmount: 200,\n    percentageAmount: 5,\n  },\n});",
              "err": {},
              "uuid": "ab384fa4-4221-4137-ad2d-631442305e4b",
              "parentUUID": "5d5a643f-057d-4ec9-98db-d193a443c526",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"GET Trxn Leg API Tests (:GET /v1/transaction-leg)\"",
              "fullTitle": "GET Trxn Leg API Tests (:GET /v1/transaction-leg) \"after all\" hook in \"GET Trxn Leg API Tests (:GET /v1/transaction-leg)\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "25e50e74-f3cc-4d58-bd35-ec2d13ce0962",
              "parentUUID": "5d5a643f-057d-4ec9-98db-d193a443c526",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return all fees",
              "fullTitle": "GET Trxn Leg API Tests (:GET /v1/transaction-leg) should return all fees",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\"\n};\ntoken = generateToken(1, adminUser.email, adminUser.roles, adminUser.adminRole);\nconst response = await pactum\n  .spec()\n  .withMethod('GET')\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.getLegs}`)\n  .expectStatus(200);\nconst feeDb = await prismaAccounting. transactionLeg.findMany({});\nexpect(response.body.transactionlegs).to.be.an('array');\nexpect(response.body.transactionlegs.name).to.equal(feeDb.name);\nexpect(response.body.transactionlegs.description).to.equal(feeDb.description);\nexpect(response.body.transactionlegs.id).to.equal(feeDb.id);",
              "err": {},
              "uuid": "a3785cd8-084a-4332-8199-a158ef1d8f2c",
              "parentUUID": "5d5a643f-057d-4ec9-98db-d193a443c526",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a3785cd8-084a-4332-8199-a158ef1d8f2c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "81f1cb69-fecd-4fd7-ac4c-65e97015e2c5",
          "title": "GET Trxn Fee Details API Tests (:GET /v1/transaction-type)",
          "fullFile": "/opt/app/src/accounting/transactionLeg/getTRxnLegDetails.test.js",
          "file": "/src/accounting/transactionLeg/getTRxnLegDetails.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET Trxn Fee Details API Tests (:GET /v1/transaction-type)\"",
              "fullTitle": "GET Trxn Fee Details API Tests (:GET /v1/transaction-type) \"before all\" hook in \"GET Trxn Fee Details API Tests (:GET /v1/transaction-type)\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$connect();",
              "err": {},
              "uuid": "3e33acb7-fd53-401d-8592-06ad50cd29fd",
              "parentUUID": "81f1cb69-fecd-4fd7-ac4c-65e97015e2c5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"GET Trxn Fee Details API Tests (:GET /v1/transaction-type)\"",
              "fullTitle": "GET Trxn Fee Details API Tests (:GET /v1/transaction-type) \"before each\" hook in \"GET Trxn Fee Details API Tests (:GET /v1/transaction-type)\"",
              "timedOut": false,
              "duration": 29,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\nawait prismaAccounting.transaction.deleteMany({});\nawait prismaAccounting.transactionLegLog.deleteMany({});\nawait prismaAccounting.transactionLeg.deleteMany({});\nawait prismaAccounting.transactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.transactionType.deleteMany({});\nawait prismaAccounting.userAccount.deleteMany({});\nawait prismaAccounting.chartOfAccountLog.deleteMany({});\nawait prismaAccounting.chartOfAccount.deleteMany({});\nawait prismaAccounting.chartOfAccount.createMany({\n  data: [\n    {\n      name: \"Account 1\",\n      description: \"Description for Account 1\",\n      transactionType: \"SYSTEM\",\n      headType: \"ASSET\",\n      code: \"001\",\n      onlyParent: false,\n      adminId: 1,\n    },\n    {\n      name: \"Account 2\",\n      description: \"Description for Account 2\",\n      transactionType: \"SYSTEM\",\n      headType: \"ASSET\",\n      code: \"002\",\n      onlyParent: true,\n      adminId: 1,\n    },\n  ],\n});\nconst account1 = await prismaAccounting.chartOfAccount.findUnique({\n  where: {\n    code: \"001\",\n  },\n});\nconst account2 = await prismaAccounting.chartOfAccount.findUnique({\n  where: {\n    code: \"002\",\n  },\n});\nconst typeA = await prismaAccounting.transactionType.create({\n  data: {\n    transactionCode: \"223\",\n    name: \"TypeA\",\n    description: \"qqqqqqqqqqqqqqqqq\",\n    minAmount: 66,\n    maxAmount: 666,\n    createdByAdminId: 1,\n    createdByAdminIdentifier: \"11\",\n    isActive: true,\n    fromChartOfAccountId: account1.id,\n    toChartOfAccountId: account2.id,\n  },\n});\nconst typeB = await prismaAccounting.transactionType.create({\n  data: {\n    transactionCode: \"224\",\n    name: \"TypeB\",\n    description: \"qqqqqqqqqqqqqqqqq\",\n    minAmount: 66,\n    maxAmount: 666,\n    createdByAdminId: 1,\n    createdByAdminIdentifier: \"11\",\n    isActive: true,\n    fromChartOfAccountId: account1.id,\n    toChartOfAccountId: account2.id,\n  },\n});\nawait prismaAccounting. transactionLeg.create({\n  data: {\n    name: \"Public\",\n    description: \"Initial description\",\n    type: \"FEE\",\n    isEnable: true,\n    originalTransactionTypeId: typeA.id,\n    generatedTransactionTypeId: typeB.id,\n    chargeType: \"FIXED\",\n    fixedAmount: 100,\n    minAmount: 10,\n    maxAmount: 200,\n    percentageAmount: 5,\n  },\n});",
              "err": {},
              "uuid": "1af40a38-6009-4471-90c5-89be9300c838",
              "parentUUID": "81f1cb69-fecd-4fd7-ac4c-65e97015e2c5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"GET Trxn Fee Details API Tests (:GET /v1/transaction-type)\"",
              "fullTitle": "GET Trxn Fee Details API Tests (:GET /v1/transaction-type) \"after all\" hook in \"GET Trxn Fee Details API Tests (:GET /v1/transaction-type)\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "059b00b5-a9ad-4fd3-80d2-859524bdf9e9",
              "parentUUID": "81f1cb69-fecd-4fd7-ac4c-65e97015e2c5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return a fee details",
              "fullTitle": "GET Trxn Fee Details API Tests (:GET /v1/transaction-type) should return a fee details",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const fee = await prismaAccounting. transactionLeg.findMany({\n  where: {\n    name: \"Public\",\n  },\n});\nconst adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst response = await pactum\n  .spec()\n  .get(`${ApiUrls.apiBaseUrl}${ApiUrls.getLegs}/${fee[0].id}`)\n  .withBearerToken(token)\n  .expectStatus(200);\nconst feeDb = await prismaAccounting. transactionLeg.findUnique({\n  where: {\n    id: fee[0].id,\n  },\n});\nexpect(response.body).to.be.an(\"object\");\nexpect(response.body.name).to.equal(feeDb.name);\nexpect(response.body.description).to.equal(feeDb.description);\nexpect(Number(response.body.id)).to.equal(Number(feeDb.id));\nexpect(response.body.amount).to.equal(Number(feeDb.fixedAmount));\nexpect(response.body.minamount).to.equal(Number(feeDb.minAmount));\nexpect(response.body.maxamount).to.equal(Number(feeDb.maxAmount));\nexpect(response.body.chargetype.toUpperCase()).to.equal(feeDb.chargeType);\nexpect(response.body.type.toUpperCase()).to.equal(feeDb.type);",
              "err": {},
              "uuid": "61fbf99e-4a40-4b77-af54-06fc456998ee",
              "parentUUID": "81f1cb69-fecd-4fd7-ac4c-65e97015e2c5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "61fbf99e-4a40-4b77-af54-06fc456998ee"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7f230fb9-2dfb-433c-8163-07b759633ed4",
          "title": "Update Trxn Fee API Tests (PATCH  :/v1/trxn-fee/)",
          "fullFile": "/opt/app/src/accounting/transactionLeg/updateTrxnLeg.test.js",
          "file": "/src/accounting/transactionLeg/updateTrxnLeg.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Update Trxn Fee API Tests (PATCH  :/v1/trxn-fee/)\"",
              "fullTitle": "Update Trxn Fee API Tests (PATCH  :/v1/trxn-fee/) \"before all\" hook in \"Update Trxn Fee API Tests (PATCH  :/v1/trxn-fee/)\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$connect();",
              "err": {},
              "uuid": "c857754a-31d1-4fdf-8ce2-4e753ce19240",
              "parentUUID": "7f230fb9-2dfb-433c-8163-07b759633ed4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Update Trxn Fee API Tests (PATCH  :/v1/trxn-fee/)\"",
              "fullTitle": "Update Trxn Fee API Tests (PATCH  :/v1/trxn-fee/) \"before each\" hook in \"Update Trxn Fee API Tests (PATCH  :/v1/trxn-fee/)\"",
              "timedOut": false,
              "duration": 27,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\nawait prismaAccounting.transaction.deleteMany({});\nawait prismaAccounting.transactionLegLog.deleteMany({});\nawait prismaAccounting.transactionLeg.deleteMany({});\nawait prismaAccounting.transactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.transactionType.deleteMany({});\nawait prismaAccounting.userAccount.deleteMany({});\nawait prismaAccounting.chartOfAccountLog.deleteMany({});\nawait prismaAccounting.chartOfAccount.deleteMany({});\nawait prismaAccounting.chartOfAccount.createMany({\n  data: [\n    {\n      name: 'Account 1',\n      description: 'Description for Account 1',\n      transactionType: 'SYSTEM',\n      headType: 'ASSET',\n      code: '001',\n      onlyParent: false,\n      adminId: 1\n    },\n    {\n      name: 'Account 2',\n      description: 'Description for Account 2',\n      transactionType: 'SYSTEM',\n      headType: 'ASSET',\n      code: '002',\n      onlyParent: true,\n      adminId: 1\n    }\n  ]\n});\nconst account1 = await prismaAccounting.chartOfAccount.findUnique({\n  where: {\n    code: '001'\n  }\n});\nconst account2 = await prismaAccounting.chartOfAccount.findUnique({\n  where: {\n    code: '002'\n  }\n});\nconst typeA = await prismaAccounting.transactionType.create({\n  data: {\n    transactionCode: '223',\n    name: 'TypeA',\n    description: 'qqqqqqqqqqqqqqqqq',\n    minAmount: 66,\n    maxAmount: 666,\n    createdByAdminId: 1,\n    createdByAdminIdentifier: '11',\n    isActive: true,\n    fromChartOfAccountId: account1.id,\n    toChartOfAccountId: account2.id,\n  },\n});\nconst typeB = await prismaAccounting.transactionType.create({\n  data: {\n    transactionCode: '224',\n    name: 'TypeB',\n    description: 'qqqqqqqqqqqqqqqqq',\n    minAmount: 66,\n    maxAmount: 666,\n    createdByAdminId: 1,\n    createdByAdminIdentifier: '11',\n    isActive: true,\n    fromChartOfAccountId: account1.id,\n    toChartOfAccountId: account2.id,\n  },\n});\nconst fee = await prismaAccounting. transactionLeg.create({\n  data: {\n    name: 'Public',\n    description: 'Initial description',\n    type: 'FEE',\n    isEnable: true,\n    originalTransactionTypeId: typeA.id,\n    generatedTransactionTypeId: typeB.id,\n    chargeType: \"FIXED\",\n    fixedAmount: 100,\n    minAmount: 10,\n    maxAmount: 200,\n    percentageAmount: 5,\n  },\n});\nconst adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\"\n};\ntoken = generateToken(1, adminUser.email, adminUser.roles, adminUser.adminRole);",
              "err": {},
              "uuid": "b41fa402-9b14-45df-85d2-dd24d45fc334",
              "parentUUID": "7f230fb9-2dfb-433c-8163-07b759633ed4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Update Trxn Fee API Tests (PATCH  :/v1/trxn-fee/)\"",
              "fullTitle": "Update Trxn Fee API Tests (PATCH  :/v1/trxn-fee/) \"after all\" hook in \"Update Trxn Fee API Tests (PATCH  :/v1/trxn-fee/)\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "2004b7ea-b065-4172-ab64-894f258546b3",
              "parentUUID": "7f230fb9-2dfb-433c-8163-07b759633ed4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should update a fee with valid name, description",
              "fullTitle": "Update Trxn Fee API Tests (PATCH  :/v1/trxn-fee/) should update a fee with valid name, description",
              "timedOut": false,
              "duration": 20,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const fee = await prismaAccounting. transactionLeg.findMany({\n    where: {\n      name: 'Public',\n    },\n  });\n  \n  const feeId = fee[0].id;\n  \n  const feeToUpdate = {\n    name: \"Updated Fee Name\",\n    description: \"Updated description\"\n  };\n  await pactum\n    .spec()\n    .withMethod('PATCH')\n    .withBearerToken(token)\n    .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.updateLegs}${feeId}`)\n    .withJson(feeToUpdate)\n    .expectStatus(200);\n  const updatedFeeRecord = await prismaAccounting. transactionLeg.findUnique({\n    where: { id: feeId }\n  });\n  expect(updatedFeeRecord).to.not.be.null;\n  expect(updatedFeeRecord.name).to.equal(feeToUpdate.name);\n  expect(updatedFeeRecord.description).to.equal(feeToUpdate.description);",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 200\n\n500 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 200\n\n500 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 200\n"
              },
              "uuid": "22c66237-f6c7-41b4-bf2e-22ab2e6d4801",
              "parentUUID": "7f230fb9-2dfb-433c-8163-07b759633ed4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if attempting to update non-allowed fields like type, original and generated transaction type",
              "fullTitle": "Update Trxn Fee API Tests (PATCH  :/v1/trxn-fee/) should return 400 if attempting to update non-allowed fields like type, original and generated transaction type",
              "timedOut": false,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const fee = await prismaAccounting. transactionLeg.findMany({\n  where: {\n    name: 'Public',\n  },\n});\nconst feeId = fee[0].id;\nconst feeWithInvalidFields  = {\n  type: \"AIT\",\n  originalTransactionType: 55,\n  generatedTransactionType: 55,\n};\nawait pactum\n  .spec()\n  .withMethod('PATCH')\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.updateLegs}${feeId}`)\n  .withJson(feeWithInvalidFields)\n  .expectStatus(200);\nconst feeRecord = await prismaAccounting. transactionLeg.findUnique({\n  where: { id: feeId }\n});\nexpect(feeRecord).to.not.be.null;\nexpect(feeRecord.type).to.not.equal(feeWithInvalidFields.type);\nexpect(feeRecord.originalTransactionTypeId).to.not.equal(feeWithInvalidFields.originalTransactionType);\nexpect(feeRecord.generatedTransactionTypeId).to.not.equal(feeWithInvalidFields.generatedTransactionType);",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 200\n\n500 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 200\n\n500 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 200\n"
              },
              "uuid": "ce6791a6-55f0-4119-a36f-a197c3d91bfd",
              "parentUUID": "7f230fb9-2dfb-433c-8163-07b759633ed4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check the logs for updating a fee",
              "fullTitle": "Update Trxn Fee API Tests (PATCH  :/v1/trxn-fee/) should check the logs for updating a fee",
              "timedOut": false,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const fee = await prismaAccounting. transactionLeg.findMany({\n      where: {\n        name: 'Public'\n      },\n    });\n    const feeId = fee[0].id;\n    const feeToUpdate = {\n      name: \"Updated Fee Name\",\n    };\n    await pactum\n      .spec()\n      .withMethod('PATCH')\n      .withBearerToken(token)\n      .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.updateLegs}${feeId}`)\n      .withJson(feeToUpdate);\n    const updatedFeeRecord = await prismaAccounting. transactionLeg.findMany({\n      where: { id: feeId }\n    });\n    const logEntry = await prismaAccounting. transactionLegLog.findMany({\n      where: { transactionLeg_id: updatedFeeRecord.id }\n    });\n    expect(logEntry[0]).to.have.property('changeType').to.equal('UPDATE');\n    expect(logEntry[0]).to.have.property('oldValue').not.to.be.null;\n    expect(logEntry[0]).to.have.property('oldValue').not.to.be.null;",
              "err": {
                "message": "AssertionError: Target cannot be null or undefined.",
                "estack": "AssertionError: Target cannot be null or undefined.\n    at Context.<anonymous> (file:///opt/app/src/accounting/transactionLeg/updateTrxnLeg.test.js:214:33)",
                "diff": null
              },
              "uuid": "756ab8d2-d200-42b0-b8e5-c15d31ec0f11",
              "parentUUID": "7f230fb9-2dfb-433c-8163-07b759633ed4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "22c66237-f6c7-41b4-bf2e-22ab2e6d4801",
            "ce6791a6-55f0-4119-a36f-a197c3d91bfd",
            "756ab8d2-d200-42b0-b8e5-c15d31ec0f11"
          ],
          "pending": [],
          "skipped": [],
          "duration": 54,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "44d16b7b-8cbe-403f-b61f-5d8741862ab2",
          "title": "Refund Transaction API Balance Check (POST)",
          "fullFile": "/opt/app/src/accounting/transactions/refundTransaction.test.js",
          "file": "/src/accounting/transactions/refundTransaction.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Refund Transaction API Balance Check (POST)\"",
              "fullTitle": "Refund Transaction API Balance Check (POST) \"before all\" hook in \"Refund Transaction API Balance Check (POST)\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();",
              "err": {},
              "uuid": "4e2f10e7-88a9-4b45-bd5c-04a2aec05039",
              "parentUUID": "44d16b7b-8cbe-403f-b61f-5d8741862ab2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Refund Transaction API Balance Check (POST)\"",
              "fullTitle": "Refund Transaction API Balance Check (POST) \"before each\" hook in \"Refund Transaction API Balance Check (POST)\"",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\nawait prismaAccounting.transaction.deleteMany({});\nawait prismaAccounting.transactionLegLog.deleteMany({});\nawait prismaAccounting.transactionLeg.deleteMany({});\nawait prismaAccounting.transactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.transactionType.deleteMany({});\nawait prismaAccounting.userAccount.deleteMany({});\nawait prismaAccounting.chartOfAccountLog.deleteMany({});\nawait prismaAccounting.chartOfAccount.deleteMany({});\nawait prismaAccounting.chartOfAccount.createMany({\n  data: [\n    {\n      name: \"Chart of Account 1\",\n      description: \"Description for Account 1\",\n      transactionType: \"SYSTEM\",\n      headType: \"ASSET\",\n      code: \"001\",\n      onlyParent: true,\n      adminId: 1,\n    },\n    {\n      name: \"Chart of Account 2\",\n      description: \"Description for Account 2\",\n      transactionType: \"SYSTEM\",\n      headType: \"ASSET\",\n      code: \"002\",\n      onlyParent: true,\n      adminId: 1,\n    },\n  ],\n});\nconst coA1 = await prismaAccounting.chartOfAccount.findUnique({\n  where: { code: \"001\" },\n});\nconst coA2 = await prismaAccounting.chartOfAccount.findUnique({\n  where: { code: \"002\" },\n});\nconst createdType = await prismaAccounting.transactionType.create({\n  data: {\n    transactionCode: \"223\",\n    name: \"Send Money\",\n    description: \"qqqqqqqqqqqqqqqqq\",\n    minAmount: 66,\n    maxAmount: 666,\n    createdByAdminId: 1,\n    createdByAdminIdentifier: \"11\",\n    isActive: true,\n    fromChartOfAccount: {\n      connect: { id: coA1.id },\n    },\n    toChartOfAccount: {\n      connect: { id: coA2.id },\n    },\n  },\n});",
              "err": {},
              "uuid": "691386a2-72b7-416d-b8b1-b612cb49193d",
              "parentUUID": "44d16b7b-8cbe-403f-b61f-5d8741862ab2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Refund Transaction API Balance Check (POST)\"",
              "fullTitle": "Refund Transaction API Balance Check (POST) \"after all\" hook in \"Refund Transaction API Balance Check (POST)\"",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();",
              "err": {},
              "uuid": "177bc146-37a6-4a10-acfe-a8655320c517",
              "parentUUID": "44d16b7b-8cbe-403f-b61f-5d8741862ab2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 200 for successful transaction refund where both sender and receiver is FULL_ACTIVE",
              "fullTitle": "Refund Transaction API Balance Check (POST) should return 200 for successful transaction refund where both sender and receiver is FULL_ACTIVE",
              "timedOut": false,
              "duration": 36,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const coA1 = await prismaAccounting.chartOfAccount.findUnique({\n  where: { code: \"001\" },\n});\nconst coA2 = await prismaAccounting.chartOfAccount.findUnique({\n  where: { code: \"002\" },\n});\nawait prismaAccounting.userAccount.createMany({\n  data: [\n    {\n      accountName: \"Jarin\",\n      identifier: \"01317577237\",\n      status: \"FULL_ACTIVE\",\n      dailyLimitAmount: 50000,\n      dailyLimitCount: 200000,\n      monthlyLimitAmount: 5000000,\n      monthlyLimitCount: 600000000,\n      maxWalletAmount: 1000000000,\n      minWalletAmount: 500,\n      chartOfAccount_id: coA1.id,\n    },\n    {\n      accountName: \"Sultana\",\n      identifier: \"01711106485\",\n      dailyLimitAmount: 50000,\n      dailyLimitCount: 200000,\n      monthlyLimitAmount: 5000000,\n      monthlyLimitCount: 600000000,\n      maxWalletAmount: 1000000000,\n      minWalletAmount: 500,\n      status: \"FULL_ACTIVE\",\n      chartOfAccount_id: coA2.id,\n    },\n  ],\n});\nconst adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\naccount1 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\naccount2 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01711106485\" },\n});\ncreatedType = await prismaAccounting.transactionType.findMany({\n  where: { createdByAdminIdentifier: \"11\" },\n});\nconst addMoneyTransaction = await prismaAccounting.transaction.create({\n  data: {\n    fromAccountId: account1.id,\n    toAccountId: account2.id,\n    transactionTypeId: createdType[0].id,\n    amount: 1000,\n    referenceNo: \"qqqqqqqqqq\",\n    note: \"send money\",\n  },\n});\nawait prismaAccounting.ledger.createMany({\n  data: [\n    {\n      accountId: account1.id,\n      transactionId: addMoneyTransaction.id,\n      amount: 1000,\n      description: \"send money transaction\",\n      type: \"DEBIT\",\n    },\n    {\n      accountId: account2.id,\n      transactionId: addMoneyTransaction.id,\n      amount: 1000,\n      description: \"send money transaction\",\n      type: \"CREDIT\",\n    },\n  ],\n});\nconst transaction = await prismaAccounting.transaction.findMany({\n  where: { referenceNo: \"qqqqqqqqqq\" },\n});\nconst referenceNo = transaction[0]?.referenceNo;\nconst transactionId = transaction[0]?.id;\nconst legderBeforeRefund = await prismaAccounting.ledger.findMany({\n  where: {\n    transactionId: transactionId,\n  },\n});\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.refundTransaction}`)\n  .withJson({\n    code: referenceNo,\n  })\n  .expectStatus(200);\nconst refundedTransaction = await prismaAccounting.transaction.findMany({\n  where: { mainTransactionId: transactionId },\n});\nexpect(refundedTransaction).to.exist;\nexpect(refundedTransaction[0].isRefunded).to.be.true;\nconst legderAfterRefund = await prismaAccounting.ledger.findMany({\n  where: {\n    transactionId: refundedTransaction[0].id,\n  },\n});\nexpect(legderBeforeRefund).to.exist;\nexpect(legderBeforeRefund).to.have.lengthOf(2);\nexpect(legderBeforeRefund[0].amount).to.equal(1000);\nexpect(legderBeforeRefund[0].type).to.equal('DEBIT');\nexpect(legderBeforeRefund[0].accountId).to.equal(account1.id);\nexpect(legderBeforeRefund[1].amount).to.equal(1000);\nexpect(legderBeforeRefund[1].type).to.equal('CREDIT');\nexpect(legderBeforeRefund[1].accountId).to.equal(account2.id);\nexpect(legderAfterRefund).to.exist;\nexpect(legderAfterRefund).to.have.lengthOf(2);\nexpect(legderAfterRefund[0].amount).to.equal(1000);\nexpect(legderAfterRefund[0].type).to.equal('DEBIT');\nexpect(legderAfterRefund[0].accountId).to.equal(account2.id);\nexpect(legderAfterRefund[1].amount).to.equal(1000);\nexpect(legderAfterRefund[1].type).to.equal('CREDIT');\nexpect(legderAfterRefund[1].accountId).to.equal(account1.id);",
              "err": {
                "message": "AssertionError: HTTP status 201 !== 200\n\n201 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 201 !== 200\n\n201 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 201\n+ 200\n"
              },
              "uuid": "c41a1bc5-6c91-43d0-bf30-94c97249a9b6",
              "parentUUID": "44d16b7b-8cbe-403f-b61f-5d8741862ab2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 for successful transaction refund where sender is FULL_ACTIVE and receiver is LIMITED_ACTIVE",
              "fullTitle": "Refund Transaction API Balance Check (POST) should return 200 for successful transaction refund where sender is FULL_ACTIVE and receiver is LIMITED_ACTIVE",
              "timedOut": false,
              "duration": 65,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const coA1 = await prismaAccounting.chartOfAccount.findUnique({\n  where: { code: \"001\" },\n});\nconst coA2 = await prismaAccounting.chartOfAccount.findUnique({\n  where: { code: \"002\" },\n});\nawait prismaAccounting.userAccount.createMany({\n  data: [\n    {\n      accountName: \"Jarin\",\n      identifier: \"01317577237\",\n      status: \"FULL_ACTIVE\",\n      dailyLimitAmount: 50000,\n      dailyLimitCount: 200000,\n      monthlyLimitAmount: 5000000,\n      monthlyLimitCount: 600000000,\n      maxWalletAmount: 1000000000,\n      minWalletAmount: 500,\n      chartOfAccount_id: coA1.id,\n    },\n    {\n      accountName: \"Sultana\",\n      identifier: \"01711106485\",\n      dailyLimitAmount: 50000,\n      dailyLimitCount: 200000,\n      monthlyLimitAmount: 5000000,\n      monthlyLimitCount: 600000000,\n      maxWalletAmount: 1000000000,\n      minWalletAmount: 500,\n      status: \"LIMITED_ACTIVE\",\n      chartOfAccount_id: coA2.id,\n    },\n  ],\n});\nconst adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\naccount1 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\naccount2 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01711106485\" },\n});\ncreatedType = await prismaAccounting.transactionType.findMany({\n  where: { createdByAdminIdentifier: \"11\" },\n});\nconst addMoneyTransaction = await prismaAccounting.transaction.create({\n  data: {\n    fromAccountId: account1.id,\n    toAccountId: account2.id,\n    transactionTypeId: createdType[0].id,\n    amount: 1000,\n    referenceNo: \"qqqqqqqqqq\",\n    note: \"send money\",\n  },\n});\nawait prismaAccounting.ledger.createMany({\n  data: [\n    {\n      accountId: account1.id,\n      transactionId: addMoneyTransaction.id,\n      amount: 1000,\n      description: \"send money transaction\",\n      type: \"DEBIT\",\n    },\n    {\n      accountId: account2.id,\n      transactionId: addMoneyTransaction.id,\n      amount: 1000,\n      description: \"send money transaction\",\n      type: \"CREDIT\",\n    },\n  ],\n});\nconst transaction = await prismaAccounting.transaction.findMany({\n  where: { referenceNo: \"qqqqqqqqqq\" },\n});\nconst referenceNo = transaction[0]?.referenceNo;\nconst transactionId = transaction[0]?.id;\nconst legderBeforeRefund = await prismaAccounting.ledger.findMany({\n  where: {\n    transactionId: transactionId,\n  },\n});\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.refundTransaction}`)\n  .withJson({\n    code: referenceNo,\n  })\n  .expectStatus(200);\nconst refundedTransaction = await prismaAccounting.transaction.findMany({\n  where: { mainTransactionId: transactionId },\n});\nconst legderAfterRefund = await prismaAccounting.ledger.findMany({\n  where: {\n    transactionId: refundedTransaction[0].id,\n  },\n});\nexpect(legderBeforeRefund).to.exist;\nexpect(legderBeforeRefund).to.have.lengthOf(2);\nexpect(legderBeforeRefund[0].amount).to.equal(1000);\nexpect(legderBeforeRefund[0].type).to.equal('DEBIT');\nexpect(legderBeforeRefund[0].accountId).to.equal(account1.id);\nexpect(legderBeforeRefund[1].amount).to.equal(1000);\nexpect(legderBeforeRefund[1].type).to.equal('CREDIT');\nexpect(legderBeforeRefund[1].accountId).to.equal(account2.id);\nexpect(legderAfterRefund).to.exist;\nexpect(legderAfterRefund).to.have.lengthOf(2);\nexpect(legderAfterRefund[0].amount).to.equal(1000);\nexpect(legderAfterRefund[0].type).to.equal('DEBIT');\nexpect(legderAfterRefund[0].accountId).to.equal(account2.id);\nexpect(legderAfterRefund[1].amount).to.equal(1000);\nexpect(legderAfterRefund[1].type).to.equal('CREDIT');\nexpect(legderAfterRefund[1].accountId).to.equal(account1.id);",
              "err": {},
              "uuid": "6b9b6dc7-6ec1-42e2-89f4-6a63e5ae6bab",
              "parentUUID": "44d16b7b-8cbe-403f-b61f-5d8741862ab2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not refund a transaction that was refunded before",
              "fullTitle": "Refund Transaction API Balance Check (POST) should not refund a transaction that was refunded before",
              "timedOut": false,
              "duration": 32,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const coA1 = await prismaAccounting.chartOfAccount.findUnique({\n  where: { code: \"001\" },\n});\nconst coA2 = await prismaAccounting.chartOfAccount.findUnique({\n  where: { code: \"002\" },\n});\nawait prismaAccounting.userAccount.createMany({\n  data: [\n    {\n      accountName: \"Jarin\",\n      identifier: \"01317577237\",\n      status: \"FULL_ACTIVE\",\n      dailyLimitAmount: 50000,\n      dailyLimitCount: 200000,\n      monthlyLimitAmount: 5000000,\n      monthlyLimitCount: 600000000,\n      maxWalletAmount: 1000000000,\n      minWalletAmount: 500,\n      chartOfAccount_id: coA1.id,\n    },\n    {\n      accountName: \"Sultana\",\n      identifier: \"01711106485\",\n      status: \"FULL_ACTIVE\",\n      dailyLimitAmount: 50000,\n      dailyLimitCount: 200000,\n      monthlyLimitAmount: 5000000,\n      monthlyLimitCount: 600000000,\n      maxWalletAmount: 1000000000,\n      minWalletAmount: 500,\n      chartOfAccount_id: coA2.id,\n    },\n  ],\n});\nconst adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\nconst token = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst account1 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\nconst account2 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01711106485\" },\n});\nconst createdType = await prismaAccounting.transactionType.findMany({\n  where: { createdByAdminIdentifier: \"11\" },\n});\nconst firstTransaction = await prismaAccounting.transaction.create({\n  data: {\n    fromAccountId: account1.id,\n    toAccountId: account2.id,\n    transactionTypeId: createdType[0].id,\n    amount: 1000,\n    referenceNo: \"qqqqqqqqqq\",\n    note: \"send money\",\n    status: \"SUCCESSFUL\",\n  },\n});\nawait prismaAccounting.ledger.createMany({\n  data: [\n    {\n      accountId: account1.id,\n      transactionId: firstTransaction.id,\n      amount: 1000,\n      description: \"send money transaction\",\n      type: \"DEBIT\",\n    },\n    {\n      accountId: account2.id,\n      transactionId: firstTransaction.id,\n      amount: 1000,\n      description: \"send money transaction\",\n      type: \"CREDIT\",\n    },\n  ],\n});\nawait prismaAccounting.transaction.create({\n  data: {\n    fromAccountId: account2.id,\n    toAccountId: account1.id,\n    transactionTypeId: createdType[0].id,\n    amount: 1000,\n    referenceNo: \"qqqqqqqqqq\",\n    note: \"Refund transaction\",\n    description: \"Refund of transaction: qqqqqqqqqq\",\n    log: \"Refund of transaction: qqqqqqqqqq is Requested By: admin@ppay.com\",\n    mainTransactionId: firstTransaction.id,\n    isRefunded: true,\n  },\n});\nawait prismaAccounting.ledger.createMany({\n  data: [\n    {\n      accountId: account1.id,\n      transactionId: firstTransaction.id,\n      amount: 1000,\n      description: \"send money transaction\",\n      type: \"CREDIT\",\n    },\n    {\n      accountId: account2.id,\n      transactionId: firstTransaction.id,\n      amount: 1000,\n      description: \"send money transaction\",\n      type: \"DEBIT\",\n    },\n  ],\n});\nconst transaction = await prismaAccounting.transaction.findMany({\n  where: { referenceNo: \"qqqqqqqqqq\" },\n});\nconst referenceNo = transaction[0]?.referenceNo;\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.refundTransaction}`)\n  .withJson({\n    code: referenceNo,\n  })\n  .expectStatus(406);",
              "err": {
                "message": "AssertionError: HTTP status 201 !== 406\n\n201 !== 406\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 201 !== 406\n\n201 !== 406\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 201\n+ 406\n"
              },
              "uuid": "709f1298-d975-4478-965a-e1d20713d1eb",
              "parentUUID": "44d16b7b-8cbe-403f-b61f-5d8741862ab2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check that refund will be done only by the admin user",
              "fullTitle": "Refund Transaction API Balance Check (POST) should check that refund will be done only by the admin user",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const coA1 = await prismaAccounting.chartOfAccount.findUnique({\n  where: { code: \"001\" },\n});\nconst coA2 = await prismaAccounting.chartOfAccount.findUnique({\n  where: { code: \"002\" },\n});\nawait prismaAccounting.userAccount.createMany({\n  data: [\n    {\n      accountName: \"Jarin\",\n      identifier: \"01317577237\",\n      status: \"FULL_ACTIVE\",\n      dailyLimitAmount: 50000,\n      dailyLimitCount: 200000,\n      monthlyLimitAmount: 5000000,\n      monthlyLimitCount: 600000000,\n      maxWalletAmount: 1000000000,\n      minWalletAmount: 500,\n      chartOfAccount_id: coA1.id,\n    },\n    {\n      accountName: \"Sultana\",\n      identifier: \"01711106485\",\n      status: \"FULL_ACTIVE\",\n      dailyLimitAmount: 50000,\n      dailyLimitCount: 200000,\n      monthlyLimitAmount: 5000000,\n      monthlyLimitCount: 600000000,\n      maxWalletAmount: 1000000000,\n      minWalletAmount: 500,\n      chartOfAccount_id: coA2.id,\n    },\n  ],\n});\nconst appUser = {\n  phoneNumber: \"01711106485\",\n  pin: \"123458\",\n};\ntoken = generateUserToken(1, appUser.phoneNumber, \"USER\");\nconst account1 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\nconst account2 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01711106485\" },\n});\nconst createdType = await prismaAccounting.transactionType.findMany({\n  where: { createdByAdminIdentifier: \"11\" },\n});\nconst firstTransaction = await prismaAccounting.transaction.create({\n  data: {\n    fromAccountId: account1.id,\n    toAccountId: account2.id,\n    transactionTypeId: createdType[0].id,\n    amount: 1000,\n    referenceNo: \"qqqqqqqqqq\",\n    note: \"send money\",\n    status: \"SUCCESSFUL\",\n  },\n});\nawait prismaAccounting.ledger.createMany({\n  data: [\n    {\n      accountId: account1.id,\n      transactionId: firstTransaction.id,\n      amount: 1000,\n      description: \"send money transaction\",\n      type: \"DEBIT\",\n    },\n    {\n      accountId: account2.id,\n      transactionId: firstTransaction.id,\n      amount: 1000,\n      description: \"send money transaction\",\n      type: \"CREDIT\",\n    },\n  ],\n});\nconst transaction = await prismaAccounting.transaction.findMany({\n  where: { referenceNo: \"qqqqqqqqqq\" },\n});\nconst referenceNo = transaction[0]?.referenceNo;\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.refundTransaction}`)\n  .withJson({\n    code: referenceNo,\n  })\n  .expectStatus(401);\nconst transactionId = transaction[0]?.id;\nconst refundedTransaction = await prismaAccounting.transaction.findMany({\n  where: { mainTransactionId: transactionId },\n});\nexpect(refundedTransaction).to.be.empty;",
              "err": {},
              "uuid": "6241a0b8-21c9-49cc-b881-d8e709f7b3c0",
              "parentUUID": "44d16b7b-8cbe-403f-b61f-5d8741862ab2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6b9b6dc7-6ec1-42e2-89f4-6a63e5ae6bab",
            "6241a0b8-21c9-49cc-b881-d8e709f7b3c0"
          ],
          "failures": [
            "c41a1bc5-6c91-43d0-bf30-94c97249a9b6",
            "709f1298-d975-4478-965a-e1d20713d1eb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 160,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bb95e298-0dcf-4559-adb9-1a42b492439a",
          "title": "Active or Inactive Transaction type API Tests (POST)",
          "fullFile": "/opt/app/src/accounting/transactionType/changeTrxnTypeStatus.test.js",
          "file": "/src/accounting/transactionType/changeTrxnTypeStatus.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Active or Inactive Transaction type API Tests (POST)\"",
              "fullTitle": "Active or Inactive Transaction type API Tests (POST) \"before all\" hook in \"Active or Inactive Transaction type API Tests (POST)\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$connect();",
              "err": {},
              "uuid": "090e0e20-d91e-4772-bb95-21c9110caeb4",
              "parentUUID": "bb95e298-0dcf-4559-adb9-1a42b492439a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Active or Inactive Transaction type API Tests (POST)\"",
              "fullTitle": "Active or Inactive Transaction type API Tests (POST) \"before each\" hook in \"Active or Inactive Transaction type API Tests (POST)\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\nawait prismaAccounting.transaction.deleteMany({});\nawait prismaAccounting. transactionLegLog.deleteMany({});\nawait prismaAccounting. transactionLeg.deleteMany({});\nawait prismaAccounting.transactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.transactionType.deleteMany({});\nawait prismaAccounting.userAccount.deleteMany({});\nawait prismaAccounting.chartOfAccountLog.deleteMany({});\nawait prismaAccounting.chartOfAccount.deleteMany({});\nawait prismaAccounting.chartOfAccount.createMany({\n  data: [\n    {\n      name: \"Account 1\",\n      description: \"Description for Account 1\",\n      transactionType: \"SYSTEM\",\n      headType: \"ASSET\",\n      code: \"001\",\n      onlyParent: false,\n      adminId: 1,\n    },\n    {\n      name: \"Account 2\",\n      description: \"Description for Account 2\",\n      transactionType: \"SYSTEM\",\n      headType: \"ASSET\",\n      code: \"002\",\n      onlyParent: true,\n      adminId: 1,\n    },\n  ],\n});\nconst account1 = await prismaAccounting.chartOfAccount.findUnique({\n  where: { code: \"001\" },\n});\nconst account2 = await prismaAccounting.chartOfAccount.findUnique({\n  where: { code: \"002\" },\n});\nconst createdType = await prismaAccounting.transactionType.create({\n  data: {\n    transactionCode: \"223\",\n    name: \"TypeA\",\n    description: \"qqqqqqqqqqqqqqqqq\",\n    minAmount: 66,\n    maxAmount: 666,\n    createdByAdminId: 1,\n    createdByAdminIdentifier: \"11\",\n    isActive: true,\n    fromChartOfAccount: {\n      connect: { id: account1.id },\n    },\n    toChartOfAccount: {\n      connect: { id: account2.id },\n    },\n  },\n});\ntypeId = createdType.id;",
              "err": {},
              "uuid": "f4df7ed4-4d63-488e-b9ef-a9d383e5988f",
              "parentUUID": "bb95e298-0dcf-4559-adb9-1a42b492439a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Active or Inactive Transaction type API Tests (POST)\"",
              "fullTitle": "Active or Inactive Transaction type API Tests (POST) \"after all\" hook in \"Active or Inactive Transaction type API Tests (POST)\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "dfead698-6b1a-4726-aea9-2f5518778e98",
              "parentUUID": "bb95e298-0dcf-4559-adb9-1a42b492439a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should inactive a type and log the change",
              "fullTitle": "Active or Inactive Transaction type API Tests (POST) should inactive a type and log the change",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\nconst token = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst initialType = await prismaAccounting.transactionType.findUnique({\n  where: { id: typeId },\n});\nexpect(initialType).to.not.be.null;\nexpect(initialType.isActive).to.be.true;\nconst response = await pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(\n    `${ApiUrls.apiBaseUrl}${ApiUrls.changeStatusOfType}${typeId}/toggle-status`\n  )\n  .withJson({ isActive: false })\n  .expectStatus(200);\nconst updatedType = await prismaAccounting.transactionType.findUnique({\n  where: { id: typeId },\n});\nexpect(updatedType).to.not.be.null;\nexpect(updatedType.isActive).to.be.false;\nconst logEntry = await prismaAccounting.transactionTypeChangeLog.findFirst({\n  where: {\n    transactionType_id: typeId,\n    changeType: \"CHANGE_STATUS\",\n  },\n});\nexpect(logEntry).to.not.be.null;",
              "err": {},
              "uuid": "b8101c70-d8d4-4da2-bbad-76324b5e4327",
              "parentUUID": "bb95e298-0dcf-4559-adb9-1a42b492439a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b8101c70-d8d4-4da2-bbad-76324b5e4327"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 46,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "da116cf5-2096-40c1-b1d6-58971d075c44",
          "title": "Create Trxn type API Tests (POST :/v1/transaction-type)",
          "fullFile": "/opt/app/src/accounting/transactionType/createTrxnType.test.js",
          "file": "/src/accounting/transactionType/createTrxnType.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Create Trxn type API Tests (POST :/v1/transaction-type)\"",
              "fullTitle": "Create Trxn type API Tests (POST :/v1/transaction-type) \"before all\" hook in \"Create Trxn type API Tests (POST :/v1/transaction-type)\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Promise.all([prismaAccounting.$connect()]);\ntoken = generateToken(\n  ADMIN_ID,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);",
              "err": {},
              "uuid": "439f84a2-2104-40d3-adc0-b6bb62b49396",
              "parentUUID": "da116cf5-2096-40c1-b1d6-58971d075c44",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Create Trxn type API Tests (POST :/v1/transaction-type)\"",
              "fullTitle": "Create Trxn type API Tests (POST :/v1/transaction-type) \"before each\" hook in \"Create Trxn type API Tests (POST :/v1/transaction-type)\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$transaction([\n  prismaAccounting.ledger.deleteMany(),\n  prismaAccounting.transaction.deleteMany(),\n  prismaAccounting. transactionLegLog.deleteMany(),\n  prismaAccounting. transactionLeg.deleteMany(),\n  prismaAccounting.transactionTypeChangeLog.deleteMany(),\n  prismaAccounting.transactionType.deleteMany(),\n  prismaAccounting.userAccount.deleteMany(),\n  prismaAccounting.chartOfAccountLog.deleteMany(),\n  prismaAccounting.chartOfAccount.deleteMany(),\n]);\nconst charOfAccounts = [\n  sampleCharOfAccount,\n  {\n    ...sampleCharOfAccount,\n    name: \"Account B\",\n    code: \"002\",\n    onlyParent: true,\n    adminId: ADMIN_ID,\n    description: \"Description for Account 2\",\n  },\n];\nawait prismaAccounting.chartOfAccount.createMany({\n  data: charOfAccounts,\n});\n[account1, account2] = await prismaAccounting.chartOfAccount.findMany({\n  orderBy: { code: \"asc\" },\n});\nsampleType = {\n  name: \"Send Money\",\n  description: \"This is a description for the Transaction Type.\",\n  fromCoa: account1.id,\n  toCoa: account2.id,\n  transactionCode: \"send-money-1001\",\n  dailyLimit: { count: 20, amount: 30 },\n  weeklyLimit: { count: 20, amount: 30 },\n  monthlyLimit: { count: 20, amount: 30 },\n};",
              "err": {},
              "uuid": "b9ea061a-b8a1-4a96-bf65-5ddb9fceafb5",
              "parentUUID": "da116cf5-2096-40c1-b1d6-58971d075c44",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Create Trxn type API Tests (POST :/v1/transaction-type)\"",
              "fullTitle": "Create Trxn type API Tests (POST :/v1/transaction-type) \"after all\" hook in \"Create Trxn type API Tests (POST :/v1/transaction-type)\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Promise.all([prismaAccounting.$disconnect()]);",
              "err": {},
              "uuid": "5e8b6e72-a555-4d99-b39a-b2a6f59de2e1",
              "parentUUID": "da116cf5-2096-40c1-b1d6-58971d075c44",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create a new type",
              "fullTitle": "Create Trxn type API Tests (POST :/v1/transaction-type) should create a new type",
              "timedOut": false,
              "duration": 22,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await makeCreateTypeRequest(sampleType).expectStatus(201);\nconst createdType = await prismaAccounting.transactionType.findUnique({\n  where: { transactionCode: sampleType.transactionCode },\n});\nexpect(createdType).to.not.be.null;\nexpect(createdType.name).to.equal(sampleType.name);\nexpect(createdType.description).to.equal(sampleType.description);\nexpect(createdType.fromChartOfAccountId).to.equal(account1.id);\nexpect(createdType.toChartOfAccountId).to.equal(account2.id);\nexpect(createdType.fromChartOfAccountId).to.equal(sampleType.fromCoa);\nexpect(createdType.toChartOfAccountId).to.equal(sampleType.toCoa);\nexpect(Number(createdType.dailyLimitCount)).to.equal(sampleType.dailyLimit.count);\nexpect(Number(createdType.dailyLimitAmount)).to.equal(sampleType.dailyLimit.amount);\nexpect(Number(createdType.monthlyLimitCount)).to.equal(sampleType.monthlyLimit.count);\nexpect(Number(createdType.monthlyLimitAmount)).to.equal(sampleType.monthlyLimit.amount);\nexpect(Number(createdType.weeklyLimitCount)).to.equal(sampleType.weeklyLimit.count);\nexpect(Number(createdType.weeklyLimitAmount)).to.equal(sampleType.weeklyLimit.amount);\nexpect(createdType.isActive).to.be.true;\nexpect(createdType.createdByAdminId).to.equal(ADMIN_ID);\nexpect(createdType.createdByAdminIdentifier).to.equal(adminUser.email);",
              "err": {
                "message": "AssertionError: expected null not to be null",
                "estack": "AssertionError: expected null not to be null\n    at Context.<anonymous> (file:///opt/app/src/accounting/transactionType/createTrxnType.test.js:129:34)",
                "diff": null
              },
              "uuid": "d63437e8-cc71-4030-9a7a-3e90277ae15b",
              "parentUUID": "da116cf5-2096-40c1-b1d6-58971d075c44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 for invalid input of type",
              "fullTitle": "Create Trxn type API Tests (POST :/v1/transaction-type) should return 400 for invalid input of type",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidType = {\n  ...sampleType,\n  fromCoa: null,\n};\nawait makeCreateTypeRequest(invalidType).expectStatus(400);\nconst dbTypes = await prismaAccounting.transactionType.findMany({\n  where: {\n    name: invalidType.name,\n    description: invalidType.description,\n    fromChartOfAccountId: invalidType.fromCoa,\n    toChartOfAccountId: invalidType.toCoa,\n    transactionCode: invalidType.transactionCode,\n  },\n});\nexpect(dbTypes).to.have.lengthOf(0);",
              "err": {},
              "uuid": "db92187b-9c3d-4827-acc4-d38fd7342043",
              "parentUUID": "da116cf5-2096-40c1-b1d6-58971d075c44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 419 if the type already exists and cannot be created again",
              "fullTitle": "Create Trxn type API Tests (POST :/v1/transaction-type) should return 419 if the type already exists and cannot be created again",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.transactionType.create({\n  data: getPrismaData(sampleType),\n});\nawait makeCreateTypeRequest(sampleType).expectStatus(419);\nconst createdType = await prismaAccounting.transactionType.findMany({\n  where: { transactionCode: sampleType.transactionCode },\n});\nexpect(createdType).to.have.lengthOf(1);",
              "err": {},
              "uuid": "3c20bef3-307a-4786-b140-28724196c9d2",
              "parentUUID": "da116cf5-2096-40c1-b1d6-58971d075c44",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check the logs for creating a type",
              "fullTitle": "Create Trxn type API Tests (POST :/v1/transaction-type) should check the logs for creating a type",
              "timedOut": false,
              "duration": 16,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await makeCreateTypeRequest(sampleType).expectStatus(201);\nconst createdType = await prismaAccounting.transactionType.findUnique({\n  where: { transactionCode: sampleType.transactionCode },\n});\nconst logEntry = await prismaAccounting.transactionTypeChangeLog.findMany({\n  where: { transactionType_id: createdType.id },\n});\nexpect(logEntry[0]).to.have.property(\"changeType\").to.equal(\"CREATE\");\nexpect(logEntry[0]).to.have.property(\"oldValue\").to.be.null;\nexpect(logEntry[0]).to.have.property(\"newValue\").not.to.be.null;",
              "err": {
                "message": "TypeError: Cannot read properties of null (reading 'id')",
                "estack": "TypeError: Cannot read properties of null (reading 'id')\n    at Context.<anonymous> (file:///opt/app/src/accounting/transactionType/createTrxnType.test.js:192:48)",
                "diff": null
              },
              "uuid": "bf6cb3ef-8167-4f5d-acc5-b2972e0d06b2",
              "parentUUID": "da116cf5-2096-40c1-b1d6-58971d075c44",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "db92187b-9c3d-4827-acc4-d38fd7342043",
            "3c20bef3-307a-4786-b140-28724196c9d2"
          ],
          "failures": [
            "d63437e8-cc71-4030-9a7a-3e90277ae15b",
            "bf6cb3ef-8167-4f5d-acc5-b2972e0d06b2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 83,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ce71f282-b9e6-4816-91e9-35641a33099c",
          "title": "GET Trxn Type API Tests (:GET /v1/transaction-type)",
          "fullFile": "/opt/app/src/accounting/transactionType/getTrxnType.test.js",
          "file": "/src/accounting/transactionType/getTrxnType.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET Trxn Type API Tests (:GET /v1/transaction-type)\"",
              "fullTitle": "GET Trxn Type API Tests (:GET /v1/transaction-type) \"before all\" hook in \"GET Trxn Type API Tests (:GET /v1/transaction-type)\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Promise.all([prismaAccounting.$connect()]);\ntoken = generateToken(\n  ADMIN_ID,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);",
              "err": {},
              "uuid": "fbaee468-59b0-4b81-bb81-5d092f4feb84",
              "parentUUID": "ce71f282-b9e6-4816-91e9-35641a33099c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"GET Trxn Type API Tests (:GET /v1/transaction-type)\"",
              "fullTitle": "GET Trxn Type API Tests (:GET /v1/transaction-type) \"before each\" hook in \"GET Trxn Type API Tests (:GET /v1/transaction-type)\"",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$transaction([\n  prismaAccounting.ledger.deleteMany(),\n  prismaAccounting.transaction.deleteMany(),\n  prismaAccounting. transactionLegLog.deleteMany(),\n  prismaAccounting. transactionLeg.deleteMany(),\n  prismaAccounting.transactionTypeChangeLog.deleteMany(),\n  prismaAccounting.transactionType.deleteMany(),\n  prismaAccounting.userAccount.deleteMany(),\n  prismaAccounting.chartOfAccountLog.deleteMany(),\n  prismaAccounting.chartOfAccount.deleteMany(),\n]);\nconst charOfAccounts = [\n  sampleCharOfAccount,\n  {\n    ...sampleCharOfAccount,\n    name: \"Account B\",\n    code: \"002\",\n    onlyParent: true,\n    adminId: ADMIN_ID,\n    description: \"Description for Account 2\",\n  },\n];\nawait prismaAccounting.chartOfAccount.createMany({\n  data: charOfAccounts,\n});\n[account1, account2] = await prismaAccounting.chartOfAccount.findMany({\n  orderBy: { code: \"asc\" },\n});\nsampleType = {\n  name: \"Send Money\",\n  description: \"This is a description for the Transaction Type.\",\n  fromChartOfAccountId: account1.id,\n  toChartOfAccountId: account2.id,\n  transactionCode: \"send-money-1001\",\n  createdByAdminId: ADMIN_ID,\n  createdByAdminIdentifier: ADMIN_IDENTIFIER,\n  isActive: true,\n  minAmount: 100,\n  maxAmount: 1000,\n  dailyLimitCount: 20,\n  dailyLimitAmount: 30,\n  monthlyLimitAmount: 30,\n  monthlyLimitCount: 20,\n  weeklyLimitAmount: 100,\n  weeklyLimitCount: 5000,\n};\nconst types = [\n  sampleType,\n  {\n    ...sampleType,\n    name: \"Top Up\",\n    description: \"Top Up description\",\n    transactionCode: \"top-up-2001\",\n  },\n];\nawait prismaAccounting.transactionType.createMany({\n  data: types,\n});",
              "err": {},
              "uuid": "3377a0e2-b02a-4109-9e01-f6ce38474500",
              "parentUUID": "ce71f282-b9e6-4816-91e9-35641a33099c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"GET Trxn Type API Tests (:GET /v1/transaction-type)\"",
              "fullTitle": "GET Trxn Type API Tests (:GET /v1/transaction-type) \"after all\" hook in \"GET Trxn Type API Tests (:GET /v1/transaction-type)\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await Promise.all([prismaAccounting.$disconnect()]);",
              "err": {},
              "uuid": "2eb7b647-2310-4cd7-96ce-90bf23a21656",
              "parentUUID": "ce71f282-b9e6-4816-91e9-35641a33099c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return all types",
              "fullTitle": "GET Trxn Type API Tests (:GET /v1/transaction-type) should return all types",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await makeGetTypeRequest().expectStatus(200);\nconst typeDB = await prismaAccounting.transactionType.findUnique({\n  where: {\n    transactionCode: sampleType.transactionCode,\n  },\n});\nexpect(response.body.transactiontypes).to.be.an(\"array\");\nexpect(response.body.transactiontypes).to.have.lengthOf.at.least(1);\n\nconst firstType = response.body.transactiontypes[0];\nexpect(firstType.name).to.equal(\"Send Money\");\nexpect(firstType.description).to.equal(\"This is a description for the Transaction Type.\");\nexpect(firstType.transactioncode).to.equal(\"send-money-1001\");\nexpect(firstType.isactive).to.equal(typeDB.isActive);\nexpect(Number(typeDB.dailyLimitCount)).to.equal(firstType.dailylimit.count);\nexpect(Number(typeDB.dailyLimitAmount)).to.equal(firstType.dailylimit.amount);\nexpect(Number(typeDB.monthlyLimitCount)).to.equal(firstType.monthlylimit.count);\nexpect(Number(typeDB.monthlyLimitAmount)).to.equal(firstType.monthlylimit.amount);\nexpect(Number(typeDB.weeklyLimitCount)).to.equal(firstType.weeklylimit.count);\nexpect(Number(typeDB.weeklyLimitAmount)).to.equal(firstType.weeklylimit.amount);\nconst secondType = response.body.transactiontypes[1];\nexpect(secondType.name).to.equal(\"Top Up\");\nexpect(secondType.description).to.equal(\"Top Up description\");\nexpect(secondType.transactioncode).to.equal(\"top-up-2001\");\nexpect(secondType.isactive).to.equal(typeDB.isActive);\nexpect(Number(typeDB.dailyLimitCount)).to.equal(secondType.dailylimit.count);\nexpect(Number(typeDB.dailyLimitAmount)).to.equal(secondType.dailylimit.amount);\nexpect(Number(typeDB.monthlyLimitCount)).to.equal(secondType.monthlylimit.count);\nexpect(Number(typeDB.monthlyLimitAmount)).to.equal(secondType.monthlylimit.amount);\nexpect(Number(typeDB.weeklyLimitCount)).to.equal(secondType.weeklylimit.count);\nexpect(Number(typeDB.weeklyLimitAmount)).to.equal(secondType.weeklylimit.amount);",
              "err": {},
              "uuid": "b5ff340d-5ca0-43cd-aec9-1b900ba61756",
              "parentUUID": "ce71f282-b9e6-4816-91e9-35641a33099c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b5ff340d-5ca0-43cd-aec9-1b900ba61756"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 37,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0a0083a5-7c97-45a3-91a5-762bb783b278",
          "title": "GET Trxn Type API Tests (:GET /v1/transaction-type)",
          "fullFile": "/opt/app/src/accounting/transactionType/getTrxnTypeDetails.test.js",
          "file": "/src/accounting/transactionType/getTrxnTypeDetails.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"GET Trxn Type API Tests (:GET /v1/transaction-type)\"",
              "fullTitle": "GET Trxn Type API Tests (:GET /v1/transaction-type) \"before all\" hook in \"GET Trxn Type API Tests (:GET /v1/transaction-type)\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$connect();",
              "err": {},
              "uuid": "ab41051d-fc57-450c-93a2-e6520f6f3e94",
              "parentUUID": "0a0083a5-7c97-45a3-91a5-762bb783b278",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"GET Trxn Type API Tests (:GET /v1/transaction-type)\"",
              "fullTitle": "GET Trxn Type API Tests (:GET /v1/transaction-type) \"before each\" hook in \"GET Trxn Type API Tests (:GET /v1/transaction-type)\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.transactionLegLog.deleteMany({});\nawait prismaAccounting.transactionLeg.deleteMany({});\nawait prismaAccounting.transactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.transactionType.deleteMany({});\nawait prismaAccounting.chartOfAccountLog.deleteMany({});\nawait prismaAccounting.chartOfAccount.deleteMany({});\nawait prismaAccounting.chartOfAccount.createMany({\n    data: [\n        {\n            name: 'Account 1',\n            description: 'Description for Account 1',\n            transactionType: 'SYSTEM',\n            headType: 'ASSET',\n            code: '001',\n            onlyParent: false,\n            adminId: 1\n        },\n        {\n            name: 'Account 2',\n            description: 'Description for Account 2',\n            transactionType: 'SYSTEM',\n            headType: 'ASSET',\n            code: '002',\n            onlyParent: true,\n            adminId: 1\n        }\n    ]\n});\nconst account1 = await prismaAccounting.chartOfAccount.findUnique({\n    where: {\n        code: '001'\n    }\n});\nconst account2 = await prismaAccounting.chartOfAccount.findUnique({\n    where: {\n        code: '002'\n    }\n});\n\nconst createdType = await prismaAccounting.transactionType.create({\n    data: {\n        transactionCode: '223',\n        name: 'TypeA',\n        description: 'qqqqqqqqqqqqqqqqq',\n        minAmount: 66,\n        maxAmount: 666,\n        createdByAdminId: 1,\n        createdByAdminIdentifier: '11',\n        isActive: true,\n        fromChartOfAccountId: account1.id,\n        toChartOfAccountId: account2.id,\n        minAmount: 100,\n        maxAmount: 1000,\n        dailyLimitCount: 20,\n        dailyLimitAmount: 30,\n        monthlyLimitAmount: 30,\n        monthlyLimitCount: 20,\n        weeklyLimitAmount: 100,\n        weeklyLimitCount: 5000,\n    },\n});\ntypeId = createdType.id;",
              "err": {},
              "uuid": "6b9047be-5213-495c-b3e2-400a78c3a53c",
              "parentUUID": "0a0083a5-7c97-45a3-91a5-762bb783b278",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"GET Trxn Type API Tests (:GET /v1/transaction-type)\"",
              "fullTitle": "GET Trxn Type API Tests (:GET /v1/transaction-type) \"after all\" hook in \"GET Trxn Type API Tests (:GET /v1/transaction-type)\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "dc88e6d7-3113-44e9-a2e1-bf503a46e4b5",
              "parentUUID": "0a0083a5-7c97-45a3-91a5-762bb783b278",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return transaction type detail",
              "fullTitle": "GET Trxn Type API Tests (:GET /v1/transaction-type) should return transaction type detail",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n    email: \"admin@ppay.com\",\n    roles: \"Admin\",\n    adminRole: \"ADMIN\"\n};\ntoken = generateToken(1, adminUser.email, adminUser.roles, adminUser.adminRole);\nconst response = await pactum\n    .spec()\n    .withMethod('GET')\n    .withBearerToken(token)\n    .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.getTypes}/${typeId}`)\n    .expectStatus(200);\nconst typeDB = await prismaAccounting.transactionType.findUnique({\n    where: {\n        transactionCode: '223',\n    },\n});\nexpect(response.body.name).to.equal(typeDB.name);\nexpect(response.body.description).to.equal(typeDB.description);\nexpect(response.body.transactioncode).to.equal(typeDB.transactionCode);\nexpect(response.body.min).to.equal(typeDB.minAmount);\nexpect(response.body.max).to.equal(typeDB.maxAmount);\nexpect(response.body.isactive).to.equal(typeDB.isActive);\nexpect(Number(typeDB.dailyLimitCount)).to.equal(response.body.dailylimit.count);\nexpect(Number(typeDB.dailyLimitAmount)).to.equal(response.body.dailylimit.amount);\nexpect(Number(typeDB.monthlyLimitCount)).to.equal(response.body.monthlylimit.count);\nexpect(Number(typeDB.monthlyLimitAmount)).to.equal(response.body.monthlylimit.amount);\nexpect(Number(typeDB.weeklyLimitCount)).to.equal(response.body.weeklylimit.count);\nexpect(Number(typeDB.weeklyLimitAmount)).to.equal(response.body.weeklylimit.amount);",
              "err": {},
              "uuid": "525a51bb-128e-43cb-8a42-1187143d1e83",
              "parentUUID": "0a0083a5-7c97-45a3-91a5-762bb783b278",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "525a51bb-128e-43cb-8a42-1187143d1e83"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "96af8ab5-c620-49d3-a7ba-05a7b7bc8f33",
          "title": "Update Transaction Type API Tests (PATCH  :/v1/transaction-type/)",
          "fullFile": "/opt/app/src/accounting/transactionType/updateTrxnType.test.js",
          "file": "/src/accounting/transactionType/updateTrxnType.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Update Transaction Type API Tests (PATCH  :/v1/transaction-type/)\"",
              "fullTitle": "Update Transaction Type API Tests (PATCH  :/v1/transaction-type/) \"before all\" hook in \"Update Transaction Type API Tests (PATCH  :/v1/transaction-type/)\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$connect();",
              "err": {},
              "uuid": "51c59c6c-f727-4d0b-8dc4-0b046d466d66",
              "parentUUID": "96af8ab5-c620-49d3-a7ba-05a7b7bc8f33",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Update Transaction Type API Tests (PATCH  :/v1/transaction-type/)\"",
              "fullTitle": "Update Transaction Type API Tests (PATCH  :/v1/transaction-type/) \"before each\" hook in \"Update Transaction Type API Tests (PATCH  :/v1/transaction-type/)\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\nawait prismaAccounting.transaction.deleteMany({});\nawait prismaAccounting.transactionLegLog.deleteMany({});\nawait prismaAccounting.transactionLeg.deleteMany({});\nawait prismaAccounting.transactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.transactionType.deleteMany({});\nawait prismaAccounting.userAccount.deleteMany({});\nawait prismaAccounting.chartOfAccountLog.deleteMany({});\nawait prismaAccounting.chartOfAccount.deleteMany({});\naccount1 = await prismaAccounting.chartOfAccount.create({\n  data: {\n    name: \"Account 1\",\n    description: \"Description for Account 1\",\n    transactionType: \"SYSTEM\",\n    headType: \"ASSET\",\n    code: \"001\",\n    onlyParent: false,\n    adminId: 1,\n  },\n});\naccount2 = await prismaAccounting.chartOfAccount.create({\n  data: {\n    name: \"Account 2\",\n    description: \"Description for Account 2\",\n    transactionType: \"SYSTEM\",\n    headType: \"ASSET\",\n    code: \"002\",\n    onlyParent: true,\n    adminId: 1,\n  },\n});\nawait prismaAccounting.transactionType.create({\n  data: {\n    transactionCode: \"223\",\n    name: \"TypeA\",\n    description: \"qqqqqqqqqqqqqqqqq\",\n    minAmount: 66,\n    maxAmount: 666,\n    createdByAdminId: 1,\n    createdByAdminIdentifier: \"11\",\n    isActive: true,\n    fromChartOfAccountId: account1.id,\n    toChartOfAccountId: account2.id,\n    dailyLimitCount: 20,\n    dailyLimitAmount: 30,\n    monthlyLimitAmount: 30,\n    monthlyLimitCount: 20,\n    weeklyLimitAmount: 100,\n    weeklyLimitCount: 5000,\n  },\n});",
              "err": {},
              "uuid": "478d855e-bd41-4c9b-9bc9-f4e766600064",
              "parentUUID": "96af8ab5-c620-49d3-a7ba-05a7b7bc8f33",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Update Transaction Type API Tests (PATCH  :/v1/transaction-type/)\"",
              "fullTitle": "Update Transaction Type API Tests (PATCH  :/v1/transaction-type/) \"after all\" hook in \"Update Transaction Type API Tests (PATCH  :/v1/transaction-type/)\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "16f6b100-7ab3-4170-86fc-b80fedf5d4b2",
              "parentUUID": "96af8ab5-c620-49d3-a7ba-05a7b7bc8f33",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should update a type with valid name, description, transaction code and limits of type",
              "fullTitle": "Update Transaction Type API Tests (PATCH  :/v1/transaction-type/) should update a type with valid name, description, transaction code and limits of type",
              "timedOut": false,
              "duration": 20,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst type = await prismaAccounting.transactionType.findUnique({\n  where: {\n    transactionCode: \"223\",\n  },\n});\nconst typeId = type.id;\nconst typeToUpdate = {\n  name: \"NEw NEw Account Name111\",\n  description: \"New New This is a description for the chart of account.\",\n  transactionCode: \"3311\",\n  dailyLimit: {\n    count: 10,\n    amount: 60,\n  },\n  monthlyLimit: {\n    count: 30,\n    amount: 50,\n  },\n  weeklyLimit: {\n    count: 20,\n    amount: 30,\n  },\n};\n\nawait pactum\n  .spec()\n  .withMethod(\"PATCH\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.updateType}${typeId}`)\n  .withJson(typeToUpdate)\n  .expectStatus(200);\nconst updatedTypeRecord = await prismaAccounting.transactionType.findUnique(\n  {\n    where: { id: typeId },\n  }\n);\nexpect(updatedTypeRecord).to.not.be.null;\nexpect(updatedTypeRecord.name).to.equal(typeToUpdate.name);\nexpect(updatedTypeRecord.description).to.equal(typeToUpdate.description);\nexpect(updatedTypeRecord.transactionCode).to.equal(\n  typeToUpdate.transactionCode\n);\nexpect(Number(updatedTypeRecord.dailyLimitCount)).to.equal(\n  typeToUpdate.dailyLimit.count\n);\nexpect(Number(updatedTypeRecord.dailyLimitAmount)).to.equal(\n  typeToUpdate.dailyLimit.amount\n);\nexpect(Number(updatedTypeRecord.monthlyLimitCount)).to.equal(\n  typeToUpdate.monthlyLimit.count\n);\nexpect(Number(updatedTypeRecord.monthlyLimitAmount)).to.equal(\n  typeToUpdate.monthlyLimit.amount\n);\nexpect(Number(updatedTypeRecord.weeklyLimitCount)).to.equal(\n  typeToUpdate.weeklyLimit.count\n);\nexpect(Number(updatedTypeRecord.weeklyLimitAmount)).to.equal(\n  typeToUpdate.weeklyLimit.amount\n);",
              "err": {
                "message": "AssertionError: HTTP status 201 !== 200\n\n201 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 201 !== 200\n\n201 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 201\n+ 200\n"
              },
              "uuid": "ef95e68c-c4a2-421b-8914-3fad802eeb1a",
              "parentUUID": "96af8ab5-c620-49d3-a7ba-05a7b7bc8f33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a type with valid name, description and transaction code of type",
              "fullTitle": "Update Transaction Type API Tests (PATCH  :/v1/transaction-type/) should update a type with valid name, description and transaction code of type",
              "timedOut": false,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst type = await prismaAccounting.transactionType.findUnique({\n  where: {\n    transactionCode: \"223\",\n  },\n});\nconst typeId = type.id;\nconst typeToUpdate = {\n  name: \"NEw NEw Account Name111\",\n  description: \"New New This is a description for the chart of account.\",\n  transactionCode: \"3311\",\n  dailyLimitCount: 20,\n  dailyLimitAmount: 30,\n  monthlyLimitAmount: 30,\n  monthlyLimitCount: 20,\n  weeklyLimitAmount: 100,\n  weeklyLimitCount: 5000,\n};\n\nawait pactum\n  .spec()\n  .withMethod(\"PATCH\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.updateType}${typeId}`)\n  .withJson(typeToUpdate)\n  .expectStatus(200);\nconst updatedTypeRecord = await prismaAccounting.transactionType.findUnique(\n  {\n    where: { id: typeId },\n  }\n);\nexpect(updatedTypeRecord).to.not.be.null;\nexpect(updatedTypeRecord.name).to.equal(typeToUpdate.name);\nexpect(updatedTypeRecord.description).to.equal(typeToUpdate.description);\nexpect(updatedTypeRecord.transactionCode).to.equal(\n  typeToUpdate.transactionCode\n);",
              "err": {
                "message": "AssertionError: HTTP status 201 !== 200\n\n201 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 201 !== 200\n\n201 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 201\n+ 200\n"
              },
              "uuid": "28bfdc42-3a5a-40d2-918c-7a4d00cad657",
              "parentUUID": "96af8ab5-c620-49d3-a7ba-05a7b7bc8f33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not let user insert negative value in limits",
              "fullTitle": "Update Transaction Type API Tests (PATCH  :/v1/transaction-type/) should not let user insert negative value in limits",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst type = await prismaAccounting.transactionType.findUnique({\n  where: {\n    transactionCode: \"223\",\n  },\n});\nconst typeId = type.id;\nconst typeToUpdate = {\n  name: \"NEw NEw Account Name111\",\n  description: \"New New This is a description for the chart of account.\",\n  transactionCode: \"3311\",\n  dailyLimit: {\n    count: -10,\n    amount: -60,\n  },\n  monthlyLimit: {\n    count: -30,\n    amount: -50,\n  },\n  weeklyLimit: {\n    count: -20,\n    amount: -30,\n  },\n};\n\nawait pactum\n  .spec()\n  .withMethod(\"PATCH\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.updateType}${typeId}`)\n  .withJson(typeToUpdate)\n  .expectStatus(400);\nconst updatedTypeRecord = await prismaAccounting.transactionType.findUnique(\n  {\n    where: { id: typeId },\n  }\n);\nexpect(type).to.not.be.null;\nexpect(type.name).to.equal(updatedTypeRecord.name);\nexpect(type.description).to.equal(updatedTypeRecord.description);\nexpect(type.fromChartOfAccountId).to.equal(updatedTypeRecord.fromChartOfAccountId);\nexpect(type.toChartOfAccountId).to.equal(updatedTypeRecord.toChartOfAccountId);\nexpect(type.fromChartOfAccountId).to.equal(updatedTypeRecord.fromChartOfAccountId);\nexpect(type.toChartOfAccountId).to.equal(updatedTypeRecord.toChartOfAccountId);\nexpect(Number(type.dailyLimitCount)).to.equal(Number(updatedTypeRecord.dailyLimitCount));\nexpect(Number(type.dailyLimitAmount)).to.equal(Number(updatedTypeRecord.dailyLimitAmount));\nexpect(Number(type.monthlyLimitCount)).to.equal(Number(updatedTypeRecord.monthlyLimitCount));\nexpect(Number(type.monthlyLimitAmount)).to.equal(Number(updatedTypeRecord.monthlyLimitAmount));\nexpect(Number(type.weeklyLimitCount)).to.equal(Number(updatedTypeRecord.weeklyLimitCount));\nexpect(Number(type.weeklyLimitAmount)).to.equal(Number(updatedTypeRecord.weeklyLimitAmount));\nexpect(type.isActive).to.be.true;",
              "err": {},
              "uuid": "2bb9d6d6-7de4-4d1c-927a-0ebb732fd384",
              "parentUUID": "96af8ab5-c620-49d3-a7ba-05a7b7bc8f33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if attempting to update non-allowed fields like fromCoa and toCoa",
              "fullTitle": "Update Transaction Type API Tests (PATCH  :/v1/transaction-type/) should return 400 if attempting to update non-allowed fields like fromCoa and toCoa",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst typeWithInvalidFields = {\n  fromChartOfAccountId: account2,\n  toChartOfAccountId: account1,\n  transactionCode: \"3311\",\n};\nconst type = await prismaAccounting.transactionType.findUnique({\n  where: { transactionCode: \"223\" },\n});\nconst typeId = type.id;\nawait pactum\n  .spec()\n  .withMethod(\"PATCH\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.updateType}${typeId}`)\n  .withJson({\n    fromCoa: account1.id,\n    toCoa: account2.id,\n    transactionCode: \"3311\",\n  })\n  .expectStatus(400);\nconst typeRecord = await prismaAccounting.transactionType.findUnique({\n  where: { id: typeId },\n});\nexpect(typeRecord).to.not.be.null;\nexpect(typeRecord.fromChartOfAccountId).to.not.equal(\n  typeWithInvalidFields.fromChartOfAccountId\n);\nexpect(typeRecord.toChartOfAccountId).to.not.equal(\n  typeWithInvalidFields.toChartOfAccountId\n);\nexpect(typeRecord.transactionCode).to.not.equal(\n  typeWithInvalidFields.transactionCode\n);",
              "err": {},
              "uuid": "b7f2bb1e-b8ff-4d5f-831d-8d1a93d0d2e8",
              "parentUUID": "96af8ab5-c620-49d3-a7ba-05a7b7bc8f33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check the logs for updating a type",
              "fullTitle": "Update Transaction Type API Tests (PATCH  :/v1/transaction-type/) should check the logs for updating a type",
              "timedOut": false,
              "duration": 24,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst type = await prismaAccounting.transactionType.findUnique({\n  where: {\n    transactionCode: \"223\",\n  },\n});\nconst typeId = type.id;\nconst typeToUpdate = {\n  name: \"NEw NEw Account Name111\",\n  description: \"New New This is a description for the chart of account.\",\n  transactionCode: \"3311\",\n  dailyLimit: {\n    count: 10,\n    amount: 60,\n  },\n  monthlyLimit: {\n    count: 30,\n    amount: 50,\n  },\n  weeklyLimit: {\n    count: 20,\n    amount: 30,\n  },\n};\nawait pactum\n  .spec()\n  .withMethod(\"PATCH\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.updateType}${typeId}`)\n  .withJson(typeToUpdate);\nconst updatedTypeRecord = await prismaAccounting.transactionType.findUnique(\n  {\n    where: { id: typeId },\n  }\n);\nconst logEntry = await prismaAccounting.transactionTypeChangeLog.findMany({\n  where: { transactionType_id: updatedTypeRecord.id },\n});\nexpect(logEntry[0]).to.have.property(\"changeType\").to.equal(\"UPDATE\");\nexpect(logEntry[0]).to.have.property(\"oldValue\").not.to.be.null;\nexpect(logEntry[0]).to.have.property(\"oldValue\").not.to.be.null;",
              "err": {
                "message": "AssertionError: Target cannot be null or undefined.",
                "estack": "AssertionError: Target cannot be null or undefined.\n    at Context.<anonymous> (file:///opt/app/src/accounting/transactionType/updateTrxnType.test.js:403:33)",
                "diff": null
              },
              "uuid": "e2c60c1b-5653-44a9-9307-4253607a5ff8",
              "parentUUID": "96af8ab5-c620-49d3-a7ba-05a7b7bc8f33",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2bb9d6d6-7de4-4d1c-927a-0ebb732fd384",
            "b7f2bb1e-b8ff-4d5f-831d-8d1a93d0d2e8"
          ],
          "failures": [
            "ef95e68c-c4a2-421b-8914-3fad802eeb1a",
            "28bfdc42-3a5a-40d2-918c-7a4d00cad657",
            "e2c60c1b-5653-44a9-9307-4253607a5ff8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 85,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2869d615-cd15-471f-84bb-5532f19135d2",
          "title": "API Check: Add Money(POST)",
          "fullFile": "/opt/app/src/addMoney/addMoney.test.js",
          "file": "/src/addMoney/addMoney.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"API Check: Add Money(POST)\"",
              "fullTitle": "API Check: Add Money(POST) \"before all\" hook in \"API Check: Add Money(POST)\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "c763670b-9941-45fb-886a-6dec609e1fa2",
              "parentUUID": "2869d615-cd15-471f-84bb-5532f19135d2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"API Check: Add Money(POST)\"",
              "fullTitle": "API Check: Add Money(POST) \"before each\" hook in \"API Check: Add Money(POST)\"",
              "timedOut": false,
              "duration": 128,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577237\",\n  },\n});\ntoken = generateUserToken(userId.id, \"01317577237\", \"USER\");\nconst chartOfAccounts = await createBasicChartOfAccounts();\ncustomer = chartOfAccounts.find(\n  (account) => account.code === \"customer-01\"\n);\ntopUpProvider = chartOfAccounts.find(\n  (account) => account.code === \"top-up-providers-01\"\n);\nconst transactionTypes = await setupTransactionTypes(chartOfAccounts);\nawait createUserAccounts(chartOfAccounts);\nsender = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\nreceiver = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01711106485\" },\n});\ngp = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"gp-wallet-01\" },\n});\nteletalk = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"teletalk-wallet-01\" },\n});\nbanglalink = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"bl-wallet-01\" },\n});\nconst type = await prismaAccounting.transactionType.findUnique({\n  where: { transactionCode: \"1001\" },\n});",
              "err": {},
              "uuid": "5e2008aa-2775-432a-b7ba-7f2c59f35e4b",
              "parentUUID": "2869d615-cd15-471f-84bb-5532f19135d2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"API Check: Add Money(POST)\"",
              "fullTitle": "API Check: Add Money(POST) \"after all\" hook in \"API Check: Add Money(POST)\"",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sender = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\nreceiver = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01711106485\" },\n});\nonholdUser = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577238\" }\n});\nmaxwallet = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577210\" }\n});\ndailyLimitAmountUser = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01715170020\" }\n});\nconst testConfig = {\n  baseUrl: ApiUrls.apiBaseUrl,\n  endpoint: ApiUrls.doAddMoney,\n  token: token,\n  sender: sender,\n  receiver: receiver,\n  type: \"Top Up\",\n  database: [prismaApi.addMoneyLogs],\n  transactionTypeCode: \"1001\",\n  userId: userId.id,\n  requestBody: {\n    accountNumber: \"123131324234\",\n    accountName: \"Jarin\",\n    branchName: \"Kalabagan\",\n    districtName: \"Dhaka\",\n    transactionCode: \"1001\",\n    accountType: \"BANK\",\n    distributorId: 1,\n    amount: 50,\n  },\n  requestBodyForNotFullActiveUser: {\n    accountNumber: \"123131324234\",\n    accountName: \"Jarin\",\n    branchName: \"Kalabagan\",\n    districtName: \"Dhaka\",\n    transactionCode: \"1001\",\n    accountType: \"BANK\",\n    distributorId: 1,\n    amount: 50,\n  },\n  requestBodyForMinWalleAmount: {\n    accountNumber: \"123131324234\",\n    accountName: \"requestBodyForMinWalleAmount\",\n    branchName: \"Kalabagan\",\n    districtName: \"Dhaka\",\n    transactionCode: \"1001\",\n    accountType: \"BANK\",\n    distributorId: 1,\n    amount: 9,\n  },\n  requestBodyForMaxWalleAmount: {\n    accountNumber: \"123131324234\",\n    accountName: \"requestBodyForMaxWalleAmount\",\n    branchName: \"Kalabagan\",\n    districtName: \"Dhaka\",\n    transactionCode: \"1001\",\n    accountType: \"BANK\",\n    distributorId: 1,\n    amount: 1001,\n  },\n  requestBodyForDailyLimitAmount: {\n    amount: 100,\n    accountNumber: \"123131324234\",\n    accountName: \"requestBodyForMaxWalleAmount\",\n    branchName: \"Kalabagan\",\n    districtName: \"Dhaka\",\n    transactionCode: \"1001\",\n    accountType: \"BANK\",\n    distributorId: 1,\n  },\n  requestBodyForTypeMinAmount: {\n    amount: 5,\n    accountNumber: \"123131324234\",\n    accountName: \"requestBodyForMaxWalleAmount\",\n    branchName: \"Kalabagan\",\n    districtName: \"Dhaka\",\n    transactionCode: \"1001\",\n    accountType: \"BANK\",\n    distributorId: 1,\n  },\n  requestBodyForTypeMaxAmount: {\n    amount: 1000000,\n    accountNumber: \"123131324234\",\n    accountName: \"requestBodyForMaxWalleAmount\",\n    branchName: \"Kalabagan\",\n    districtName: \"Dhaka\",\n    transactionCode: \"1001\",\n    accountType: \"BANK\",\n    distributorId: 1,\n  },\n}\nawait runTransactionTests(testConfig);\nawait prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "f1101e24-24f6-4cd2-8c71-9e49a629b293",
              "parentUUID": "2869d615-cd15-471f-84bb-5532f19135d2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 200 for successful add money from bank and save the transaction",
              "fullTitle": "API Check: Add Money(POST) should return 200 for successful add money from bank and save the transaction",
              "timedOut": false,
              "duration": 20,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec()\n  .post(`${ApiUrls.apiBaseUrl}${ApiUrls.doAddMoney}`)\n  .withBearerToken(token)\n  .withJson({\n    accountNumber: \"123131324234\",\n    accountName: \"Jarin\",\n    branchName: \"Kalabagan\",\n    districtName: \"Dhaka\",\n    transactionCode: \"1001\",\n    accountType: \"BANK\",\n    distributorId: 1,\n    amount: 50,\n    save: true\n  })\n  .expectStatus(200);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577237\",\n  },\n});\nawait checkSuccess({\n  groupId: \"topup\",\n  topic: \"add_money_bank_card_mfs\",\n  log: 'Add Money: From tcs to 01317577237',\n  amount: 50,\n  callback: async () => {\n    const addMoneyTable = await prismaApi.addMoneyLogs.findMany({\n      where: { userId: userId.id },\n    });\n    const saveAddMoney = await prismaApi.addMoneySave.findMany({\n      where: { addFundId: addMoneyTable.id },\n    });\n    expect(saveAddMoney).to.have.lengthOf(1);\n    expect(saveAddMoney[0].accountNumber).to.include(\"123131324234\");\n    expect(saveAddMoney[0].accountName).to.equal(\"Jarin\");\n    expect(saveAddMoney[0].branchName).to.equal(\"Kalabagan\");\n    expect(saveAddMoney[0].districtName).to.equal(\"Dhaka\");\n    expect(saveAddMoney[0].accountType).to.equal(\"BANK\");\n    expect(addMoneyTable[0].status).to.equal(\"SUCCESS\");\n    expect(addMoneyTable[0].userId).to.equal(userId.id);\n  }\n})",
              "err": {
                "message": "AssertionError: HTTP status 400 !== 200\n\n400 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 400 !== 200\n\n400 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "1fda95e1-3f94-405d-9c6b-a25fab029d7e",
              "parentUUID": "2869d615-cd15-471f-84bb-5532f19135d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 for successful add money to card and save the transaction",
              "fullTitle": "API Check: Add Money(POST) should return 200 for successful add money to card and save the transaction",
              "timedOut": false,
              "duration": 9,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec()\n  .post(`${ApiUrls.apiBaseUrl}${ApiUrls.doAddMoney}`)\n  .withBearerToken(token)\n  .withJson({\n    cardNumber: \"123131324234\",\n    accountName: \"Jarin\",\n    branchName: \"Kalabagan\",\n    districtName: \"Dhaka\",\n    transactionCode: \"1001\",\n    accountType: \"CARD\",\n    cardType: \"VISA\",\n    distributorId: 2,\n    amount: 50,\n  })\n  .expectStatus(200);\nawait checkSuccess({\n  groupId: \"topup\",\n  topic: \"add_money_bank_card_mfs\",\n  log: 'Add Money: From tcs-card-visa to 01317577237',\n  amount: 50,\n  callback: async () => {\n    const addMoneyTable = await prismaApi.addMoneyLogs.findMany({\n      where: { userId: userId.id },\n    });\n    const saveAddMoney = await prismaApi.addMoneySave.findMany({\n      where: { topUpId: addMoneyTable.id },\n    });\n    expect(saveAddMoney).to.have.lengthOf(1);\n    expect(addMoneyTable[0].status).to.equal(\"SUCCESS\");\n    expect(addMoneyTable[0].userId).to.equal(userId.id);\n  }\n})",
              "err": {
                "message": "AssertionError: HTTP status 400 !== 200\n\n400 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 400 !== 200\n\n400 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "3de6c347-164d-418b-babf-4d2e2b711420",
              "parentUUID": "2869d615-cd15-471f-84bb-5532f19135d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 for successful add money to mfs and save the transaction",
              "fullTitle": "API Check: Add Money(POST) should return 200 for successful add money to mfs and save the transaction",
              "timedOut": false,
              "duration": 9,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec()\n  .post(`${ApiUrls.apiBaseUrl}${ApiUrls.doAddMoney}`)\n  .withBearerToken(token)\n  .withJson({\n    transactionCode: \"1001\",\n    accountType: \"MFS\",\n    distributorId: 3,\n    amount: 50,\n    phone: \"01711106485\",\n    mfsType: \"BKASH\",\n  })\n  .expectStatus(200);\nawait checkSuccess({\n  groupId: \"topup\",\n  topic: \"add_money_bank_card_mfs\",\n  log: 'Add Money: From tcs-mfs-bkash to 01317577237',\n  amount: 50,\n  callback: async () => {\n    const addMoneyTable = await prismaApi.addMoneyLogs.findMany({\n      where: { userId: userId.id },\n    });\n    const saveAddMoney = await prismaApi.addMoneySave.findMany({\n      where: { topUpId: addMoneyTable.id },\n    });\n    expect(saveAddMoney).to.have.lengthOf(1);\n    expect(addMoneyTable[0].status).to.equal(\"SUCCESS\");\n    expect(addMoneyTable[0].userId).to.equal(userId.id);\n  }\n})",
              "err": {
                "message": "AssertionError: HTTP status 400 !== 200\n\n400 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 400 !== 200\n\n400 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "0893a4c7-8d89-4efd-9f88-e4109e4b6406",
              "parentUUID": "2869d615-cd15-471f-84bb-5532f19135d2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if user selects Bank type and do not provide accountNumber and bank distributor in add money",
              "fullTitle": "API Check: Add Money(POST) should return 400 if user selects Bank type and do not provide accountNumber and bank distributor in add money",
              "timedOut": false,
              "duration": 14,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec()\n  .post(`${ApiUrls.apiBaseUrl}${ApiUrls.doAddMoney}`)\n  .withBearerToken(token)\n  .withJson({\n    accountName: \"Jarin\",\n    branchName: \"Kalabagan\",\n    districtName: \"Dhaka\",\n    transactionCode: \"1001\",\n    accountType: \"BANK\",\n    amount: 50,\n  })\n  .expectStatus(400);",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 400\n\n500 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 400\n\n500 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 400\n"
              },
              "uuid": "9f260ccf-2737-4d6e-990e-e7efa087fce9",
              "parentUUID": "2869d615-cd15-471f-84bb-5532f19135d2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1fda95e1-3f94-405d-9c6b-a25fab029d7e",
            "3de6c347-164d-418b-babf-4d2e2b711420",
            "0893a4c7-8d89-4efd-9f88-e4109e4b6406",
            "9f260ccf-2737-4d6e-990e-e7efa087fce9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 52,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "b650ab23-028f-4616-b718-4482e3abfef3",
          "title": "Get Saved Transaction After Add Money",
          "fullFile": "/opt/app/src/addMoney/getSaveTrxnAddMoney.test.js",
          "file": "/src/addMoney/getSaveTrxnAddMoney.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Get Saved Transaction After Add Money\"",
              "fullTitle": "Get Saved Transaction After Add Money \"before all\" hook in \"Get Saved Transaction After Add Money\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "1cf4e910-9b08-46d0-8d6f-de2069015dad",
              "parentUUID": "b650ab23-028f-4616-b718-4482e3abfef3",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook for \"should get saved add money transaction list\"",
              "fullTitle": "Get Saved Transaction After Add Money \"before each\" hook for \"should get saved add money transaction list\"",
              "timedOut": false,
              "duration": 177,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nuserId1 = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577237\",\n  },\n});\nuserId2 = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01711106485\",\n  },\n});\ntokenUser1 = generateUserToken(userId1.id, \"01317577237\", \"USER\");\ntokenUser2 = generateUserToken(userId2.id, \"01711106485\", \"USER\");\nconst chartOfAccounts = await createBasicChartOfAccounts();\ncustomer = chartOfAccounts.find(\n  (account) => account.code === \"customer-01\"\n);\nawait setupTransactionTypes(chartOfAccounts);\nconst addMoneyType = await prismaAccounting.transactionType.findUnique({\n  where: { transactionCode: \"1001\" },\n});\naddMoneyTrxnTypeId = addMoneyType.id;\nconst bankToEwalletType = await prismaAccounting.transactionType.findUnique(\n  {\n    where: { transactionCode: \"1000\" },\n  }\n);\nbankToEwalletTrxnTypeId = bankToEwalletType\n  ? bankToEwalletType.id\n  : addMoneyType.id;\nawait createUserAccounts(chartOfAccounts);\ncustomerAccount1 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\ndistributorAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"city-tcs-01\" },\n});\newalletAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"ewallet-01\" },\n});\nawait addInitialBalance(distributorAccount, 100000);\nawait addInitialBalance(ewalletAccount, 100000);",
              "err": {
                "message": "TypeError: Cannot read properties of null (reading 'identifier')",
                "estack": "TypeError: Cannot read properties of null (reading 'identifier')\n    at file:///opt/app/src/utils/addInitialBalance.js:42:106\n    at async Proxy._transactionWithCallback (prisma/generated/accounting/generated/accounting/runtime/library.js:130:7983)\n    at async addInitialBalance (file:///opt/app/src/utils/addInitialBalance.js:27:12)\n    at async Context.<anonymous> (file:///opt/app/src/addMoney/getSaveTrxnAddMoney.test.js:95:5)",
                "diff": null
              },
              "uuid": "bd88d23f-0426-4536-ae8d-1d08abbc5690",
              "parentUUID": "b650ab23-028f-4616-b718-4482e3abfef3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Get Saved Transaction After Add Money\"",
              "fullTitle": "Get Saved Transaction After Add Money \"after all\" hook in \"Get Saved Transaction After Add Money\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$disconnect();\nawait prismaApi.$disconnect();\nawait prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "cb29225e-809c-406d-80de-8cac29144d1d",
              "parentUUID": "b650ab23-028f-4616-b718-4482e3abfef3",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get saved add money transaction list",
              "fullTitle": "Get Saved Transaction After Add Money should get saved add money transaction list",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await insertAddMoneySavedTransaction({\n  accountName: \"John Doe\",\n  accountNumber: \"1234567890\",\n  accountType: \"BANK\",\n  amount: 1000,\n  bankName: \"Example Bank\",\n  branchName: \"Main Branch\",\n  cardType: \"VISA\",\n  districtName: \"Central District\",\n  fromAccount: \"city-tcs-01\",\n  toAccount: \"01317577237\",\n  userId: userId1.id,\n});\nawait pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.saveTrxnAddMoney}`)\n  .expectStatus(200);\nconst savedAddMoneyTrxns = await prismaApi.addMoneySave.findMany({});\nexpect(savedAddMoneyTrxns).to.have.lengthOf(1);\nexpect(savedAddMoneyTrxns[0].amount.toString()).to.equal(\"1000\");\nexpect(savedAddMoneyTrxns[0].isSave).to.be.true;\nexpect(savedAddMoneyTrxns[0].fromAccount).to.equal(\"city-tcs-01\");\nexpect(savedAddMoneyTrxns[0].toAccount).to.equal(\"01317577237\");\nexpect(savedAddMoneyTrxns[0].type).to.equal(\"BANK\");\nexpect(savedAddMoneyTrxns[0].userId.toString()).to.equal(\n  userId1.id.toString()\n);\nexpect(savedAddMoneyTrxns[0].accountName).to.equal(\"John Doe\");\nexpect(savedAddMoneyTrxns[0].accountNumber).to.equal(\"1234567890\");\nexpect(savedAddMoneyTrxns[0].bankName).to.equal(\"Example Bank\");\nexpect(savedAddMoneyTrxns[0].branchName).to.equal(\"Main Branch\");",
              "err": {},
              "uuid": "c10b068c-8c5c-49c6-8d44-72b9158abe3e",
              "parentUUID": "b650ab23-028f-4616-b718-4482e3abfef3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should show the first add money transaction of bank account even after multiple transactions with the same bank account",
              "fullTitle": "Get Saved Transaction After Add Money should show the first add money transaction of bank account even after multiple transactions with the same bank account",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await insertAddMoneySavedTransaction({\n  accountName: \"John Doe\",\n  accountNumber: \"1234567890\",\n  accountType: \"BANK\",\n  amount: 1000,\n  bankName: \"Example Bank\",\n  branchName: \"Main Branch\",\n  cardType: \"VISA\",\n  districtName: \"Central District\",\n  fromAccount: \"city-tcs-01\",\n  toAccount: \"01317577237\",\n  userId: userId1.id,\n});\nawait insertAddMoneySavedTransaction({\n  accountName: \"John Doe\",\n  accountNumber: \"1234567890\",\n  accountType: \"BANK\",\n  amount: 2000,\n  bankName: \"Example Bank\",\n  branchName: \"Main Branch\",\n  cardType: \"VISA\",\n  districtName: \"Central District\",\n  fromAccount: \"city-tcs-01\",\n  toAccount: \"01317577237\",\n  userId: userId1.id,\n});\nawait pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.saveTrxnAddMoney}`)\n  .expectStatus(200)\n  .returns(\"body\");\nconst savedAddMoneyTrxns = await prismaApi.addMoneySave.findMany({});\nexpect(savedAddMoneyTrxns).to.have.lengthOf(1);\nexpect(savedAddMoneyTrxns[0].amount.toString()).to.equal(\"1000\");\nexpect(savedAddMoneyTrxns[0].accountNumber).to.equal(\"1234567890\");",
              "err": {},
              "uuid": "36806e4f-8028-4654-82f3-4015a15d03c4",
              "parentUUID": "b650ab23-028f-4616-b718-4482e3abfef3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should save only one add money transaction per unique bank account",
              "fullTitle": "Get Saved Transaction After Add Money should save only one add money transaction per unique bank account",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const bankAccounts = [\n  \"1234567891\",\n  \"1234567892\",\n  \"1234567893\",\n  \"1234567894\",\n  \"1234567895\",\n];\nfor (let i = 0; i < 10; i++) {\n  await insertAddMoneySavedTransaction({\n    accountName: `John Doe ${i % 5}`,\n    accountNumber: bankAccounts[i % 5],\n    accountType: \"BANK\",\n    amount: 2222,\n    bankName: \"Example Bank\",\n    branchName: \"Main Branch\",\n    cardType: \"VISA\",\n    districtName: \"Central District\",\n    fromAccount: \"city-tcs-01\",\n    toAccount: \"01317577237\",\n    userId: userId1.id,\n  });\n}\nawait pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.saveTrxnAddMoney}`)\n  .expectStatus(200)\n  .returns(\"body\");\nconst savedAddMoneyTrxns = await prismaApi.addMoneySave.findMany({});\nexpect(savedAddMoneyTrxns).to.have.lengthOf(5);\nconst savedAccountNumbers = savedAddMoneyTrxns.map(\n  (txn) => txn.accountNumber\n);\nexpect(savedAccountNumbers).to.have.members(bankAccounts);",
              "err": {},
              "uuid": "2afa8b16-f141-4c99-8b0a-e61a3560e6ec",
              "parentUUID": "b650ab23-028f-4616-b718-4482e3abfef3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should return saved add money transaction list with correct pagination and size",
              "fullTitle": "Get Saved Transaction After Add Money should return saved add money transaction list with correct pagination and size",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const bankAccounts = [\n  \"1234567891\",\n  \"1234567892\",\n  \"1234567893\",\n  \"1234567894\",\n  \"1234567895\",\n];\nfor (let i = 0; i < 10; i++) {\n  await insertAddMoneySavedTransaction({\n    accountName: `John Doe ${i % 5}`,\n    accountNumber: bankAccounts[i % 5],\n    accountType: \"BANK\",\n    amount: 1000,\n    bankName: \"Example Bank\",\n    branchName: \"Main Branch\",\n    cardType: \"VISA\",\n    districtName: \"Central District\",\n    fromAccount: \"city-tcs-01\",\n    toAccount: \"01317577237\",\n    userId: userId1.id,\n  });\n}\nconst response = await pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"GET\")\n  .withPath(\n    `${ApiUrls.apiBaseUrl}${ApiUrls.saveTrxnAddMoney}?page=0&size=3`\n  )\n  .expectStatus(200);\nexpect(response.body)\n  .to.have.property(\"saveTransactions\")\n  .that.is.an(\"array\");\nexpect(response.body.saveTransactions).to.have.lengthOf(3);\nexpect(response.body.pagination.hasNext).to.equal(true);\nexpect(response.body.pagination.currentPageTotalCount).to.equal(3);\nexpect(response.body.pagination.totalCount).to.equal(5);\nexpect(response.body.pagination.currentPage).to.equal(0);",
              "err": {},
              "uuid": "e594fbfd-ceb7-4d55-8481-a3dcb3221172",
              "parentUUID": "b650ab23-028f-4616-b718-4482e3abfef3",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "c10b068c-8c5c-49c6-8d44-72b9158abe3e",
            "36806e4f-8028-4654-82f3-4015a15d03c4",
            "2afa8b16-f141-4c99-8b0a-e61a3560e6ec",
            "e594fbfd-ceb7-4d55-8481-a3dcb3221172"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a66001b7-6c5c-4120-8d5c-c13cbebcfec7",
          "title": "Account Creation From Admin",
          "fullFile": "/opt/app/src/auth/accountCreationAdmin.test.js",
          "file": "/src/auth/accountCreationAdmin.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Account Creation From Admin\"",
              "fullTitle": "Account Creation From Admin \"before all\" hook in \"Account Creation From Admin\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();",
              "err": {},
              "uuid": "600be6b6-d103-4fb7-ab30-03b949b0aa76",
              "parentUUID": "a66001b7-6c5c-4120-8d5c-c13cbebcfec7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Account Creation From Admin\"",
              "fullTitle": "Account Creation From Admin \"before each\" hook in \"Account Creation From Admin\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\nawait prismaAccounting.transaction.deleteMany({});\nawait prismaAccounting.transactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.transactionType.deleteMany({});\nawait prismaAccounting.transactionLegLog.deleteMany({});\nawait prismaAccounting.transactionLeg.deleteMany({});\nawait prismaAccounting.accountLog.deleteMany({});\nawait prismaAccounting.userAccount.deleteMany({});\nawait prismaAccounting.chartOfAccountLog.deleteMany({});\nawait prismaAccounting.chartOfAccount.deleteMany({});\nawait prismaAuth.appUser.deleteMany({});",
              "err": {},
              "uuid": "3c30d82a-e93e-4392-99a6-045adf8d0946",
              "parentUUID": "a66001b7-6c5c-4120-8d5c-c13cbebcfec7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Account Creation From Admin\"",
              "fullTitle": "Account Creation From Admin \"after all\" hook in \"Account Creation From Admin\"",
              "timedOut": false,
              "duration": 11,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();",
              "err": {},
              "uuid": "0d935c54-f6cf-4af5-9b1a-a980e62abf06",
              "parentUUID": "a66001b7-6c5c-4120-8d5c-c13cbebcfec7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create user account successfully from Admin",
              "fullTitle": "Account Creation From Admin should create user account successfully from Admin",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst chartOfAccountData = {\n  name: \"Chart of Account 1\",\n  description: \"Description for Account 1\",\n  transactionType: \"SYSTEM\",\n  headType: \"ASSET\",\n  code: \"001\",\n  onlyParent: false,\n  adminId: 1,\n  minWalletAmount: 100,\n  maxWalletAmount: 10000,\n};\nconst chartOfAccount = await prismaAccounting.chartOfAccount.create({\n  data: chartOfAccountData,\n});\nconst chartOfAccountId = chartOfAccount.id;\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.createAccountUrl}`)\n  .withBearerToken(token)\n  .withJson({\n    chartOfAccountId: chartOfAccountId,\n    accountName: \"John\",\n    identifier: \"01788448853\",\n    status: \"FULL_ACTIVE\",\n  })\n  .expectStatus(200);\nconst allAccounts = await prismaAccounting.userAccount.findMany();\nconst createdAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01788448853\" },\n});\nexpect(createdAccount.identifier).to.equal(\"01788448853\");\nexpect(allAccounts.length).to.equal(1);\nexpect(createdAccount.accountName).to.equal(\"John\");\nexpect(createdAccount.status).to.equal(\"FULL_ACTIVE\");\nexpect(createdAccount.chartOfAccount_id).to.equal(chartOfAccountId);\nexpect(createdAccount.dailyLimitAmount).to.equal(null);\nexpect(createdAccount.monthlyLimitAmount).to.equal(null);\nexpect(createdAccount.monthlyLimitCount).to.equal(null);\nexpect(createdAccount.weeklyLimitAmount).to.equal(null);\nexpect(createdAccount.weeklyLimitCount).to.equal(null);\nexpect(createdAccount.dailyLimitCount).to.equal(null);\nexpect(createdAccount.maxWalletAmount).to.equal(null);\nexpect(createdAccount.minWalletAmount).to.equal(null);",
              "err": {},
              "uuid": "99978609-7359-4ad5-9ae6-6b561e528fe9",
              "parentUUID": "a66001b7-6c5c-4120-8d5c-c13cbebcfec7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error when identifier is not given",
              "fullTitle": "Account Creation From Admin should show error when identifier is not given",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst chartOfAccountData = {\n  name: \"Sample Account Name\",\n  adminId: 1,\n  description: \"This is a description for the chart of account.\",\n  transactionType: \"SYSTEM\",\n  headType: \"ASSET\",\n  code: \"ACC-001\",\n  onlyParent: false,\n  dailyLimitAmount: 100,\n};\nconst chartOfAccount = await prismaAccounting.chartOfAccount.create({\n  data: chartOfAccountData,\n});\nconst chartOfAccountId = chartOfAccount.id;\nconst testData = {\n  accountName: \"John\",\n  status: \"FULL_ACTIVE\",\n  identifier: \"01788448853\",\n  chartOfAccountId: chartOfAccountId,\n};\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.createAccountUrl}`)\n  .withBearerToken(token)\n  .withJson({\n    accountName: testData.accountName,\n    status: testData.status,\n    chartOfAccountId: testData.chartOfAccountId,\n  })\n  .expectStatus(400);",
              "err": {},
              "uuid": "f88640e8-4e07-4c84-ac04-e7c7317a6f10",
              "parentUUID": "a66001b7-6c5c-4120-8d5c-c13cbebcfec7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error code with already existing identifier in admin",
              "fullTitle": "Account Creation From Admin should show error code with already existing identifier in admin",
              "timedOut": false,
              "duration": 24,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst chartOfAccountData = {\n  name: \"Sample Account Name\",\n  adminId: 1,\n  description: \"This is a description for the chart of account.\",\n  transactionType: \"SYSTEM\",\n  headType: \"LIABILITY\",\n  code: \"ACC-001\",\n  onlyParent: false,\n};\nconst chartOfAccount = await prismaAccounting.chartOfAccount.create({\n  data: chartOfAccountData,\n});\nconst chartOfAccountId = chartOfAccount.id;\nconst testData = {\n  accountName: \"John Doe\",\n  identifier: \"01788448853\",\n  status: \"FULL_ACTIVE\",\n  dailyLimitAmount: 50000,\n  dailyLimitCount: 200,\n  monthlyLimitAmount: 5000000,\n  monthlyLimitCount: 6000,\n  maxWalletAmount: 1000000,\n  minWalletAmount: 500,\n  weeklyLimitAmount: 250000,\n  weeklyLimitCount: 1000,\n  chartOfAccount_id: chartOfAccount.id,\n};\nawait prismaAccounting.userAccount.create({\n  data: testData,\n});\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.createAccountUrl}`)\n  .withBearerToken(token)\n  .withJson({\n    chartOfAccountId: chartOfAccountId,\n    accountName: testData.accountName,\n    identifier: testData.identifier,\n    status: testData.status,\n  })\n  .expectStatus(409);\nconst result = await prismaAccounting.userAccount.findMany({});\nexpect(result.length).to.equal(1);",
              "err": {
                "message": "AssertionError: HTTP status 200 !== 409\n\n200 !== 409\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 200 !== 409\n\n200 !== 409\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 200\n+ 409\n"
              },
              "uuid": "12bd8d14-2956-4ff5-b3cf-41aade3653ac",
              "parentUUID": "a66001b7-6c5c-4120-8d5c-c13cbebcfec7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error if chart of account Id is not found",
              "fullTitle": "Account Creation From Admin should show error if chart of account Id is not found",
              "timedOut": false,
              "duration": 19,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst chartOfAccountData = {\n  name: \"Sample Account Name\",\n  adminId: 1,\n  description: \"This is a description for the chart of account.\",\n  transactionType: \"SYSTEM\",\n  headType: \"ASSET\",\n  code: \"ACC-001\",\n  onlyParent: false,\n};\nconst chartOfAccount = await prismaAccounting.chartOfAccount.create({\n  data: chartOfAccountData,\n});\nconst chartOfAccountId = chartOfAccount.id;\nconst response = await pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.createAccountUrl}`)\n  .withBearerToken(token)\n  .withJson({\n    chartOfAccountId: 9999,\n    accountName: \"Anna\",\n    identifier: \"01788448853\",\n    status: \"LIMITED_ACTIVE\",\n  })\n  .expectStatus(404);",
              "err": {
                "message": "AssertionError: HTTP status 200 !== 404\n\n200 !== 404\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 200 !== 404\n\n200 !== 404\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 200\n+ 404\n"
              },
              "uuid": "eefff108-0403-478b-800b-c0bbe56928bb",
              "parentUUID": "a66001b7-6c5c-4120-8d5c-c13cbebcfec7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check the logs for creating a account",
              "fullTitle": "Account Creation From Admin should check the logs for creating a account",
              "timedOut": false,
              "duration": 79,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const adminUser = {\n  email: \"admin@ppay.com\",\n  roles: \"Admin\",\n  adminRole: \"ADMIN\",\n};\ntoken = generateToken(\n  1,\n  adminUser.email,\n  adminUser.roles,\n  adminUser.adminRole\n);\nconst chartOfAccountData = {\n  name: \"Sample Account Name\",\n  adminId: 1,\n  description: \"This is a description for the chart of account.\",\n  transactionType: \"SYSTEM\",\n  headType: \"ASSET\",\n  code: \"ACC-001\",\n  onlyParent: false,\n  dailyLimitAmount: 100,\n};\nconst chartOfAccount = await prismaAccounting.chartOfAccount.create({\n  data: chartOfAccountData,\n});\nconst chartOfAccountId = chartOfAccount.id;\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.createAccountUrl}`)\n  .withBearerToken(token)\n  .withJson({\n    chartOfAccountId: chartOfAccountId,\n    accountName: \"John\",\n    identifier: \"01788448853\",\n    status: \"FULL_ACTIVE\",\n  })\n  .expectStatus(200);\nconst createdAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01788448853\" },\n});\nawait new Promise((resolve) => setTimeout(resolve, 50));\nconst logEntry = await prismaAccounting.accountLog.findMany({});\nexpect(logEntry.length).to.equal(1);",
              "err": {},
              "uuid": "ef27db4f-2e2e-4468-a296-8e886caf5a8e",
              "parentUUID": "a66001b7-6c5c-4120-8d5c-c13cbebcfec7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "99978609-7359-4ad5-9ae6-6b561e528fe9",
            "f88640e8-4e07-4c84-ac04-e7c7317a6f10",
            "ef27db4f-2e2e-4468-a296-8e886caf5a8e"
          ],
          "failures": [
            "12bd8d14-2956-4ff5-b3cf-41aade3653ac",
            "eefff108-0403-478b-800b-c0bbe56928bb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 171,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "53e418bc-c802-4ad7-ae7f-6d03cd02c730",
          "title": "Account Creation for P-pay User",
          "fullFile": "/opt/app/src/auth/accountCreationPpay.test.js",
          "file": "/src/auth/accountCreationPpay.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Account Creation for P-pay User\"",
              "fullTitle": "Account Creation for P-pay User \"before all\" hook in \"Account Creation for P-pay User\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaApi.$connect();\nawait prismaAccounting.$connect();",
              "err": {},
              "uuid": "7f3fce7c-b89e-40d7-bf2c-0fe73ea38060",
              "parentUUID": "53e418bc-c802-4ad7-ae7f-6d03cd02c730",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Account Creation for P-pay User\"",
              "fullTitle": "Account Creation for P-pay User \"before each\" hook in \"Account Creation for P-pay User\"",
              "timedOut": false,
              "duration": 14,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\nawait prismaAccounting.transaction.deleteMany({});\nawait prismaAccounting.transactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.transactionType.deleteMany({});\nawait prismaAccounting.transactionLegLog.deleteMany({});\nawait prismaAccounting.transactionLeg.deleteMany({});\nawait prismaAccounting.accountLog.deleteMany({});\nawait prismaAccounting.userAccount.deleteMany({});\nawait prismaAccounting.chartOfAccountLog.deleteMany({});\nawait prismaAccounting.chartOfAccount.deleteMany({});\nawait prismaAuth.adminUser.deleteMany({});\nawait prismaAuth.appUser.deleteMany({});\nawait prismaApi.adminSetting.deleteMany({});",
              "err": {},
              "uuid": "c1c99eae-7819-4316-aead-599f6dae6094",
              "parentUUID": "53e418bc-c802-4ad7-ae7f-6d03cd02c730",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Account Creation for P-pay User\"",
              "fullTitle": "Account Creation for P-pay User \"after all\" hook in \"Account Creation for P-pay User\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();\nawait prismaApi.$disconnect();\nawait prismaAuth.$disconnect();",
              "err": {},
              "uuid": "13509aa5-fa66-4e5c-94bc-28c6225fa678",
              "parentUUID": "53e418bc-c802-4ad7-ae7f-6d03cd02c730",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create user account successfully from P-pay App",
              "fullTitle": "Account Creation for P-pay User should create user account successfully from P-pay App",
              "timedOut": false,
              "duration": 8,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const appUser = await prismaAuth.appUser.create({\n  data: {\n    fullname: \"John\",\n    phone: \"01747538382\",\n    email: \"johndoe1@example.com\",\n    password:\n      \"$2a$10$C2JDo6LHB61PTl6mTBdEpeoPNRf7mDCKdbufHd.2uEJzwwm4hbP6q\",\n    fathername: \"John Doe\",\n    mothername: \"Jane Doe\",\n    nidnumber: \"1234567890\",\n    dob: \"1990-01-01\",\n    nidaddress: \"House 123, Street 456, City, District\",\n    presentAddress: \"House 789, Street 321, City, District\",\n    district: \"Dhaka\",\n    hasLiveliness: false,\n    hasNidInfo: true,\n    isEmailVerified: false,\n    isPhoneVerified: false,\n    role: \"USER\",\n    wrongPinCount: 0\n  },\n});\ntoken = generateUserToken(appUser.id, \"01747538382\", \"USER\");\nconst admin = await prismaAuth.adminUser.create({\n  data: {\n    name: \"Admin user\",\n    email: \"admin@example.com\",\n    password:\n      \"$2a$10$M6jH9Ky2SbbJ5tu5dV220.PO86QWhef5cllDVNgwrxLWFPlqTYLlC\",\n    role: 0,\n    isActive: true,\n  },\n});\nconst chartOfAccount = await prismaAccounting.chartOfAccount.create({\n  data: {\n    adminId: admin.id,\n    code: \"001\",\n    name: \"Customer\",\n    description: \"Description for Account 1\",\n    headType: \"LIABILITY\",\n    minWalletAmount: 100,\n    maxWalletAmount: 100000,\n    transactionType: \"SYSTEM\",\n    onlyParent: false,\n    monthlyLimitCount: 0,\n    monthlyLimitAmount: 0,\n    weeklyLimitCount: 0,\n    weeklyLimitAmount: 0,\n    dailyLimitCount: 0,\n    dailyLimitAmount: 0,\n  },\n});\nchartOfAccountId = chartOfAccount.id;\nconst verifyChartOfAccount =\n  await prismaAccounting.chartOfAccount.findUnique({\n    where: { id: chartOfAccountId },\n  });\nif (!verifyChartOfAccount) {\n  throw new Error(\n    `Chart of Account with ID ${chartOfAccountId} was not found in the DB!`\n  );\n}\nconst adminSettingData = {\n  data: {\n    id: 1,\n    userType: \"CUSTOMER\",\n    createdBy: admin.id,\n    info: JSON.stringify({\n      customerWalletCoaId: chartOfAccountId,\n      sendMoneyTrxCode: \"SM001\",\n      makePaymentTrxCode: \"MP001\",\n      requestMoneyTrxCode: null,\n      addMoneyTrxCode: null,\n      fundTransferTrxCode: null,\n      topUpTrxCode: \"TP001\",\n      topUpOperators: {\n        gpAccountId: \"GP001\",\n        skittoAccountId: \"SK001\",\n        robiAccountId: \"RB001\",\n        blAccountId: \"BL001\",\n        ttAccountId: \"TT001\",\n        airtelAccountId: \"AT001\",\n      },\n      billPayTrxCode: \"BP001\",\n      billerCategories: {\n        descoAccountId: \"DE001\",\n        pbAccountId: \"PB001\",\n        wasaAccountId: \"WA001\",\n        titasAccountId: \"TI001\",\n        dotNetAccountId: \"DN001\",\n      },\n    }),\n  },\n};\nawait prismaApi.adminSetting.create(adminSettingData);\nawait prismaApi.adminSetting.findFirst({\n  where: { userType: \"CUSTOMER\" },\n});\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.liveliness_image}`)\n  .withBearerToken(token)\n  .withFile(\n    \"livelinessImage\",\n    path.resolve(\"/opt/app/test-data/Onamika.jpeg\")\n  )\n  .expectStatus(200);\nawait new Promise((resolve) => setTimeout(resolve,50));\nconst createdAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01747538382\" },\n});\nconst allAccounts = await prismaAccounting.userAccount.findMany();\nexpect(createdAccount).to.not.be.null;\nexpect(createdAccount.identifier).to.equal(\"01747538382\");\nexpect(allAccounts.length).to.equal(1);\nexpect(createdAccount.accountName).to.equal(\"John\");\nexpect(createdAccount.status).to.equal(\"LIMITED_ACTIVE\");\nexpect(createdAccount.chartOfAccount_id).to.equal(chartOfAccountId);\nexpect(createdAccount.aitPercentage).to.equal(5);",
              "err": {
                "message": "PrismaClientKnownRequestError: \nInvalid `prisma.adminUser.create()` invocation:\n\n\nThe column `role` does not exist in the current database.",
                "estack": "PrismaClientKnownRequestError: \nInvalid `prisma.adminUser.create()` invocation:\n\n\nThe column `role` does not exist in the current database.\n    at qn.handleRequestError (prisma/generated/auth/runtime/library.js:121:7315)\n    at qn.handleAndLogRequestError (prisma/generated/auth/runtime/library.js:121:6640)\n    at qn.request (prisma/generated/auth/runtime/library.js:121:6347)\n    at async l (prisma/generated/auth/runtime/library.js:130:9616)\n    at async Context.<anonymous> (file:///opt/app/src/auth/accountCreationPpay.test.js:68:19)",
                "diff": null
              },
              "uuid": "d35b9ac4-4c98-4e07-8d80-29676d00c7eb",
              "parentUUID": "53e418bc-c802-4ad7-ae7f-6d03cd02c730",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d35b9ac4-4c98-4e07-8d80-29676d00c7eb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "eaba6d60-a922-45f0-a8e7-ad5f94cf8b0a",
          "title": "Get Saved Transaction After Utility Pay",
          "fullFile": "/opt/app/src/billPay/getSaveTrxnBillPay.test.js",
          "file": "/src/billPay/getSaveTrxnBillPay.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Get Saved Transaction After Utility Pay\"",
              "fullTitle": "Get Saved Transaction After Utility Pay \"before all\" hook in \"Get Saved Transaction After Utility Pay\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "ffef8061-bad3-4bf3-a12b-0719b74e88e7",
              "parentUUID": "eaba6d60-a922-45f0-a8e7-ad5f94cf8b0a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Get Saved Transaction After Utility Pay\"",
              "fullTitle": "Get Saved Transaction After Utility Pay \"before each\" hook in \"Get Saved Transaction After Utility Pay\"",
              "timedOut": false,
              "duration": 137,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nuserId1 = await prismaAuth.appUser.findFirst({\n  where: { phone: \"01317577237\" },\n});\ntokenUser1 = generateUserToken(userId1.id, \"01317577237\", \"USER\");\nconst chartOfAccounts = await createBasicChartOfAccounts();\nawait setupTransactionTypes(chartOfAccounts);\nconst utilityPayType = await prismaAccounting.transactionType.findUnique({\n  where: { transactionCode: \"1004\" },\n});\nutilityPayTypeId = utilityPayType.id;\nawait createUserAccounts(chartOfAccounts);\ncustomerAccount1 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\nbillPayDistributorAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"polli-bidyut-01\" },\n});\nbillerId = await prismaApi.billerCategories.findFirst({\n  where: {\n    accountIdentifier: \"polli-bidyut-01\",\n    billerType: \"ELECTRICITY\",\n  },\n});\nbillPayDistributorAccountForWater =\n  await prismaAccounting.userAccount.findUnique({\n    where: { identifier: \"wasa-01\" },\n  });\nbillerIdForWater = await prismaApi.billerCategories.findFirst({\n  where: {\n    accountIdentifier: \"wasa-01\",\n    billerType: \"WATER\",\n  },\n});\nbillPayDistributorAccountForGas =\n  await prismaAccounting.userAccount.findUnique({\n    where: { identifier: \"titas-gas-01\" },\n  });\nbillerIdForGas = await prismaApi.billerCategories.findFirst({\n  where: {\n    accountIdentifier: \"titas-gas-01\",\n    billerType: \"GAS\",\n  },\n});\nawait addInitialBalance(customerAccount1, 100000);",
              "err": {},
              "uuid": "e4147a36-ae95-48c4-bfea-05ec8987ac95",
              "parentUUID": "eaba6d60-a922-45f0-a8e7-ad5f94cf8b0a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Get Saved Transaction After Utility Pay\"",
              "fullTitle": "Get Saved Transaction After Utility Pay \"after all\" hook in \"Get Saved Transaction After Utility Pay\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$disconnect();\nawait prismaApi.$disconnect();\nawait prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "ba0161b8-e478-40a5-a459-d17aff3d48df",
              "parentUUID": "eaba6d60-a922-45f0-a8e7-ad5f94cf8b0a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get saved Utility Pay transaction list",
              "fullTitle": "Get Saved Transaction After Utility Pay should get saved Utility Pay transaction list",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await insertUtilityPaySavedTransaction({\n  amount: 1000,\n  fromAccount: customerAccount1,\n  toAccount: billPayDistributorAccount,\n  transactionTypeId: utilityPayTypeId,\n  billerId: billerId.id,\n});\nawait pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .get(`${ApiUrls.apiBaseUrl}${ApiUrls.savetrxnUtilityPay}`)\n  .expectStatus(200);\nconst savedUtilityTrxns = await prismaApi.utilitySave.findMany({});\nexpect(savedUtilityTrxns).to.have.lengthOf(1);\nexpect(savedUtilityTrxns[0].amount.toString()).to.equal(\"1000\");\nexpect(savedUtilityTrxns[0].save).to.be.true;\nexpect(savedUtilityTrxns[0].fromAccount).to.equal(\"01317577237\");\nexpect(savedUtilityTrxns[0].toAccount).to.equal(\"polli-bidyut-01\");\nexpect(savedUtilityTrxns[0].transactionTypeCode).to.equal(\"1004\");\nexpect(savedUtilityTrxns[0].billerId.toString()).to.equal(\n  billerId.id.toString()\n);",
              "err": {
                "message": "TypeError: Cannot read properties of null (reading 'id')",
                "estack": "TypeError: Cannot read properties of null (reading 'id')\n    at Context.<anonymous> (file:///opt/app/src/billPay/getSaveTrxnBillPay.test.js:155:26)",
                "diff": null
              },
              "uuid": "49cf4702-f1ce-45de-b2af-3096c80c3938",
              "parentUUID": "eaba6d60-a922-45f0-a8e7-ad5f94cf8b0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the first Utility Pay transaction of bank account even after multiple transactions with the same bank account",
              "fullTitle": "Get Saved Transaction After Utility Pay should show the first Utility Pay transaction of bank account even after multiple transactions with the same bank account",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await insertUtilityPaySavedTransaction({\n  amount: 1000,\n  fromAccount: customerAccount1,\n  toAccount: billPayDistributorAccount,\n  transactionTypeId: utilityPayTypeId,\n  billerId: billerId.id,\n});\nawait insertUtilityPaySavedTransaction({\n  amount: 2000,\n  fromAccount: customerAccount1,\n  toAccount: billPayDistributorAccount,\n  transactionTypeId: utilityPayTypeId,\n  billerId: billerId.id,\n});\nawait pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.savetrxnUtilityPay}`)\n  .expectStatus(200)\n  .returns(\"body\");\nconst savedUtilityTrxns = await prismaApi.utilitySave.findMany({});\nexpect(savedUtilityTrxns).to.have.lengthOf(1);\nexpect(savedUtilityTrxns[0].amount.toString()).to.equal(\"1000\");\nexpect(savedUtilityTrxns[0].toAccount).to.equal(\"polli-bidyut-01\");",
              "err": {
                "message": "TypeError: Cannot read properties of null (reading 'id')",
                "estack": "TypeError: Cannot read properties of null (reading 'id')\n    at Context.<anonymous> (file:///opt/app/src/billPay/getSaveTrxnBillPay.test.js:183:26)",
                "diff": null
              },
              "uuid": "b1d0cef4-ebcc-4b18-a78c-5e2e7b1ca7ba",
              "parentUUID": "eaba6d60-a922-45f0-a8e7-ad5f94cf8b0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should save only one Utility Pay transaction per unique biller category",
              "fullTitle": "Get Saved Transaction After Utility Pay should save only one Utility Pay transaction per unique biller category",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "for (let i = 0; i < 10; i++) {\n  await insertUtilityPaySavedTransaction({\n    amount: 1000,\n    fromAccount: customerAccount1,\n    toAccount: billPayDistributorAccount,\n    transactionTypeId: utilityPayTypeId,\n    billerId: billerId.id,\n  });\n}\nfor (let i = 0; i < 10; i++) {\n  await insertUtilityPaySavedTransaction({\n    amount: 500,\n    fromAccount: customerAccount1,\n    toAccount: billPayDistributorAccountForWater,\n    transactionTypeId: utilityPayTypeId,\n    billerId: billerId.id,\n  });\n}\nfor (let i = 0; i < 10; i++) {\n  await insertUtilityPaySavedTransaction({\n    amount: 2000,\n    fromAccount: customerAccount1,\n    toAccount: billPayDistributorAccountForGas,\n    transactionTypeId: utilityPayTypeId,\n    billerId: billerId.id,\n  });\n}\nawait pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.savetrxnUtilityPay}`)\n  .expectStatus(200);\nconst savedUtilityTrxns = await prismaApi.utilitySave.findMany({});\nexpect(savedUtilityTrxns).to.have.lengthOf(3);",
              "err": {
                "message": "TypeError: Cannot read properties of null (reading 'id')",
                "estack": "TypeError: Cannot read properties of null (reading 'id')\n    at Context.<anonymous> (file:///opt/app/src/billPay/getSaveTrxnBillPay.test.js:215:28)",
                "diff": null
              },
              "uuid": "bdf08904-0ef8-4f67-9b8b-13d01625a444",
              "parentUUID": "eaba6d60-a922-45f0-a8e7-ad5f94cf8b0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return saved Utility Pay transaction list with correct pagination and size",
              "fullTitle": "Get Saved Transaction After Utility Pay should return saved Utility Pay transaction list with correct pagination and size",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "for (let i = 0; i < 10; i++) {\n  await insertUtilityPaySavedTransaction({\n    amount: 1000,\n    fromAccount: customerAccount1,\n    toAccount: billPayDistributorAccount,\n    transactionTypeId: utilityPayTypeId,\n    billerId: billerId.id,\n  });\n}\nfor (let i = 0; i < 10; i++) {\n  await insertUtilityPaySavedTransaction({\n    amount: 500,\n    fromAccount: customerAccount1,\n    toAccount: billPayDistributorAccountForWater,\n    transactionTypeId: utilityPayTypeId,\n    billerId: billerId.id,\n  });\n}\nfor (let i = 0; i < 10; i++) {\n  await insertUtilityPaySavedTransaction({\n    amount: 2000,\n    fromAccount: customerAccount1,\n    toAccount: billPayDistributorAccountForGas,\n    transactionTypeId: utilityPayTypeId,\n    billerId: billerId.id,\n  });\n}\nconst response = await pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"GET\")\n  .withPath(\n    `${ApiUrls.apiBaseUrl}${ApiUrls.savetrxnUtilityPay}?page=0&size=2`\n  )\n  .expectStatus(200);\nexpect(response.body)\n  .to.have.property(\"saveTransactions\")\n  .that.is.an(\"array\");\nexpect(response.body.saveTransactions).to.have.lengthOf(2);\nexpect(response.body.pagination.hasNext).to.equal(true);\nexpect(response.body.pagination.currentPageTotalCount).to.equal(2);\nexpect(response.body.pagination.totalCount).to.equal(3);\nexpect(response.body.pagination.currentPage).to.equal(0);",
              "err": {
                "message": "TypeError: Cannot read properties of null (reading 'id')",
                "estack": "TypeError: Cannot read properties of null (reading 'id')\n    at Context.<anonymous> (file:///opt/app/src/billPay/getSaveTrxnBillPay.test.js:256:28)",
                "diff": null
              },
              "uuid": "4817a180-f53b-4bb4-b58a-e7f8395fdfbf",
              "parentUUID": "eaba6d60-a922-45f0-a8e7-ad5f94cf8b0a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "49cf4702-f1ce-45de-b2af-3096c80c3938",
            "b1d0cef4-ebcc-4b18-a78c-5e2e7b1ca7ba",
            "bdf08904-0ef8-4f67-9b8b-13d01625a444",
            "4817a180-f53b-4bb4-b58a-e7f8395fdfbf"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ad827b45-add5-4d08-a584-b541e17a1579",
          "title": "API Check: Utility Bill Pay(POST)",
          "fullFile": "/opt/app/src/billPay/utilityBillPay.test.js",
          "file": "/src/billPay/utilityBillPay.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"API Check: Utility Bill Pay(POST)\"",
              "fullTitle": "API Check: Utility Bill Pay(POST) \"before all\" hook in \"API Check: Utility Bill Pay(POST)\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "75fe63e3-da19-43d4-9bb8-50259eac5c76",
              "parentUUID": "ad827b45-add5-4d08-a584-b541e17a1579",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"API Check: Utility Bill Pay(POST)\"",
              "fullTitle": "API Check: Utility Bill Pay(POST) \"before each\" hook in \"API Check: Utility Bill Pay(POST)\"",
              "timedOut": false,
              "duration": 146,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577237\",\n  },\n});\ntoken = generateUserToken(userId.id, \"01317577237\", \"USER\");\nconst chartOfAccounts = await createBasicChartOfAccounts();\ncustomer = chartOfAccounts.find(\n  (account) => account.code === \"customer-01\"\n);\nbiller = chartOfAccounts.find(\n  (account) => account.code === \"utility-sys-providers-01\"\n);\nconst transactionTypes = await setupTransactionTypes(chartOfAccounts);\nawait createUserAccounts(chartOfAccounts);\nsender = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\nreceiver = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"wasa-01\" },\n});\n \nconst type = await prismaAccounting.transactionType.findUnique({\n  where: { transactionCode: \"1004\" },\n});\nawait addInitialBalance(sender, 1000000);",
              "err": {},
              "uuid": "80163cff-f569-4185-8062-1883647ea3ea",
              "parentUUID": "ad827b45-add5-4d08-a584-b541e17a1579",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"API Check: Utility Bill Pay(POST)\"",
              "fullTitle": "API Check: Utility Bill Pay(POST) \"after all\" hook in \"API Check: Utility Bill Pay(POST)\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sender = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\nreceiver = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01999999999\" },\n});\nonholdUser = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577238\" }\n});\nmaxwallet = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577210\" }\n});\ndailyLimitAmountUser = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01715170020\" }\n});\nconst testConfig = {\n  baseUrl: ApiUrls.apiBaseUrl,\n  endpoint: ApiUrls.doUtilityBillPay,\n  token: token,\n  sender: sender,\n  receiver: receiver,\n  type: \"Top Up\",\n  database: [prismaApi.utilityBillingInfo],\n  transactionTypeCode: \"1004\",\n  provider: receiver.identifier,\n  userId: userId.id,\n  requestBody: {\n    billerId: 5,\n    amount: 200,\n    chargeFee: 5,\n    transactionTypeCode: \"1004\",\n    refId: \"11111\",\n  },\n  requestBodyForNotFullActiveUser: {\n    agentMobile: receiver.identifier,\n    amount: 20,\n    note: \"khabar er taka\",\n    transactionTypeCode: \"1004\",\n    referenceNo: \"11111\",\n  },\n  requestBodyForMinWalleAmount: {\n    billerId: 5,\n    amount: 20,\n    chargeFee: 5,\n    transactionTypeCode: \"1004\",\n    refId: \"11111\",\n  },\n  requestBodyForMaxWalleAmount: {\n    billerId: 5,\n    amount: 200,\n    chargeFee: 5,\n    transactionTypeCode: \"1004\",\n    refId: \"11111\",\n  },\n  requestBodyForDailyLimitAmount: {\n    billerId: 5,\n    amount: 200,\n    chargeFee: 5,\n    transactionTypeCode: \"1004\",\n    refId: \"11111\",\n  },\n  requestBodyForTypeMinAmount: {\n    billerId: 5,\n    amount: 5,\n    chargeFee: 1,\n    transactionTypeCode: \"1004\",\n    refId: \"11111\",\n  },\n  requestBodyForTypeMaxAmount: {\n    billerId: 5,\n    amount: 5001,\n    chargeFee: 5,\n    transactionTypeCode: \"1004\",\n    refId: \"11111\",\n  },\n}\nawait runTransactionTests(testConfig);\nawait prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "a63a2c07-3e9a-43af-b4f4-75e6e37aeb83",
              "parentUUID": "ad827b45-add5-4d08-a584-b541e17a1579",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 200 for successful bill pay and save this payment",
              "fullTitle": "API Check: Utility Bill Pay(POST) should return 200 for successful bill pay and save this payment",
              "timedOut": false,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec()\n  .post(`${ApiUrls.apiBaseUrl}${ApiUrls.doUtilityBillPay}`)\n  .withBearerToken(token)\n  .withJson({\n    billerId: 5,\n    amount: 200,\n    chargeFee: 5,\n    transactionTypeCode: \"1004\",\n    refId: \"11111\",\n    save: true\n  })\n  .expectStatus(200);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577237\",\n  },\n});\n\nawait checkSuccess({\n  groupId: \"topup\",\n  topic: \"utility_bill_payment_result\",\n  log: 'Bill Pay: From 01317577237 to wasa-01',\n  amount: 200,\n  callback: async () => {\n    const utilityTable = await prismaApi.utilityBillingInfo.findMany({\n      where: { userId: userId.id },\n    });\n    const saveUtility = await prismaApi.utilitySave.findMany({\n      where: { pay: utilityTable.id },\n    });\n    const transactionTypeId = await prismaAccounting.transactionType.findFirst({\n      where: {\n        transactionCode: \"1004\",\n      },\n    });\n    expect(saveUtility).to.have.lengthOf(1);\n    expect(saveUtility[0].transactionTypeId).to.equal(transactionTypeId.id);\n    expect(utilityTable[0].status).to.equal(\"SUCCESS\");\n    expect(utilityTable[0].userId).to.equal(userId.id);\n  }\n})",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 200\n\n500 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 200\n\n500 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 200\n"
              },
              "uuid": "103a4f84-b3e0-4de4-9cad-70e04390f6fc",
              "parentUUID": "ad827b45-add5-4d08-a584-b541e17a1579",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the biller id does not exists",
              "fullTitle": "API Check: Utility Bill Pay(POST) should return 400 if the biller id does not exists",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec()\n  .post(`${ApiUrls.apiBaseUrl}${ApiUrls.doTopUp}`)\n  .withBearerToken(token)\n  .withJson({\n    billerId: 9,\n    amount: 200,\n    chargeFee: 5,\n    transactionTypeCode: \"1004\",\n    refId: \"11111\",\n  })\n  .expectStatus(400);",
              "err": {},
              "uuid": "fac5cfee-0dd9-49cf-8c57-fd86801b6ea7",
              "parentUUID": "ad827b45-add5-4d08-a584-b541e17a1579",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fac5cfee-0dd9-49cf-8c57-fd86801b6ea7"
          ],
          "failures": [
            "103a4f84-b3e0-4de4-9cad-70e04390f6fc"
          ],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "9907a1cf-96a0-4fb2-80c9-faacf2fb78e2",
          "title": "API Check: Bulk Disbursement(POST)",
          "fullFile": "/opt/app/src/bulkDisbursement/bulkDisbursement.test.js",
          "file": "/src/bulkDisbursement/bulkDisbursement.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"API Check: Bulk Disbursement(POST)\"",
              "fullTitle": "API Check: Bulk Disbursement(POST) \"before all\" hook in \"API Check: Bulk Disbursement(POST)\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "d8f53f62-bacc-48c0-b341-145820cb6f2c",
              "parentUUID": "9907a1cf-96a0-4fb2-80c9-faacf2fb78e2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"API Check: Bulk Disbursement(POST)\"",
              "fullTitle": "API Check: Bulk Disbursement(POST) \"before each\" hook in \"API Check: Bulk Disbursement(POST)\"",
              "timedOut": false,
              "duration": 151,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01999999999\",\n  },\n});\ntoken = generateUserToken(userId.id, \"01999999999\", \"MERCHANT\");\nconst chartOfAccounts = await createBasicChartOfAccounts();\ncustomer = chartOfAccounts.find(\n  (account) => account.code === \"customer-01\"\n);\ntopUpProvider = chartOfAccounts.find(\n  (account) => account.code === \"top-up-providers-01\"\n);\nconst transactionTypes = await setupTransactionTypes(chartOfAccounts);\nawait createUserAccounts(chartOfAccounts);\nsender = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01999999999\" },\n});\nreceiver1 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01711106485\" },\n});\nreceiver2 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\nconst type = await prismaAccounting.transactionType.findUnique({\n  where: { transactionCode: \"1001\" },\n});\nawait addInitialBalance(sender, 1000000);",
              "err": {},
              "uuid": "fda83eab-317f-4af7-a024-92257abf64a1",
              "parentUUID": "9907a1cf-96a0-4fb2-80c9-faacf2fb78e2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"API Check: Bulk Disbursement(POST)\"",
              "fullTitle": "API Check: Bulk Disbursement(POST) \"after all\" hook in \"API Check: Bulk Disbursement(POST)\"",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sender = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01999999999\" },\n});\nreceiver1 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01711106485\" },\n});\nreceiver2 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\nonholdUser = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577238\" }\n});\nmaxwallet = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577210\" }\n});\ndailyLimitAmountUser = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01715170020\" }\n});\nconst testConfig = {\n  baseUrl: ApiUrls.apiBaseUrl,\n  endpoint: ApiUrls.doBulkDisbursement,\n  token: token,\n  sender: sender,\n  receiver1: receiver1,\n  receiver2: receiver2,\n  type: \"Top Up\",\n  database: [prismaApi.bulkDisbursement],\n  transactionTypeCode: \"bulk-disbursement-01\",\n  userId: userId.id,\n  requestBody: {\n    bulks: [\n      {\n        toAccount: receiver1.identifier,\n        amount: 20\n      },\n      {\n        toAccount: receiver2.identifier,\n        amount: 20\n      }\n    ],\n    transactionTypeCode: \"bulk-disbursement-001\"\n  },\n  requestBodyForNotFullActiveUser: {\n    bulks: [\n      {\n        toAccount: receiver1.identifier,\n        amount: 200\n      },\n      {\n        toAccount: receiver2.identifier,\n        amount: 200\n      }\n    ],\n    transactionTypeCode: \"bulk-disbursement-001\"\n  },\n  requestBodyForMinWalleAmount: {\n    bulks: [\n      {\n        toAccount: receiver1.identifier,\n        amount: 40\n      },\n      {\n        toAccount: receiver2.identifier,\n        amount: 40\n      }\n    ],\n    transactionTypeCode: \"bulk-disbursement-001\"\n  },\n  requestBodyForMaxWalleAmount: {\n    bulks: [\n      {\n        toAccount: receiver1.identifier,\n        amount: 1001\n      },\n      {\n        toAccount: receiver2.identifier,\n        amount: 1001\n      }\n    ],\n    transactionTypeCode: \"bulk-disbursement-001\"\n  },\n  requestBodyForDailyLimitAmount: {\n    bulks: [\n      {\n        toAccount: receiver1.identifier,\n        amount: 100\n      },\n      {\n        toAccount: receiver2.identifier,\n        amount: 100\n      }\n    ],\n    transactionTypeCode: \"bulk-disbursement-001\"\n  },\n  requestBodyForTypeMinAmount: {\n    bulks: [\n      {\n        toAccount: receiver1.identifier,\n        amount: 5\n      },\n      {\n        toAccount: receiver2.identifier,\n        amount: 5\n      }\n    ],\n    transactionTypeCode: \"bulk-disbursement-001\"\n  },\n  requestBodyForTypeMaxAmount: {\n    bulks: [\n      {\n        toAccount: receiver1.identifier,\n        amount: 1000000\n      },\n      {\n        toAccount: receiver2.identifier,\n        amount: 1000000\n      }\n    ],\n    transactionTypeCode: \"bulk-disbursement-001\"\n  },\n}\n// await runMerchantTransactionTests(testConfig);\nawait prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "186de1bb-fe0e-4e58-91f0-39434720946e",
              "parentUUID": "9907a1cf-96a0-4fb2-80c9-faacf2fb78e2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 200 for successful bulk disbursement",
              "fullTitle": "API Check: Bulk Disbursement(POST) should return 200 for successful bulk disbursement",
              "timedOut": false,
              "duration": 1082,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec().withMethod(\"GET\")\n  .post(`${ApiUrls.apiBaseUrl}${ApiUrls.doBulkDisbursement}`)\n  .withBearerToken(token)\n  .withJson({\n    bulks: [\n      {\n        toAccount: receiver1.identifier,\n        amount: 50\n      },\n      {\n        toAccount: receiver2.identifier,\n        amount: 60\n      }\n    ],\n    transactionTypeCode: \"bulk-disbursement-001\"\n  })\n  .expectStatus(200);\n// await checkSuccessForMerchant({\n//   groupId: \"topup\",\n//   topic: \"bulk_disbursement_trxn_result\",\n//   log: 'Bulk Disbursement: From 01999999999 to 01711106485',\n//   amount1: 50,\n//   amount2: 60,\n//   callback: async () => {\n//   }\n// })",
              "err": {},
              "uuid": "d10947cc-c41e-4ed2-a9e0-0dceb62cc536",
              "parentUUID": "9907a1cf-96a0-4fb2-80c9-faacf2fb78e2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d10947cc-c41e-4ed2-a9e0-0dceb62cc536"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1082,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "fbd881dd-546d-4999-9649-93687e6846aa",
          "title": "API Check: Fund Transfer(POST)",
          "fullFile": "/opt/app/src/fundTransfer/fundTransfer.test.js",
          "file": "/src/fundTransfer/fundTransfer.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"API Check: Fund Transfer(POST)\"",
              "fullTitle": "API Check: Fund Transfer(POST) \"before all\" hook in \"API Check: Fund Transfer(POST)\"",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "d13e199e-1509-497b-b2c7-bf1909506780",
              "parentUUID": "fbd881dd-546d-4999-9649-93687e6846aa",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"API Check: Fund Transfer(POST)\"",
              "fullTitle": "API Check: Fund Transfer(POST) \"before each\" hook in \"API Check: Fund Transfer(POST)\"",
              "timedOut": false,
              "duration": 146,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577237\",\n  },\n});\ntoken = generateUserToken(userId.id, \"01317577237\", \"USER\");\nconst chartOfAccounts = await createBasicChartOfAccounts();\ncustomer = chartOfAccounts.find(\n  (account) => account.code === \"customer-01\"\n);\ntopUpProvider = chartOfAccounts.find(\n  (account) => account.code === \"top-up-providers-01\"\n);\nconst transactionTypes = await setupTransactionTypes(chartOfAccounts);\nawait createUserAccounts(chartOfAccounts);\nsender = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\nreceiver = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01711106485\" },\n});\ngp = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"gp-wallet-01\" },\n});\nteletalk = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"teletalk-wallet-01\" },\n});\nbanglalink = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"bl-wallet-01\" },\n});\nconst type = await prismaAccounting.transactionType.findUnique({\n  where: { transactionCode: \"1001\" },\n});\nawait addInitialBalance(sender, 1000000);",
              "err": {},
              "uuid": "153e41be-e22c-4c35-879d-e8a5421ba9fd",
              "parentUUID": "fbd881dd-546d-4999-9649-93687e6846aa",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"API Check: Fund Transfer(POST)\"",
              "fullTitle": "API Check: Fund Transfer(POST) \"after all\" hook in \"API Check: Fund Transfer(POST)\"",
              "timedOut": false,
              "duration": 149,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nconst chartOfAccounts = await createBasicChartOfAccounts();\nconst transactionTypes = await setupTransactionTypes(chartOfAccounts);\nawait createUserAccounts(chartOfAccounts);\nsender = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\nreceiver = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01711106485\" },\n});\nonholdUser = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577238\" }\n});\nmaxwallet = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577210\" }\n});\ndailyLimitAmountUser = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01715170020\" }\n});\nconst testConfig = {\n  baseUrl: ApiUrls.apiBaseUrl,\n  endpoint: ApiUrls.doFundTransfer,\n  token: token,\n  sender: sender,\n  receiver: receiver,\n  type: \"Top Up\",\n  database: [prismaApi.fundTransferLogs],\n  transactionTypeCode: \"1003\",\n  userId: userId.id,\n  requestBody: {\n    accountNumber: \"123131324234\",\n    accountName: \"Jarin\",\n    branchName: \"Kalabagan\",\n    districtName: \"Dhaka\",\n    transactionCode: \"1003\",\n    accountType: \"BANK\",\n    distributorId: 1,\n    amount: 50,\n  },\n  requestBodyForNotFullActiveUser: {\n    accountNumber: \"123131324234\",\n    accountName: \"Jarin\",\n    branchName: \"Kalabagan\",\n    districtName: \"Dhaka\",\n    transactionCode: \"1003\",\n    accountType: \"BANK\",\n    distributorId: 1,\n    amount: 50,\n  },\n  requestBodyForMinWalleAmount: {\n    accountNumber: \"123131324234\",\n    accountName: \"requestBodyForMinWalleAmount\",\n    branchName: \"Kalabagan\",\n    districtName: \"Dhaka\",\n    transactionCode: \"1003\",\n    accountType: \"BANK\",\n    distributorId: 1,\n    amount: 9,\n  },\n  requestBodyForMaxWalleAmount: {\n    accountNumber: \"123131324234\",\n    accountName: \"requestBodyForMaxWalleAmount\",\n    branchName: \"Kalabagan\",\n    districtName: \"Dhaka\",\n    transactionCode: \"1003\",\n    accountType: \"BANK\",\n    distributorId: 1,\n    amount: 1001,\n  },\n  requestBodyForDailyLimitAmount: {\n    amount: 100,\n    accountNumber: \"123131324234\",\n    accountName: \"requestBodyForMaxWalleAmount\",\n    branchName: \"Kalabagan\",\n    districtName: \"Dhaka\",\n    transactionCode: \"1003\",\n    accountType: \"BANK\",\n    distributorId: 1,\n  },\n  requestBodyForTypeMinAmount: {\n    amount: 5,\n    accountNumber: \"123131324234\",\n    accountName: \"requestBodyForMaxWalleAmount\",\n    branchName: \"Kalabagan\",\n    districtName: \"Dhaka\",\n    transactionCode: \"1003\",\n    accountType: \"BANK\",\n    distributorId: 1,\n  },\n  requestBodyForTypeMaxAmount: {\n    amount: 1000000,\n    accountNumber: \"123131324234\",\n    accountName: \"requestBodyForMaxWalleAmount\",\n    branchName: \"Kalabagan\",\n    districtName: \"Dhaka\",\n    transactionCode: \"1003\",\n    accountType: \"BANK\",\n    distributorId: 1,\n  },\n}\nawait runTransactionTests(testConfig);\nawait prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "03485c02-e2c7-4037-85eb-09eaaf561530",
              "parentUUID": "fbd881dd-546d-4999-9649-93687e6846aa",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 200 for successful fund transfer to bank and save the transaction",
              "fullTitle": "API Check: Fund Transfer(POST) should return 200 for successful fund transfer to bank and save the transaction",
              "timedOut": false,
              "duration": 10,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec()\n  .post(`${ApiUrls.apiBaseUrl}${ApiUrls.doFundTransfer}`)\n  .withBearerToken(token)\n  .withJson({\n    accountNumber: \"123131324234\",\n    accountName: \"Jarin\",\n    branchName: \"Kalabagan\",\n    districtName: \"Dhaka\",\n    transactionCode: \"1003\",\n    accountType: \"BANK\",\n    distributorId: 1,\n    amount: 50,\n    save: true\n  })\n  .expectStatus(200);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577237\",\n  },\n});\nawait checkSuccess({\n  groupId: \"topup\",\n  topic: \"fund_transfer_bank_card_mfs_result\",\n  log: 'Fund Transfer: From 01317577237 to city-bank-tcs-01',\n  amount: 50,\n  callback: async () => {\n    const fundTransferTable = await prismaApi.fundTransferLogs.findMany({\n      where: { userId: userId.id },\n    });\n    const saveFundTransfer = await prismaApi.fundTransferSave.findMany({\n      where: { fundTransferId: fundTransferTable.id },\n    });\n    expect(saveFundTransfer).to.have.lengthOf(1);\n    expect(saveFundTransfer[0].accountNumber).to.include(\"123131324234\");\n    expect(saveFundTransfer[0].accountName).to.equal(\"Jarin\");\n    expect(saveFundTransfer[0].branchName).to.equal(\"Kalabagan\");\n    expect(saveFundTransfer[0].districtName).to.equal(\"Dhaka\");\n    expect(saveFundTransfer[0].accountType).to.equal(\"BANK\");\n    expect(fundTransferTable[0].status).to.equal(\"SUCCESS\");\n    expect(fundTransferTable[0].userId).to.equal(userId.id);\n  }\n})",
              "err": {
                "message": "AssertionError: HTTP status 400 !== 200\n\n400 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 400 !== 200\n\n400 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "0b1f97dc-0c4f-4c03-87d2-ed5e3c769801",
              "parentUUID": "fbd881dd-546d-4999-9649-93687e6846aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 for successful fund transfer to card and save the transaction",
              "fullTitle": "API Check: Fund Transfer(POST) should return 200 for successful fund transfer to card and save the transaction",
              "timedOut": false,
              "duration": 11,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec()\n  .post(`${ApiUrls.apiBaseUrl}${ApiUrls.doFundTransfer}`)\n  .withBearerToken(token)\n  .withJson({\n    cardNumber: \"123131324234\",\n    accountName: \"Jarin\",\n    branchName: \"Kalabagan\",\n    districtName: \"Dhaka\",\n    transactionCode: \"1003\",\n    accountType: \"CARD\",\n    cardType: \"VISA\",\n    distributorId: 2,\n    amount: 50,\n  })\n  .expectStatus(200);\n  await checkSuccess({\n    groupId: \"topup\",\n    topic: \"fund_transfer_bank_card_mfs_result\",\n    log: 'Fund Transfer: From 01317577237 to visa-card-tcs-01',\n    amount: 50,\n    callback: async () => {\n  \n      const fundTransferTable = await prismaApi.fundTransferLogs.findMany({\n        where: { userId: userId.id },\n      });\n  \n      const saveFundTransfer = await prismaApi.fundTransferSave.findMany({\n        where: { fundTransferId: fundTransferTable.id },\n      });\n      expect(saveFundTransfer).to.have.lengthOf(1);\n  \n      expect(fundTransferTable[0].status).to.equal(\"SUCCESS\");\n  \n      expect(fundTransferTable[0].userId).to.equal(userId.id);\n    }\n  })",
              "err": {
                "message": "AssertionError: HTTP status 400 !== 200\n\n400 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 400 !== 200\n\n400 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "3a5d336b-e6b4-42af-abf2-cdb9c60d3569",
              "parentUUID": "fbd881dd-546d-4999-9649-93687e6846aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 for successful fund transfer to mfs and save the transaction",
              "fullTitle": "API Check: Fund Transfer(POST) should return 200 for successful fund transfer to mfs and save the transaction",
              "timedOut": false,
              "duration": 9,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec()\n  .post(`${ApiUrls.apiBaseUrl}${ApiUrls.doFundTransfer}`)\n  .withBearerToken(token)\n  .withJson({\n    transactionCode: \"1003\",\n    accountType: \"MFS\",\n    distributorId: 3,\n    amount: 50,\n    phoneNumber: \"01711106485\",\n    mfsType: \"BKASH\",\n  })\n  .expectStatus(200);\n  await checkSuccess({\n    groupId: \"topup\",\n    topic: \"fund_transfer_bank_card_mfs_result\",\n    log: 'Fund Transfer: From 01317577237 to mfs-bkash-tcs-01',\n    amount: 50,\n    callback: async () => {\n  \n      const fundTransferTable = await prismaApi.fundTransferLogs.findMany({\n        where: { userId: userId.id },\n      });\n  \n      const saveFundTransfer = await prismaApi.fundTransferSave.findMany({\n        where: { fundTransferId: fundTransferTable.id },\n      });\n      expect(saveFundTransfer).to.have.lengthOf(1);\n  \n      expect(fundTransferTable[0].status).to.equal(\"SUCCESS\");\n  \n      expect(fundTransferTable[0].userId).to.equal(userId.id);\n    }\n  })",
              "err": {
                "message": "AssertionError: HTTP status 400 !== 200\n\n400 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 400 !== 200\n\n400 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "1689cfda-d589-4ee9-b7f1-1d4510f0e91c",
              "parentUUID": "fbd881dd-546d-4999-9649-93687e6846aa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "0b1f97dc-0c4f-4c03-87d2-ed5e3c769801",
            "3a5d336b-e6b4-42af-abf2-cdb9c60d3569",
            "1689cfda-d589-4ee9-b7f1-1d4510f0e91c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 30,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "71c272dd-ccd6-4af4-93ec-94e650f836a1",
          "title": "Get Saved Transaction After Fund Transfer",
          "fullFile": "/opt/app/src/fundTransfer/getSaveTrxnFundTransfer.test.js",
          "file": "/src/fundTransfer/getSaveTrxnFundTransfer.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Get Saved Transaction After Fund Transfer\"",
              "fullTitle": "Get Saved Transaction After Fund Transfer \"before all\" hook in \"Get Saved Transaction After Fund Transfer\"",
              "timedOut": false,
              "duration": 33,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "e7b5d9a0-22f8-48f0-aaa6-f833a9964fde",
              "parentUUID": "71c272dd-ccd6-4af4-93ec-94e650f836a1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Get Saved Transaction After Fund Transfer\"",
              "fullTitle": "Get Saved Transaction After Fund Transfer \"before each\" hook in \"Get Saved Transaction After Fund Transfer\"",
              "timedOut": false,
              "duration": 139,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nuserId1 = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577237\",\n  },\n});\nuserId2 = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01711106485\",\n  },\n});\ntokenUser1 = generateUserToken(userId1.id, \"01317577237\", \"USER\");\ntokenUser2 = generateUserToken(userId2.id, \"01711106485\", \"USER\");\nconst chartOfAccounts = await createBasicChartOfAccounts();\ncustomer = chartOfAccounts.find(\n  (account) => account.code === \"customer-01\"\n);\nawait setupTransactionTypes(chartOfAccounts);\nconst fundTransferType = await prismaAccounting.transactionType.findUnique({\n  where: { transactionCode: \"1003\" },\n});\nfundTransferTypeId = fundTransferType.id;\nawait createUserAccounts(chartOfAccounts);\ncustomerAccount1 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\ndistributorAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"city-tcs-01\" },\n});\n\n\nawait addInitialBalance(customerAccount1, 100000);",
              "err": {},
              "uuid": "2987df7c-f9dc-43c2-8bfc-f65b3b626c9f",
              "parentUUID": "71c272dd-ccd6-4af4-93ec-94e650f836a1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Get Saved Transaction After Fund Transfer\"",
              "fullTitle": "Get Saved Transaction After Fund Transfer \"after all\" hook in \"Get Saved Transaction After Fund Transfer\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$disconnect();\nawait prismaApi.$disconnect();\nawait prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "5838f9b1-5a36-447a-97b0-b7b6bac10318",
              "parentUUID": "71c272dd-ccd6-4af4-93ec-94e650f836a1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get saved fund Transfer transaction list",
              "fullTitle": "Get Saved Transaction After Fund Transfer should get saved fund Transfer transaction list",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await insertFundTransferSavedTransaction({\n  accountName: \"John Doe\",\n  accountNumber: \"1234567890\",\n  accountType: \"BANK\",\n  amount: 1000,\n  bankName: \"Example Bank\",\n  branchName: \"Main Branch\",\n  cardType: \"VISA\",\n  districtName: \"Central District\",\n  toAccount: \"city-tcs-01\",\n  fromAccount: \"01317577237\",\n  userId: userId1.id,\n});\nawait pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.saveTrxnFundTransfer}`)\n  .expectStatus(200);\nconst savedFundTransferTrxns = await prismaApi.fundTransferSave.findMany({});\nexpect(savedFundTransferTrxns).to.have.lengthOf(1);\nexpect(savedFundTransferTrxns[0].amount.toString()).to.equal(\"1000\");\nexpect(savedFundTransferTrxns[0].isSave).to.be.true;\nexpect(savedFundTransferTrxns[0].toAccount).to.equal(\"city-tcs-01\");\nexpect(savedFundTransferTrxns[0].fromAccount).to.equal(\"01317577237\");\nexpect(savedFundTransferTrxns[0].type).to.equal(\"BANK\");\nexpect(savedFundTransferTrxns[0].userId.toString()).to.equal(\n  userId1.id.toString()\n);\nexpect(savedFundTransferTrxns[0].accountName).to.equal(\"John Doe\");\nexpect(savedFundTransferTrxns[0].accountNumber).to.equal(\"1234567890\");\nexpect(savedFundTransferTrxns[0].bankName).to.equal(\"Example Bank\");\nexpect(savedFundTransferTrxns[0].branchName).to.equal(\"Main Branch\");\nexpect(savedFundTransferTrxns[0].cardType).to.equal(\"VISA\");",
              "err": {
                "message": "TypeError: Cannot read properties of null (reading 'id')",
                "estack": "TypeError: Cannot read properties of null (reading 'id')\n    at insertFundTransferSavedTransaction (file:///opt/app/src/fundTransfer/getSaveTrxnFundTransfer.test.js:106:41)\n    at Context.<anonymous> (file:///opt/app/src/fundTransfer/getSaveTrxnFundTransfer.test.js:151:11)",
                "diff": null
              },
              "uuid": "e23cf49d-73b4-420c-aa2b-201a88aa4339",
              "parentUUID": "71c272dd-ccd6-4af4-93ec-94e650f836a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the first add money transaction of bank account even after multiple transactions with the same bank account",
              "fullTitle": "Get Saved Transaction After Fund Transfer should show the first add money transaction of bank account even after multiple transactions with the same bank account",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await insertFundTransferSavedTransaction({\n    accountName: \"John Doe\",\n    accountNumber: \"1234567890\",\n    accountType: \"BANK\",\n    amount: 1000,\n    bankName: \"Example Bank\",\n    branchName: \"Main Branch\",\n    cardType: \"VISA\",\n    districtName: \"Central District\",\n    toAccount: \"city-tcs-01\",\n    fromAccount: \"01317577237\",\n    userId: userId1.id,\n  });\n  \n  await insertFundTransferSavedTransaction({\n    accountName: \"John Doe\",\n    accountNumber: \"1234567890\",\n    accountType: \"BANK\",\n    amount: 2000,\n    bankName: \"Example Bank\",\n    branchName: \"Main Branch\",\n    cardType: \"VISA\",\n    districtName: \"Central District\",\n    toAccount: \"city-tcs-01\",\n    fromAccount: \"01317577237\",\n    userId: userId1.id,\n  });\n  \nawait pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.saveTrxnFundTransfer}`)\n  .expectStatus(200)\n  .returns(\"body\");\nconst savedFundTransferTrxns = await prismaApi.fundTransferSave.findMany({});\nexpect(savedFundTransferTrxns).to.have.lengthOf(1);\nexpect(savedFundTransferTrxns[0].amount.toString()).to.equal(\"1000\");\nexpect(savedFundTransferTrxns[0].accountNumber).to.equal(\"1234567890\");",
              "err": {
                "message": "TypeError: Cannot read properties of null (reading 'id')",
                "estack": "TypeError: Cannot read properties of null (reading 'id')\n    at insertFundTransferSavedTransaction (file:///opt/app/src/fundTransfer/getSaveTrxnFundTransfer.test.js:106:41)\n    at Context.<anonymous> (file:///opt/app/src/fundTransfer/getSaveTrxnFundTransfer.test.js:191:11)",
                "diff": null
              },
              "uuid": "5ac5c480-2a9b-4665-b03c-bdd99b7844cb",
              "parentUUID": "71c272dd-ccd6-4af4-93ec-94e650f836a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should save only one add money transaction per unique bank account",
              "fullTitle": "Get Saved Transaction After Fund Transfer should save only one add money transaction per unique bank account",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const bankAccounts = [\n  \"1234567891\",\n  \"1234567892\",\n  \"1234567893\",\n  \"1234567894\",\n  \"1234567895\",\n];\nfor (let i = 0; i < 10; i++) {\n  await insertFundTransferSavedTransaction({\n    accountName: `John Doe ${i % 5}`,\n    accountNumber: bankAccounts[i % 5],\n    accountType: \"BANK\",\n    amount: 2222,\n    bankName: \"Example Bank\",\n    branchName: \"Main Branch\",\n    cardType: \"VISA\",\n    districtName: \"Central District\",\n    toAccount: \"city-tcs-01\",\n    fromAccount: \"01317577237\",\n    userId: userId1.id,\n  });\n}\nawait pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.saveTrxnFundTransfer}`)\n  .expectStatus(200)\n  .returns(\"body\");\nconst savedFundTransferTrxns = await prismaApi.fundTransferSave.findMany({});\nexpect(savedFundTransferTrxns).to.have.lengthOf(5);\nconst savedAccountNumbers = savedFundTransferTrxns.map(\n  (txn) => txn.accountNumber\n);\nexpect(savedAccountNumbers).to.have.members(bankAccounts);",
              "err": {
                "message": "TypeError: Cannot read properties of null (reading 'id')",
                "estack": "TypeError: Cannot read properties of null (reading 'id')\n    at insertFundTransferSavedTransaction (file:///opt/app/src/fundTransfer/getSaveTrxnFundTransfer.test.js:106:41)\n    at Context.<anonymous> (file:///opt/app/src/fundTransfer/getSaveTrxnFundTransfer.test.js:246:13)",
                "diff": null
              },
              "uuid": "480401c1-0a6b-4374-97cc-ce6c76f534e4",
              "parentUUID": "71c272dd-ccd6-4af4-93ec-94e650f836a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return saved add money transaction list with correct pagination and size",
              "fullTitle": "Get Saved Transaction After Fund Transfer should return saved add money transaction list with correct pagination and size",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const bankAccounts = [\n  \"1234567891\",\n  \"1234567892\",\n  \"1234567893\",\n  \"1234567894\",\n  \"1234567895\",\n];\nfor (let i = 0; i < 10; i++) {\n    await insertFundTransferSavedTransaction({\n        accountName: `John Doe ${i % 5}`,\n        accountNumber: bankAccounts[i % 5],\n        accountType: \"BANK\",\n        amount: 2222,\n        bankName: \"Example Bank\",\n        branchName: \"Main Branch\",\n        cardType: \"VISA\",\n        districtName: \"Central District\",\n        toAccount: \"city-tcs-01\",\n        fromAccount: \"01317577237\",\n        userId: userId1.id,\n      });\n}\nconst response = await pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"GET\")\n  .withPath(\n    `${ApiUrls.apiBaseUrl}${ApiUrls.saveTrxnFundTransfer}?page=0&size=3`\n  )\n  .expectStatus(200);\n  console.log(response.body);\nexpect(response.body)\n  .to.have.property(\"saveTransactions\")\n  .that.is.an(\"array\");\nexpect(response.body.saveTransactions).to.have.lengthOf(3);\nexpect(response.body.pagination.hasNext).to.equal(true);\nexpect(response.body.pagination.currentPageTotalCount).to.equal(3);\nexpect(response.body.pagination.totalCount).to.equal(5);\nexpect(response.body.pagination.currentPage).to.equal(0);",
              "err": {
                "message": "TypeError: Cannot read properties of null (reading 'id')",
                "estack": "TypeError: Cannot read properties of null (reading 'id')\n    at insertFundTransferSavedTransaction (file:///opt/app/src/fundTransfer/getSaveTrxnFundTransfer.test.js:106:41)\n    at Context.<anonymous> (file:///opt/app/src/fundTransfer/getSaveTrxnFundTransfer.test.js:288:15)",
                "diff": null
              },
              "uuid": "43464f21-7217-43d0-a886-da469bc2138b",
              "parentUUID": "71c272dd-ccd6-4af4-93ec-94e650f836a1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e23cf49d-73b4-420c-aa2b-201a88aa4339",
            "5ac5c480-2a9b-4665-b03c-bdd99b7844cb",
            "480401c1-0a6b-4374-97cc-ce6c76f534e4",
            "43464f21-7217-43d0-a886-da469bc2138b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "195ec4f1-f8e8-46fe-850e-690d459e14c8",
          "title": "Get Saved Transaction After Send Money",
          "fullFile": "/opt/app/src/makePayment/getSaveTrxnMakePayment.test.js",
          "file": "/src/makePayment/getSaveTrxnMakePayment.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Get Saved Transaction After Send Money\"",
              "fullTitle": "Get Saved Transaction After Send Money \"before all\" hook in \"Get Saved Transaction After Send Money\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "b1d55eec-e30f-4096-8ba9-464568dd02b3",
              "parentUUID": "195ec4f1-f8e8-46fe-850e-690d459e14c8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Get Saved Transaction After Send Money\"",
              "fullTitle": "Get Saved Transaction After Send Money \"before each\" hook in \"Get Saved Transaction After Send Money\"",
              "timedOut": false,
              "duration": 220,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nuserId1 = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577237\",\n  },\n});\nuserId2 = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01711106485\",\n  },\n});\ntokenUser1 = generateUserToken(userId1.id, \"01317577237\", \"USER\");\ntokenUser2 = generateUserToken(userId2.id, \"01711106485\", \"USER\");\nconst chartOfAccounts = await createBasicChartOfAccounts();\ncustomer = chartOfAccounts.find(\n  (account) => account.code === \"customer-01\"\n);\nawait setupTransactionTypes(chartOfAccounts);\ntype = await prismaAccounting.transactionType.findUnique({\n  where: { transactionCode: \"make-payment-001\" },\n});\ntrxnTypeId = type.id;\nawait createUserAccounts(chartOfAccounts);\ncustomerAccount1 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\nmerchantAccount1 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01999999999\" },\n});\nmerchantAccount2 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01999999888\" },\n});\nmerchantAccount3 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01999999880\" },\n});\nmerchantAccount4 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01999999777\" },\n});\nawait addInitialBalance(customerAccount1, 50000);",
              "err": {},
              "uuid": "151f75a0-8e64-4d53-91e2-c6b280c0d0a3",
              "parentUUID": "195ec4f1-f8e8-46fe-850e-690d459e14c8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Get Saved Transaction After Send Money\"",
              "fullTitle": "Get Saved Transaction After Send Money \"after all\" hook in \"Get Saved Transaction After Send Money\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$disconnect();\nawait prismaApi.$disconnect();\nawait prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "f29b0d0b-0adf-4c49-8af8-c6bf85636616",
              "parentUUID": "195ec4f1-f8e8-46fe-850e-690d459e14c8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get saved transaction list for Payment",
              "fullTitle": "Get Saved Transaction After Send Money should get saved transaction list for Payment",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await insertSavedTransaction({\n  fromAccount: customerAccount1,\n  toAccount: merchantAccount1,\n  transactionTypeId: trxnTypeId,\n  transactionTypeCode: \"make-payment-001\",\n  amount: 100,\n  agentMobile: merchantAccount1.identifier,\n});\nawait pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.savetrxnPayment}`)\n  .expectStatus(200);\nconst paymentID = await prismaApi.payment.findFirst({\n  where: {\n    agentMobile: merchantAccount1.identifier,\n  },\n});\nconst saveTrxnMakePayment = await prismaApi.paymentSave.findMany({});\nexpect(saveTrxnMakePayment).to.have.lengthOf(1);\nexpect(saveTrxnMakePayment[0].amount.toString()).to.equal(\"100\");\nexpect(saveTrxnMakePayment[0].save).to.be.true;\nexpect(saveTrxnMakePayment[0].fromAccount).to.equal(\"01317577237\");\nexpect(saveTrxnMakePayment[0].toAccount).to.equal(\"01999999999\");\nexpect(saveTrxnMakePayment[0].transactionTypeCode).to.equal(\n  \"make-payment-001\"\n);\nexpect(saveTrxnMakePayment[0].transactionTypeId).to.equal(trxnTypeId);\nexpect(saveTrxnMakePayment[0].createdAt).to.not.be.null;\nexpect(saveTrxnMakePayment[0].updatedAt).to.not.be.null;\nexpect(saveTrxnMakePayment[0].agentMobile).to.equal(\"01999999999\");\nexpect(saveTrxnMakePayment[0].paymentId).to.equal(paymentID.id);",
              "err": {},
              "uuid": "24123a98-21f1-4488-a7db-98750251ff47",
              "parentUUID": "195ec4f1-f8e8-46fe-850e-690d459e14c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the first transaction of ToAccount even after multiple transactions to the same account",
              "fullTitle": "Get Saved Transaction After Send Money should show the first transaction of ToAccount even after multiple transactions to the same account",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await insertSavedTransaction({\n  fromAccount: customerAccount1,\n  toAccount: merchantAccount1,\n  transactionTypeId: trxnTypeId,\n  transactionTypeCode: \"make-payment-001\",\n  amount: 100,\n  agentMobile: merchantAccount1.identifier,\n});\nawait insertSavedTransaction({\n  fromAccount: customerAccount1,\n  toAccount: merchantAccount1,\n  transactionTypeId: trxnTypeId,\n  transactionTypeCode: \"make-payment-001\",\n  amount: 500,\n  agentMobile: merchantAccount1.identifier,\n});\nawait pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.savetrxnPayment}`)\n  .expectStatus(200);\nconst paymentID = await prismaApi.payment.findFirst({\n  where: {\n    agentMobile: merchantAccount1.identifier,\n  },\n});\nconst saveTrxnMakePayment = await prismaApi.paymentSave.findMany({});\nexpect(saveTrxnMakePayment).to.have.lengthOf(1);\nexpect(saveTrxnMakePayment[0].amount.toString()).to.equal(\"100\");\nexpect(saveTrxnMakePayment[0].paymentId).to.equal(paymentID.id);",
              "err": {},
              "uuid": "15551efb-bc34-4095-ad5a-e283e38ea7bb",
              "parentUUID": "195ec4f1-f8e8-46fe-850e-690d459e14c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should save only one transaction per unique toAccount",
              "fullTitle": "Get Saved Transaction After Send Money should save only one transaction per unique toAccount",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueMerchantAccounts = [\n  { identifier: \"01999999999\" },\n  { identifier: \"01999999888\" },\n  { identifier: \"01999999880\" },\n  { identifier: \"01999999777\" },\n];\nfor (let i = 0; i < 10; i++) {\n  await insertSavedTransaction({\n    fromAccount: customerAccount1,\n    toAccount: uniqueMerchantAccounts[i % 4],\n    transactionTypeId: trxnTypeId,\n    transactionTypeCode: \"make-payment-001\",\n    amount: 100,\n    agentMobile: merchantAccount1.identifier,\n  });\n}\nawait pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.savetrxnPayment}`)\n  .expectStatus(200);\nconst savedTransactions = await prismaApi.paymentSave.findMany({}); \nexpect(savedTransactions).to.have.lengthOf(4);\nconst savedToAccounts = savedTransactions.map((txn) => txn.toAccount);\nconst uniqueIdentifiers = uniqueMerchantAccounts.map(acc => acc.identifier);\nexpect(savedToAccounts).to.have.members(uniqueIdentifiers);",
              "err": {},
              "uuid": "6c67d2f8-acf1-40c6-a3c3-e0685b843aa6",
              "parentUUID": "195ec4f1-f8e8-46fe-850e-690d459e14c8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct pagination and size",
              "fullTitle": "Get Saved Transaction After Send Money should return correct pagination and size",
              "timedOut": false,
              "duration": 130,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const uniqueMerchantAccounts = [\n  { identifier: \"01999999999\" },\n  { identifier: \"01999999888\" },\n  { identifier: \"01999999880\" },\n  { identifier: \"01999999777\" },\n];\nfor (let i = 0; i < 10; i++) {\n  await insertSavedTransaction({\n    fromAccount: customerAccount1,\n    toAccount: uniqueMerchantAccounts[i % 4],\n    transactionTypeId: trxnTypeId,\n    transactionTypeCode: \"make-payment-001\",\n    amount: 100,\n    agentMobile: merchantAccount1.identifier,\n  });\n}\nconst response = await pactum\n.spec()\n.withBearerToken(tokenUser1)\n.withMethod(\"GET\")\n.withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.savetrxnPayment}?page=0&size=3`)\n.expectStatus(200);\n\nexpect(response.body)\n  .to.have.property(\"saveTransactions\")\n  .that.is.an(\"array\");\nexpect(response.body.saveTransactions).to.have.lengthOf(3);\nexpect(response.body.saveTransactions[0].toAccount).to.equal(\"01999999777\");\nexpect(response.body.saveTransactions[1].toAccount).to.equal(\"01999999880\");\nexpect(response.body.saveTransactions[2].toAccount).to.equal(\"01999999888\");\nexpect(response.body.pagination.hasNext).to.equal(true);\nexpect(response.body.pagination.currentPageTotalCount).to.equal(3);\nexpect(response.body.pagination.totalCount).to.equal(4);\nexpect(response.body.pagination.currentPage).to.equal(0);",
              "err": {
                "message": "AssertionError: expected undefined to equal true",
                "estack": "AssertionError: expected undefined to equal true\n    at Context.<anonymous> (file:///opt/app/src/makePayment/getSaveTrxnMakePayment.test.js:314:49)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "06f52666-23f0-470a-a345-7d7a947a709b",
              "parentUUID": "195ec4f1-f8e8-46fe-850e-690d459e14c8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "24123a98-21f1-4488-a7db-98750251ff47",
            "15551efb-bc34-4095-ad5a-e283e38ea7bb",
            "6c67d2f8-acf1-40c6-a3c3-e0685b843aa6"
          ],
          "failures": [
            "06f52666-23f0-470a-a345-7d7a947a709b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 295,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7c7c5e9e-f339-405e-aea1-7567d9f13bf1",
          "title": "API Check: Make Payment(POST)",
          "fullFile": "/opt/app/src/makePayment/makePayment.test.js",
          "file": "/src/makePayment/makePayment.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"API Check: Make Payment(POST)\"",
              "fullTitle": "API Check: Make Payment(POST) \"before all\" hook in \"API Check: Make Payment(POST)\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "d2799a8f-0a6c-47e0-87c9-430b9c1650b4",
              "parentUUID": "7c7c5e9e-f339-405e-aea1-7567d9f13bf1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"API Check: Make Payment(POST)\"",
              "fullTitle": "API Check: Make Payment(POST) \"before each\" hook in \"API Check: Make Payment(POST)\"",
              "timedOut": false,
              "duration": 8995,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577237\",\n  },\n});\ntoken = generateUserToken(userId.id, \"01317577237\", \"USER\");\nconst chartOfAccounts = await createBasicChartOfAccounts();\ncustomer = chartOfAccounts.find(\n  (account) => account.code === \"customer-01\"\n);\nmerchant = chartOfAccounts.find(\n  (account) => account.code === \"merchant-01\"\n);\nawait setupTransactionTypes(chartOfAccounts);\nawait createUserAccounts(chartOfAccounts);\nsender = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\nreceiver = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01999999999\" },\n});\nconst type = await prismaAccounting.transactionType.findUnique({\n  where: { transactionCode: \"make-payment-001\" },\n});\nawait addInitialBalance(sender, 1000000);",
              "err": {},
              "uuid": "2b08b339-b4cd-4a8d-bd2b-8a34a0e06086",
              "parentUUID": "7c7c5e9e-f339-405e-aea1-7567d9f13bf1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"API Check: Make Payment(POST)\"",
              "fullTitle": "API Check: Make Payment(POST) \"after all\" hook in \"API Check: Make Payment(POST)\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sender = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\nreceiver = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01999999999\" },\n});\nonholdUser = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577238\" }\n});\nmaxwallet = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577210\" }\n});\ndailyLimitAmountUser = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01715170020\" }\n});\nconst testConfig = {\n  baseUrl: ApiUrls.apiBaseUrl,\n  endpoint: ApiUrls.doPayment,\n  token: token,\n  sender: sender,\n  receiver: receiver,\n  type: \"Top Up\",\n  database: [prismaApi.payment],\n  transactionTypeCode: \"make-payment-001\",\n  userId: userId.id,\n  requestBody: {\n    agentMobile: receiver.identifier,\n    amount: 60,\n    note: \"khabar er taka\",\n    transactionTypeCode: \"make-payment-001\",\n    referenceNo: \"11111\",\n    save: true\n  },\n  requestBodyForNotFullActiveUser: {\n    agentMobile: receiver.identifier,\n    amount: 20,\n    note: \"khabar er taka\",\n    transactionTypeCode: \"make-payment-001\",\n    referenceNo: \"11111\",\n  },\n  requestBodyForMinWalleAmount: {\n    amount: 4,\n    agentMobile: receiver.identifier,\n    note: \"requestBodyForMinWalleAmount\",\n    referenceNo: \"1111111111\",\n    transactionTypeCode: \"make-payment-001\"\n  },\n  requestBodyForMaxWalleAmount: {\n    amount: 200,\n    agentMobile: receiver.identifier,\n    note: \"requestBodyForMaxWalleAmount\",\n    referenceNo: \"1111111111\",\n    transactionTypeCode: \"make-payment-001\"\n  },\n  requestBodyForDailyLimitAmount: {\n    amount: 200,\n    agentMobile: receiver.identifier,\n    note: \"requestBodyForMaxWalleAmount\",\n    referenceNo: \"1111111111\",\n    transactionTypeCode: \"make-payment-001\"\n  },\n  requestBodyForTypeMinAmount: {\n    amount: 40,\n    agentMobile: receiver.identifier,\n    note: \"requestBodyForTypeMinAmount\",\n    referenceNo: \"1111111111\",\n    transactionTypeCode: \"make-payment-001\"\n  },\n  requestBodyForTypeMaxAmount: {\n    amount: 1000000,\n    agentMobile: receiver.identifier,\n    note: \"requestBodyForTypeMinAmount\",\n    referenceNo: \"1111111111\",\n    transactionTypeCode: \"make-payment-001\"\n  },\n}\nrunTransactionTests(testConfig);\nawait prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "2c062644-3c7b-44cf-bff4-0040a7185cfa",
              "parentUUID": "7c7c5e9e-f339-405e-aea1-7567d9f13bf1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 200 for successful payment and save this payment",
              "fullTitle": "API Check: Make Payment(POST) should return 200 for successful payment and save this payment",
              "timedOut": true,
              "duration": 30001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec()\n  .post(`${ApiUrls.apiBaseUrl}${ApiUrls.doPayment}`)\n  .withBearerToken(token)\n  .withJson({\n    agentMobile: receiver.identifier,\n    amount: 200,\n    note: \"khabar er taka\",\n    transactionTypeCode: \"make-payment-001\",\n    referenceNo: \"11111\",\n    save: true\n  })\n  .expectStatus(200);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577237\",\n  },\n});\nawait checkSuccess({\n  groupId: \"topup\",\n  topic: \"payment_result\",\n  log: 'Make Payment: From 01317577237 to 01999999999',\n  amount: 200,\n  callback: async () => {\n    const paymentTable = await prismaApi.payment.findMany({\n      where: { userId: userId.id },\n    });\n    expect(paymentTable[0].status).to.equal(\"SUCCESS\");\n    expect(paymentTable[0].userId).to.equal(userId.id);\n    const savePayment = await prismaApi.paymentSave.findMany({\n      where: { paymentId: paymentTable[0].id },\n    });\n    expect(savePayment).to.have.lengthOf(1);\n    console.log(savePayment[0].note);\n    expect(savePayment[0].note).to.equal(\"khabar er taka\");\n    expect(savePayment[0].paymentId).to.equal(paymentTable[0].id);\n  }\n})",
              "err": {
                "message": "Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/makePayment/makePayment.test.js)",
                "estack": "Error: Timeout of 30000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/makePayment/makePayment.test.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "04d7d5e7-92e5-480c-bf7b-c9af63fb4abe",
              "parentUUID": "7c7c5e9e-f339-405e-aea1-7567d9f13bf1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the reciever is not merchant",
              "fullTitle": "API Check: Make Payment(POST) should return 400 if the reciever is not merchant",
              "timedOut": false,
              "duration": 73,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum\n  .spec()\n  .post(`${ApiUrls.apiBaseUrl}${ApiUrls.doPayment}`)\n  .withBearerToken(token)\n  .withJson({\n    agentMobile: \"01711106485\",\n    amount: 200,\n    note: \"khabar er taka\",\n    transactionTypeCode: \"make-payment-001\",\n    referenceNo: \"11111\",\n    save: true\n  })\n  .expectStatus(400);\n  const apiTable = await prismaApi.payment.findMany({\n    where: { userId: userId.id },\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");",
              "err": {},
              "uuid": "5a7eadcd-bea3-4d4c-b87c-f10e74c34ddc",
              "parentUUID": "7c7c5e9e-f339-405e-aea1-7567d9f13bf1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5a7eadcd-bea3-4d4c-b87c-f10e74c34ddc"
          ],
          "failures": [
            "04d7d5e7-92e5-480c-bf7b-c9af63fb4abe"
          ],
          "pending": [],
          "skipped": [],
          "duration": 30074,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "26834f67-5928-47b1-b9dd-80db044c1a87",
          "title": "Account Creation for Merchant User",
          "fullFile": "/opt/app/src/merchant/accountCreationMerchant.test.js",
          "file": "/src/merchant/accountCreationMerchant.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Account Creation for Merchant User\"",
              "fullTitle": "Account Creation for Merchant User \"before all\" hook in \"Account Creation for Merchant User\"",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaApi.$connect();\nawait prismaAccounting.$connect();",
              "err": {},
              "uuid": "0c5d721a-3b0d-42a9-899e-8a6109d27c37",
              "parentUUID": "26834f67-5928-47b1-b9dd-80db044c1a87",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Account Creation for Merchant User\"",
              "fullTitle": "Account Creation for Merchant User \"before each\" hook in \"Account Creation for Merchant User\"",
              "timedOut": false,
              "duration": 29,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\nawait prismaAccounting.transaction.deleteMany({});\nawait prismaAccounting.transactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.transactionType.deleteMany({});\nawait prismaAccounting.transactionLegLog.deleteMany({});\nawait prismaAccounting.transactionLeg.deleteMany({});\nawait prismaAccounting.accountLog.deleteMany({});\nawait prismaAccounting.userAccount.deleteMany({});\nawait prismaAccounting.chartOfAccountLog.deleteMany({});\nawait prismaAccounting.chartOfAccount.deleteMany({});\nawait prismaAuth.adminUser.deleteMany({});\nawait prismaAuth.appUser.deleteMany({});\nawait prismaApi.adminSetting.deleteMany({});\nawait prismaApi.merchantUser.deleteMany({});",
              "err": {},
              "uuid": "b4652052-8bce-4e6a-be4d-8438f013b633",
              "parentUUID": "26834f67-5928-47b1-b9dd-80db044c1a87",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Account Creation for Merchant User\"",
              "fullTitle": "Account Creation for Merchant User \"after all\" hook in \"Account Creation for Merchant User\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();\nawait prismaApi.$disconnect();\nawait prismaAuth.$disconnect();",
              "err": {},
              "uuid": "1a182c3f-63ef-43b3-a8d3-a8b84a725b28",
              "parentUUID": "26834f67-5928-47b1-b9dd-80db044c1a87",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create Merchant account successfully from Merchant App",
              "fullTitle": "Account Creation for Merchant User should create Merchant account successfully from Merchant App",
              "timedOut": false,
              "duration": 5,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const appUser = await prismaAuth.appUser.create({\n  data: {\n    fullname: \"John\",\n    phone: \"01747538382\",\n    email: \"johndoe1@example.com\",\n    password:\n      \"$2a$10$C2JDo6LHB61PTl6mTBdEpeoPNRf7mDCKdbufHd.2uEJzwwm4hbP6q\",\n    fathername: \"John Doe\",\n    mothername: \"Jane Doe\",\n    nidnumber: \"1234567890\",\n    dob: \"1990-01-01\",\n    nidaddress: \"House 123, Street 456, City, District\",\n    presentAddress: \"House 789, Street 321, City, District\",\n    district: \"Dhaka\",\n    hasLiveliness: false,\n    hasNidInfo: true,\n    isEmailVerified: false,\n    isPhoneVerified: false,\n    role: \"MERCHANT\",\n    wrongPinCount: 0,\n  },\n});\ntoken = generateMerchantToken(Number(appUser.id), \"01747538382\", [\n  \"MERCHANT\",\n]);\nconst admin = await prismaAuth.adminUser.create({\n  data: {\n    name: \"Admin user\",\n    email: \"admin@example.com\",\n    password:\n      \"$2a$10$M6jH9Ky2SbbJ5tu5dV220.PO86QWhef5cllDVNgwrxLWFPlqTYLlC\",\n    role: 0,\n    isActive: true,\n  },\n});\nconst chartOfAccount = await prismaAccounting.chartOfAccount.create({\n  data: {\n    adminId: admin.id,\n    code: \"001\",\n    name: \"Merchant\",\n    description: \"Description for Account 1\",\n    headType: \"LIABILITY\",\n    minWalletAmount: 100,\n    maxWalletAmount: 100000,\n    transactionType: \"MEMBER\",\n    onlyParent: false,\n    monthlyLimitCount: 0,\n    monthlyLimitAmount: 0,\n    weeklyLimitCount: 0,\n    weeklyLimitAmount: 0,\n    dailyLimitCount: 0,\n    dailyLimitAmount: 0,\n  },\n});\nchartOfAccountId = chartOfAccount.id;\nawait new Promise((resolve) => setTimeout(resolve, 50));\nconst verifyChartOfAccount =\n  await prismaAccounting.chartOfAccount.findUnique({\n    where: { id: chartOfAccountId },\n  });\nif (!verifyChartOfAccount) {\n  throw new Error(\n    `Chart of Account with ID ${chartOfAccountId} was not found in the DB!`\n  );\n}\nawait prismaApi.adminSetting.create({\n  data: {\n    id: 1,\n    userType: \"MERCHANT\",\n    createdBy: admin.id,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    info: JSON.stringify({\n      merchantWalletCoaId: chartOfAccountId,\n      bulkDisbursementTrxType: null,\n      settlementTrxCode: null,\n      sendMoneyTrxCode: null,\n      addMoneyMfsTransferTrxCode: null,\n      addMoneyBankTransferTrxCode: null,\n      addMoneyCardTransferTrxCode: null,\n      addMoneyInfo: null,\n    }),\n  },\n});\nawait prismaApi.adminSetting.findFirst({\n  where: { userType: \"MERCHANT\" },\n});\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.saveLivelinessMerchant}`)\n  .withBearerToken(token)\n  .withFile(\n    \"livelinessImage\",\n    path.resolve(\"/opt/app/test-data/Onamika.jpeg\")\n  )\n  .expectStatus(200);\nconst createdAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01747538382\" },\n});\nconst allAccounts = await prismaAccounting.userAccount.findMany();\nexpect(createdAccount).to.not.be.null;\nexpect(createdAccount.identifier).to.equal(\"01747538382\");\nexpect(allAccounts.length).to.equal(1);\nexpect(createdAccount.accountName).to.equal(\"John\");\nexpect(createdAccount.status).to.equal(\"LIMITED_ACTIVE\");\nexpect(createdAccount.chartOfAccount_id).to.equal(chartOfAccountId);",
              "err": {
                "message": "PrismaClientKnownRequestError: \nInvalid `prisma.adminUser.create()` invocation:\n\n\nThe column `role` does not exist in the current database.",
                "estack": "PrismaClientKnownRequestError: \nInvalid `prisma.adminUser.create()` invocation:\n\n\nThe column `role` does not exist in the current database.\n    at qn.handleRequestError (prisma/generated/auth/runtime/library.js:121:7315)\n    at qn.handleAndLogRequestError (prisma/generated/auth/runtime/library.js:121:6640)\n    at qn.request (prisma/generated/auth/runtime/library.js:121:6347)\n    at async l (prisma/generated/auth/runtime/library.js:130:9616)\n    at async Context.<anonymous> (file:///opt/app/src/merchant/accountCreationMerchant.test.js:71:19)",
                "diff": null
              },
              "uuid": "d1322574-b268-4764-a579-a0ce561936d7",
              "parentUUID": "26834f67-5928-47b1-b9dd-80db044c1a87",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d1322574-b268-4764-a579-a0ce561936d7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ae51c584-f3ed-4a6f-bb3c-703f19c894de",
          "title": "Bank information for Mechant Onboarding",
          "fullFile": "/opt/app/src/merchant/bankInfo.test.js",
          "file": "/src/merchant/bankInfo.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Bank information for Mechant Onboarding\"",
              "fullTitle": "Bank information for Mechant Onboarding \"before all\" hook in \"Bank information for Mechant Onboarding\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "16acbb9a-37cf-48d5-ab24-ac97c015f21a",
              "parentUUID": "ae51c584-f3ed-4a6f-bb3c-703f19c894de",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Bank information for Mechant Onboarding\"",
              "fullTitle": "Bank information for Mechant Onboarding \"before each\" hook in \"Bank information for Mechant Onboarding\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\nawait prismaAccounting.transaction.deleteMany({});\nawait prismaAccounting.transactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.transactionType.deleteMany({});\nawait prismaAccounting.transactionLegLog.deleteMany({});\nawait prismaAccounting.transactionLeg.deleteMany({});\nawait prismaAccounting.userAccount.deleteMany({});\nawait prismaAccounting.chartOfAccountLog.deleteMany({});\nawait prismaAccounting.chartOfAccount.deleteMany({});\nawait prismaAuth.appUser.deleteMany({});\nawait prismaApi.MerchantUser.deleteMany({});",
              "err": {},
              "uuid": "d414d865-775f-43c2-a968-302b2c0546d9",
              "parentUUID": "ae51c584-f3ed-4a6f-bb3c-703f19c894de",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Bank information for Mechant Onboarding\"",
              "fullTitle": "Bank information for Mechant Onboarding \"after all\" hook in \"Bank information for Mechant Onboarding\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "c92631f3-40b9-45d5-be50-ee0661d9c7aa",
              "parentUUID": "ae51c584-f3ed-4a6f-bb3c-703f19c894de",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should Store bank information successfully",
              "fullTitle": "Bank information for Mechant Onboarding should Store bank information successfully",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.appUser.create({\n  data: {\n    fullname: \"John\",\n    phone: \"01747538382\",\n    profilePicture: \"https://example.com/john.jpg\",\n    email: \"johndoe1@example.com\",\n    password: \"123458\",\n    fathername: \"John Doe\",\n    mothername: \"Jane Doe\",\n    nidnumber: \"1234567890\",\n    dob: \"1990-01-01\",\n    nidaddress: \"House 123, Street 456, City, District\",\n    presentAddress: \"House 789, Street 321, City, District\",\n    district: \"Dhaka\",\n    hasLiveliness: true,\n    hasNidInfo: true,\n    isEmailVerified: false,\n    isPhoneVerified: false,\n    role: \"MERCHANT\",\n    wrongPinCount: 0,\n  },\n});\nconst userFromDb = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01747538382\",\n  },\n});\nif (!userFromDb) {\n  throw new Error(\"User not found after creation\");\n}\nconst merchantUser = await prismaApi.MerchantUser.create({\n  data: {\n    userId: userFromDb.id,\n    settlementFrequency: \"MONTHLY\"\n  },\n});\nif (!merchantUser) {\n  throw new Error(\"Merchant user not created\");\n}\nconst token = generateMerchantToken(Number(userFromDb.id), \"01747538382\", [\n  \"MERCHANT\",\n]);\nconst bankInfo = {\n  bankAccountNo: \"1234567890\",\n  bankAccountName: \"aaaaaa\",\n  bankName: \"City Bank\",\n  bankBranchName: \"Mirpur\",\n  settlementFrequency: \"MONTHLY\" \n};\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.bankInformation}`)\n  .withJson(bankInfo)\n  .expectStatus(200);\nconst bankInfoFromDb = await prismaApi.merchantUser.findMany({\n  where: {\n    userId: userFromDb.id,\n    settlementFrequency: \"MONTHLY\"\n  },\n});\nif (!bankInfoFromDb) {\n  throw new Error(\"Bank information not found in database after creation\");\n}\nexpect(bankInfoFromDb[0]).to.not.be.null;\nexpect(bankInfoFromDb[0].bankAccountNo).to.equal(\"1234567890\");\nexpect(bankInfoFromDb[0].bankAccountName).to.equal(\"aaaaaa\");\nexpect(bankInfoFromDb[0].bankName).to.equal(\"City Bank\");\nexpect(bankInfoFromDb[0].bankBranchName).to.equal(\"Mirpur\");",
              "err": {},
              "uuid": "61051729-fc2f-475f-a9cf-e9e978ebee2b",
              "parentUUID": "ae51c584-f3ed-4a6f-bb3c-703f19c894de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error if the user is not logged In",
              "fullTitle": "Bank information for Mechant Onboarding should show error if the user is not logged In",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.appUser.create({\n  data: {\n    fullname: \"John\",\n    phone: \"01747538382\",\n    profilePicture: \"https://example.com/john.jpg\",\n    email: \"johndoe1@example.com\",\n    password: \"123458\",\n    fathername: \"John Doe\",\n    mothername: \"Jane Doe\",\n    nidnumber: \"1234567890\",\n    dob: \"1990-01-01\",\n    nidaddress: \"House 123, Street 456, City, District\",\n    presentAddress: \"House 789, Street 321, City, District\",\n    district: \"Dhaka\",\n    hasLiveliness: true,\n    hasNidInfo: true,\n    isEmailVerified: false,\n    isPhoneVerified: false,\n    role: \"MERCHANT\",\n    wrongPinCount: 0,\n  },\n});\nconst userFromDb = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01747538382\",\n  },\n});\nawait prismaApi.MerchantUser.create({\n  data: {\n    userId: userFromDb.id,\n    settlementFrequency: \"MONTHLY\"\n  },\n});\nconst bankInfo = {\n  bankAccountNo: \"1234567890\",\n  bankAccountName: \"aaaaaa\",\n  bankName: \"City Bank\",\n  bankBranchName: \"Mirpur\",\n  settlementFrequency: \"MONTHLY\" \n};\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.bankInformation}`)\n  .withJson(bankInfo)\n  .expectStatus(403);",
              "err": {},
              "uuid": "5297609f-7fd9-4ae1-a184-094afcc722fb",
              "parentUUID": "ae51c584-f3ed-4a6f-bb3c-703f19c894de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error if mechant doesnt exist",
              "fullTitle": "Bank information for Mechant Onboarding should show error if mechant doesnt exist",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.appUser.create({\n  data: {\n    fullname: \"John\",\n    phone: \"01747538382\",\n    profilePicture: \"https://example.com/john.jpg\",\n    email: \"johndoe1@example.com\",\n    password: \"123458\",\n    fathername: \"John Doe\",\n    mothername: \"Jane Doe\",\n    nidnumber: \"1234567890\",\n    dob: \"1990-01-01\",\n    nidaddress: \"House 123, Street 456, City, District\",\n    presentAddress: \"House 789, Street 321, City, District\",\n    district: \"Dhaka\",\n    hasLiveliness: true,\n    hasNidInfo: true,\n    isEmailVerified: false,\n    isPhoneVerified: false,\n    role: \"MERCHANT\",\n    wrongPinCount: 0,\n  },\n});\nconst userFromDb = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01747538382\",\n  },\n});\nawait prismaApi.MerchantUser.create({\n  data: {\n    userId: userFromDb.id,\n    settlementFrequency: \"MONTHLY\"\n  },\n});\nconst bankInfo = {\n  bankAccountNo: \"1234567890\",\n  bankAccountName: \"aaaaaa\",\n  bankName: \"City Bank\",\n  bankBranchName: \"Mirpur\",\n  settlementFrequency: \"MONTHLY\" \n};\nconst invalidToken = generateMerchantToken(Number(5555), \"01747538382\", [\n  \"MERCHANT\",\n]);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(invalidToken)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.bankInformation}`)\n  .withJson(bankInfo)\n  .expectStatus(400);",
              "err": {},
              "uuid": "470897ba-5664-460f-a0b8-2ec5f9dbed89",
              "parentUUID": "ae51c584-f3ed-4a6f-bb3c-703f19c894de",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "61051729-fc2f-475f-a9cf-e9e978ebee2b",
            "5297609f-7fd9-4ae1-a184-094afcc722fb",
            "470897ba-5664-460f-a0b8-2ec5f9dbed89"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 49,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a46322a6-b126-4f25-9754-2cc1968ae0ec",
          "title": "Business information for Mechant Onboarding",
          "fullFile": "/opt/app/src/merchant/businessInfo.test.js",
          "file": "/src/merchant/businessInfo.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Business information for Mechant Onboarding\"",
              "fullTitle": "Business information for Mechant Onboarding \"before all\" hook in \"Business information for Mechant Onboarding\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "2b71ad65-4f56-4b4d-a0fe-18fb8a092ed7",
              "parentUUID": "a46322a6-b126-4f25-9754-2cc1968ae0ec",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Business information for Mechant Onboarding\"",
              "fullTitle": "Business information for Mechant Onboarding \"before each\" hook in \"Business information for Mechant Onboarding\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\nawait prismaAccounting.transaction.deleteMany({});\nawait prismaAccounting.transactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.transactionType.deleteMany({});\nawait prismaAccounting.transactionLegLog.deleteMany({});\nawait prismaAccounting.transactionLeg.deleteMany({});\nawait prismaAccounting.userAccount.deleteMany({});\nawait prismaAccounting.chartOfAccountLog.deleteMany({});\nawait prismaAccounting.chartOfAccount.deleteMany({});\nawait prismaAuth.appUser.deleteMany({});\nawait prismaApi.MerchantUser.deleteMany({});",
              "err": {},
              "uuid": "9a0034e6-f248-423e-b4a3-62f2855368c4",
              "parentUUID": "a46322a6-b126-4f25-9754-2cc1968ae0ec",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Business information for Mechant Onboarding\"",
              "fullTitle": "Business information for Mechant Onboarding \"after all\" hook in \"Business information for Mechant Onboarding\"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "24a6492e-26db-462b-878d-ce15234c5a9d",
              "parentUUID": "a46322a6-b126-4f25-9754-2cc1968ae0ec",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should Store Business information successfully",
              "fullTitle": "Business information for Mechant Onboarding should Store Business information successfully",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.appUser.create({\n  data: {\n    fullname: \"John\",\n    phone: \"01747538382\",\n    profilePicture: \"https://example.com/john.jpg\",\n    email: \"johndoe1@example.com\",\n    password: \"123458\",\n    fathername: \"John Doe\",\n    mothername: \"Jane Doe\",\n    nidnumber: \"1234567890\",\n    dob: \"1990-01-01\",\n    nidaddress: \"House 123, Street 456, City, District\",\n    presentAddress: \"House 789, Street 321, City, District\",\n    district: \"Dhaka\",\n    hasLiveliness: true,\n    hasNidInfo: true,\n    isEmailVerified: false,\n    isPhoneVerified: false,\n    role: \"MERCHANT\",\n    wrongPinCount: 0,\n  },\n});\nconst userFromDb = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01747538382\",\n  },\n});\nif (!userFromDb) {\n  throw new Error(\"User not found after creation\");\n}\nconst merchantUser = await prismaApi.MerchantUser.create({\n  data: {\n    userId: userFromDb.id,\n    settlementFrequency: \"MONTHLY\"\n  },\n});\nif (!merchantUser) {\n  throw new Error(\"Merchant user not created\");\n}\nconst token = generateMerchantToken(Number(userFromDb.id), \"01747538382\", [\n  \"MERCHANT\",\n]);\nconst businessInfo = {\n  tinNumber: \"1234567887\",\n  organizationType: \"Private Limited\",\n  organizationName: \"Shukhee Private Limited\",\n  organizationAddress: \"Agargaon, Dhaka\",\n  email: \"shukhee@gmail.com\",\n};\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.businessInformation}`)\n  .withJson(businessInfo)\n  .expectStatus(200);\nconst businessInfoFromDb = await prismaApi.merchantUser.findMany({\n  where: {\n    userId: userFromDb.id,\n  },\n});\nif (!businessInfoFromDb) {\n  throw new Error(\n    \"Business information not found in database after creation\"\n  );\n}\nexpect(businessInfoFromDb[0]).to.not.be.null;\nexpect(businessInfoFromDb[0].tinNumber).to.equal(\"1234567887\");\nexpect(businessInfoFromDb[0].organizationType).to.equal(\"Private Limited\");\nexpect(businessInfoFromDb[0].organizationName).to.equal(\n  \"Shukhee Private Limited\"\n);\nexpect(businessInfoFromDb[0].organizationAddress).to.equal(\n  \"Agargaon, Dhaka\"\n);\nexpect(businessInfoFromDb[0].email).to.equal(\"shukhee@gmail.com\");",
              "err": {},
              "uuid": "11fc7ba7-5ffa-4013-8b67-f5c59596cae8",
              "parentUUID": "a46322a6-b126-4f25-9754-2cc1968ae0ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error if the user is not logged In",
              "fullTitle": "Business information for Mechant Onboarding should show error if the user is not logged In",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.appUser.create({\n  data: {\n    fullname: \"John\",\n    phone: \"01747538382\",\n    profilePicture: \"https://example.com/john.jpg\",\n    email: \"johndoe1@example.com\",\n    password: \"123458\",\n    fathername: \"John Doe\",\n    mothername: \"Jane Doe\",\n    nidnumber: \"1234567890\",\n    dob: \"1990-01-01\",\n    nidaddress: \"House 123, Street 456, City, District\",\n    presentAddress: \"House 789, Street 321, City, District\",\n    district: \"Dhaka\",\n    hasLiveliness: true,\n    hasNidInfo: true,\n    isEmailVerified: false,\n    isPhoneVerified: false,\n    role: \"MERCHANT\",\n    wrongPinCount: 0,\n  },\n});\nconst userFromDb = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01747538382\",\n  },\n});\nawait prismaApi.MerchantUser.create({\n  data: {\n    userId: userFromDb.id,\n    settlementFrequency: \"MONTHLY\"\n  },\n});\nconst businessInfo = {\n  tinNumber: \"1234567887\",\n  organizationType: \"Private Limited\",\n  organizationName: \"Shukhee Private Limited\",\n  organizationAddress: \"Agargaon, Dhaka\",\n  email: \"shukhee@gmail.com\",\n};\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.businessInformation}`)\n  .withJson(businessInfo)\n  .expectStatus(403);",
              "err": {},
              "uuid": "6e5a9867-530c-44db-a05b-a9e426ec0937",
              "parentUUID": "a46322a6-b126-4f25-9754-2cc1968ae0ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error if mechant doesnt exist",
              "fullTitle": "Business information for Mechant Onboarding should show error if mechant doesnt exist",
              "timedOut": false,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.appUser.create({\n  data: {\n    fullname: \"John\",\n    phone: \"01747538382\",\n    profilePicture: \"https://example.com/john.jpg\",\n    email: \"johndoe1@example.com\",\n    password: \"123458\",\n    fathername: \"John Doe\",\n    mothername: \"Jane Doe\",\n    nidnumber: \"1234567890\",\n    dob: \"1990-01-01\",\n    nidaddress: \"House 123, Street 456, City, District\",\n    presentAddress: \"House 789, Street 321, City, District\",\n    district: \"Dhaka\",\n    hasLiveliness: true,\n    hasNidInfo: true,\n    isEmailVerified: false,\n    isPhoneVerified: false,\n    role: \"MERCHANT\",\n    wrongPinCount: 0,\n  },\n});\nconst userFromDb = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01747538382\",\n  },\n});\nawait prismaApi.MerchantUser.create({\n  data: {\n    userId: userFromDb.id,\n    settlementFrequency: \"MONTHLY\"\n  },\n});\nconst businessInfo = {\n  tinNumber: \"1234567887\",\n  organizationType: \"Private Limited\",\n  organizationName: \"Shukhee Private Limited\",\n  organizationAddress: \"Agargaon, Dhaka\",\n  email: \"shukhee@gmail.com\",\n};\nconst invalidToken = generateMerchantToken(Number(5555), \"01747538382\", [\n  \"MERCHANT\",\n]);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(invalidToken)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.businessInformation}`)\n  .withJson(businessInfo)\n  .expectStatus(400);",
              "err": {},
              "uuid": "0336d457-f047-44e1-a872-920a6a105e95",
              "parentUUID": "a46322a6-b126-4f25-9754-2cc1968ae0ec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error with Invalid Email",
              "fullTitle": "Business information for Mechant Onboarding should show error with Invalid Email",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.appUser.create({\n  data: {\n    fullname: \"John\",\n    phone: \"01747538382\",\n    profilePicture: \"https://example.com/john.jpg\",\n    email: \"johndoe1@example.com\",\n    password: \"123458\",\n    fathername: \"John Doe\",\n    mothername: \"Jane Doe\",\n    nidnumber: \"1234567890\",\n    dob: \"1990-01-01\",\n    nidaddress: \"House 123, Street 456, City, District\",\n    presentAddress: \"House 789, Street 321, City, District\",\n    district: \"Dhaka\",\n    hasLiveliness: true,\n    hasNidInfo: true,\n    isEmailVerified: false,\n    isPhoneVerified: false,\n    role: \"MERCHANT\",\n    wrongPinCount: 0,\n  },\n});\nconst userFromDb = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01747538382\",\n  },\n});\nif (!userFromDb) {\n  throw new Error(\"User not found after creation\");\n}\nconst merchantUser = await prismaApi.MerchantUser.create({\n  data: {\n    userId: userFromDb.id,\n    settlementFrequency: \"MONTHLY\"\n  },\n});\nif (!merchantUser) {\n  throw new Error(\"Merchant user not created\");\n}\nconst token = generateMerchantToken(Number(userFromDb.id), \"01747538382\", [\n  \"MERCHANT\",\n]);\nconst businessInfo = {\n  tinNumber: \"1234567887\",\n  organizationType: \"Private Limited\",\n  organizationName: \"Shukhee Private Limited\",\n  organizationAddress: \"Agargaon, Dhaka\",\n  email: \"shukhee\",\n};\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.businessInformation}`)\n  .withJson(businessInfo)\n  .expectStatus(400);",
              "err": {},
              "uuid": "297e307f-158a-4bd1-ab33-2174b0cdc8fb",
              "parentUUID": "a46322a6-b126-4f25-9754-2cc1968ae0ec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "11fc7ba7-5ffa-4013-8b67-f5c59596cae8",
            "6e5a9867-530c-44db-a05b-a9e426ec0937",
            "0336d457-f047-44e1-a872-920a6a105e95",
            "297e307f-158a-4bd1-ab33-2174b0cdc8fb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 74,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6abbdcd0-881f-4573-b0f7-cb615b1e10f2",
          "title": "Merchant Registration",
          "fullFile": "/opt/app/src/merchant/merchantRegistration.test.js",
          "file": "/src/merchant/merchantRegistration.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Merchant Registration\"",
              "fullTitle": "Merchant Registration \"before all\" hook in \"Merchant Registration\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaApi.$connect();\nawait prismaAccounting.$connect();",
              "err": {},
              "uuid": "1c2aef3b-ced5-4346-aea1-1b25e1f488a1",
              "parentUUID": "6abbdcd0-881f-4573-b0f7-cb615b1e10f2",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Merchant Registration\"",
              "fullTitle": "Merchant Registration \"before each\" hook in \"Merchant Registration\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\nawait prismaAccounting.transaction.deleteMany({});\nawait prismaAccounting.transactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.transactionType.deleteMany({});\nawait prismaAccounting.transactionLegLog.deleteMany({});\nawait prismaAccounting.transactionLeg.deleteMany({});\nawait prismaAccounting.userAccount.deleteMany({});\nawait prismaAccounting.chartOfAccountLog.deleteMany({});\nawait prismaAccounting.chartOfAccount.deleteMany({});\nawait prismaApi.MerchantUser.deleteMany({});\nawait prismaAuth.appUser.deleteMany({});",
              "err": {},
              "uuid": "3946188f-9ff7-4f73-8a8d-fe824785d604",
              "parentUUID": "6abbdcd0-881f-4573-b0f7-cb615b1e10f2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Merchant Registration\"",
              "fullTitle": "Merchant Registration \"after all\" hook in \"Merchant Registration\"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "71d2f5df-b5e1-42ba-a001-765f9cf58748",
              "parentUUID": "6abbdcd0-881f-4573-b0f7-cb615b1e10f2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should register merchant with Valid Phone Number",
              "fullTitle": "Merchant Registration should register merchant with Valid Phone Number",
              "timedOut": false,
              "duration": 1147,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await new Promise((resolve) => setTimeout(resolve, 1000));\n    const res = await pactum\n      .spec()\n      .withMethod(\"POST\")\n      .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.registerMerchant}`)\n      .withJson({\n        phoneNumber: \"01788448853\"\n      })\n      .expectStatus(200);",
              "err": {
                "message": "AssertionError: HTTP status 502 !== 200\n\n502 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 502 !== 200\n\n502 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 502\n+ 200\n"
              },
              "uuid": "76076cb0-5dc5-4802-96e4-0cee1bfafeb9",
              "parentUUID": "6abbdcd0-881f-4573-b0f7-cb615b1e10f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error when phone number is invalid",
              "fullTitle": "Merchant Registration should show error when phone number is invalid",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const phoneNumber = \"0184565164\";\nconst body = { phoneNumber };\nconst res = await pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.registerMerchant}`)\n  .withJson(body)\n  .expectStatus(400);",
              "err": {},
              "uuid": "994092e2-1ded-4da9-beb7-bb431f45314d",
              "parentUUID": "6abbdcd0-881f-4573-b0f7-cb615b1e10f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error when phone Number Contains Special Character",
              "fullTitle": "Merchant Registration should show error when phone Number Contains Special Character",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const phoneNumber = \"0184565#&@*\";\nconst body = { phoneNumber };\nconst res = await pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.registerMerchant}`)\n  .withJson(body)\n  .expectStatus(400);",
              "err": {},
              "uuid": "6d3b9bdc-98e9-4224-9ad2-894b9138d583",
              "parentUUID": "6abbdcd0-881f-4573-b0f7-cb615b1e10f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error when phone Number Contains Text",
              "fullTitle": "Merchant Registration should show error when phone Number Contains Text",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const phoneNumber = \"0184565164s\";\nconst body = { phoneNumber };\nconst res = await pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.registerMerchant}`)\n  .withJson(body)\n  .expectStatus(400);",
              "err": {},
              "uuid": "5a243cc7-0b2e-4ff6-8c12-7a3d6dada3a6",
              "parentUUID": "6abbdcd0-881f-4573-b0f7-cb615b1e10f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error for duplicate phone Number",
              "fullTitle": "Merchant Registration should show error for duplicate phone Number",
              "timedOut": false,
              "duration": 544,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.appUser.create({\n      data: {\n        fullname: \"John Doe\",\n        phone: \"01747538382\",\n        profilePicture: \"https://example.com/john.jpg\",\n        password:\"$2a$10$O.OzJsabGv4YyKPCwntAEeBIg8O67pIZbLOLBlZGp5Ss.8Ce6sEbS\",\n        email: \"johndoe1@example.com\",\n        fathername: \"John Doe\",\n        mothername: \"Jane Doe\",\n        hasLiveliness: true,\n        hasNidInfo:true,\n        isEmailVerified: true,\n        isPhoneVerified: true,\n        role: \"MERCHANT\",\n        wrongPinCount: 0,\n      },\n    });\n    \n    const user = await prismaAuth.appUser.findUnique({\n      where: {\n        phone: \"01747538382\",\n      }\n    });\n    const phoneNumber = \"01747538382\";\n    const body = { phoneNumber };\n    const res = await pactum\n    .spec()\n    .withMethod(\"POST\")\n    .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.registerMerchant}`)\n    .withJson(body)\n    .expectStatus(409);",
              "err": {},
              "uuid": "639a1287-e1e3-40c2-8872-cebaded280f9",
              "parentUUID": "6abbdcd0-881f-4573-b0f7-cb615b1e10f2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "994092e2-1ded-4da9-beb7-bb431f45314d",
            "6d3b9bdc-98e9-4224-9ad2-894b9138d583",
            "5a243cc7-0b2e-4ff6-8c12-7a3d6dada3a6",
            "639a1287-e1e3-40c2-8872-cebaded280f9"
          ],
          "failures": [
            "76076cb0-5dc5-4802-96e4-0cee1bfafeb9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1699,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1fdc8b3e-2f86-4564-a778-5ba89036242c",
          "title": "Trade License for Mechant Onboarding",
          "fullFile": "/opt/app/src/merchant/saveTradeLicense.test.js",
          "file": "/src/merchant/saveTradeLicense.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Trade License for Mechant Onboarding\"",
              "fullTitle": "Trade License for Mechant Onboarding \"before all\" hook in \"Trade License for Mechant Onboarding\"",
              "timedOut": false,
              "duration": 22,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "012d9692-9ef2-437b-97ff-9506b5058d46",
              "parentUUID": "1fdc8b3e-2f86-4564-a778-5ba89036242c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Trade License for Mechant Onboarding\"",
              "fullTitle": "Trade License for Mechant Onboarding \"before each\" hook in \"Trade License for Mechant Onboarding\"",
              "timedOut": false,
              "duration": 1354,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\nawait prismaAccounting.transaction.deleteMany({});\nawait prismaAccounting.transactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.transactionType.deleteMany({});\nawait prismaAccounting.transactionLegLog.deleteMany({});\nawait prismaAccounting.transactionLeg.deleteMany({});\nawait prismaAccounting.userAccount.deleteMany({});\nawait prismaAccounting.chartOfAccountLog.deleteMany({});\nawait prismaAccounting.chartOfAccount.deleteMany({});\nawait prismaAuth.appUser.deleteMany({});\nawait prismaApi.MerchantUser.deleteMany({});\nawait prismaAuth.appUser.create({\n  data: {\n    fullname: \"John\",\n    phone: \"01747538382\",\n    profilePicture: \"https://example.com/john.jpg\",\n    email: \"johndoe1@example.com\",\n    password: \"123458\",\n    fathername: \"John Doe\",\n    mothername: \"Jane Doe\",\n    nidnumber: \"1234567890\",\n    dob: \"1990-01-01\",\n    nidaddress: \"House 123, Street 456, City, District\",\n    presentAddress: \"House 789, Street 321, City, District\",\n    district: \"Dhaka\",\n    hasLiveliness: true,\n    hasNidInfo: true,\n    isEmailVerified: false,\n    isPhoneVerified: false,\n    role: \"MERCHANT\",\n    wrongPinCount: 0,\n  },\n});\nlet userFromDb = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01747538382\",\n  },\n});\nidfromUser = userFromDb.id;\nawait prismaApi.MerchantUser.create({\n  data: {\n    userId: idfromUser,\n    bankAccountNo: \"1234567890\",\n    bankAccountName: \"aaaaaa\",\n    bankName: \"City Bank\",\n    bankBranchName: \"Mirpur\",\n    tinNumber: \"1234567887\",\n    organizationType: \"Private Limited\",\n    organizationName: \"Shukhee Private Limited\",\n    organizationAddress: \"Agargaon, Dhaka\",\n    email: \"shukhee@gmail.com\",\n    settlementFrequency: \"MONTHLY\"\n  },\n});\ntoken = generateMerchantToken(Number(userFromDb.id), \"01747538382\", [\n  \"MERCHANT\",\n]);",
              "err": {},
              "uuid": "f2f5515d-85bb-4feb-80b2-5c7b5a262a5f",
              "parentUUID": "1fdc8b3e-2f86-4564-a778-5ba89036242c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Trade License for Mechant Onboarding\"",
              "fullTitle": "Trade License for Mechant Onboarding \"after all\" hook in \"Trade License for Mechant Onboarding\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "abe86dc0-d96c-4e0c-84df-a0ede760e9e0",
              "parentUUID": "1fdc8b3e-2f86-4564-a778-5ba89036242c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should Save trade license image successfully",
              "fullTitle": "Trade License for Mechant Onboarding should Save trade license image successfully",
              "timedOut": false,
              "duration": 748,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const formData = new FormData();\nconst imagePath = path.resolve(\"/opt/app/test-data/trade_license.jpeg\");\nif (!fs.existsSync(imagePath)) {\n  throw new Error(`Test image not found at path: ${imagePath}`);\n}\nformData.append(\"file\", fs.createReadStream(imagePath), {\n  filename: \"trade_license.jpeg\",\n  contentType: \"image/jpeg\",\n});\nconst res = await pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.tradeLicenseImageSave}`)\n  .withFile(\n    \"tradeLicenseImage\",\n    path.resolve(\"/opt/app/test-data/trade_license.jpeg\")\n  )\n  .expectStatus(200);\nconst businessInfoFromDb = await prismaApi.merchantUser.findFirst({\n  where: {\n    userId: idfromUser,\n  },\n});\nexpect(businessInfoFromDb).to.not.be.null;\nexpect(businessInfoFromDb.tradeLicense).to.not.be.null;\nexpect(businessInfoFromDb.tradeLicense).to.be.string;",
              "err": {
                "message": "AssertionError: HTTP status 400 !== 200\n\n400 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 400 !== 200\n\n400 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "807b0c6c-3695-47fa-bfad-62e2d1ff12d8",
              "parentUUID": "1fdc8b3e-2f86-4564-a778-5ba89036242c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should Save trade license image successfully and verify in MinIO",
              "fullTitle": "Trade License for Mechant Onboarding should Save trade license image successfully and verify in MinIO",
              "timedOut": false,
              "duration": 28,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const bucketName = \"ppay\";\nconst imagePath = \"/opt/app/test-data/trade_license.jpeg\";\nconst userPhone = \"01747538382\";\nconst response = await pactum\n  .spec()\n  .post(`${ApiUrls.apiBaseUrl}${ApiUrls.tradeLicenseImageSave}`)\n  .withBearerToken(token)\n  .withFile(\"tradeLicenseImage\", imagePath)\n  .expectStatus(200);\nconst exists = await minioClient.bucketExists(bucketName);\nexpect(exists).to.be.true;\nconst fileNamePattern = `trade_licenses/${userPhone}_*.trade_license.jpeg`;\nconst objects = [];\nconst stream = minioClient.listObjects(bucketName, \"trade_licenses/\", true);\nfor await (const obj of stream) {\n  objects.push(obj);\n}\nconst regex = new RegExp(`^trade_licenses/${userPhone}.*trade_license.*$`);\nlet fileFound = false;\nfor (const obj of objects) {\n  if (regex.test(obj.name)) {\n    fileFound = true;\n    break;\n  }\n}\nexpect(fileFound).to.be.true;\nconst foundObjectName = objects.find((obj) => regex.test(obj.name))?.name;\nif (foundObjectName) {\n  const stat = await minioClient.statObject(bucketName, foundObjectName);\n  expect(stat).to.not.be.null;\n  expect(stat.size).to.be.greaterThan(0);\n} else {\n  throw new Error(\"File not found in the bucket.\");\n}",
              "err": {
                "message": "AssertionError: HTTP status 400 !== 200\n\n400 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 400 !== 200\n\n400 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "a6887e4f-cfc7-48ac-a002-934e908ebe27",
              "parentUUID": "1fdc8b3e-2f86-4564-a778-5ba89036242c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "807b0c6c-3695-47fa-bfad-62e2d1ff12d8",
            "a6887e4f-cfc7-48ac-a002-934e908ebe27"
          ],
          "pending": [],
          "skipped": [],
          "duration": 776,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f508b82c-ddd5-4027-b409-9d130ffcbeb6",
          "title": "Set Pin for Mechant Onboarding",
          "fullFile": "/opt/app/src/merchant/setPin.test.js",
          "file": "/src/merchant/setPin.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Set Pin for Mechant Onboarding\"",
              "fullTitle": "Set Pin for Mechant Onboarding \"before all\" hook in \"Set Pin for Mechant Onboarding\"",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "cb695407-a40a-4884-b3c6-d4634d5db8a0",
              "parentUUID": "f508b82c-ddd5-4027-b409-9d130ffcbeb6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Set Pin for Mechant Onboarding\"",
              "fullTitle": "Set Pin for Mechant Onboarding \"before each\" hook in \"Set Pin for Mechant Onboarding\"",
              "timedOut": false,
              "duration": 671,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\nawait prismaAccounting.transaction.deleteMany({});\nawait prismaAccounting.transactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.transactionType.deleteMany({});\nawait prismaAccounting.transactionLegLog.deleteMany({});\nawait prismaAccounting.transactionLeg.deleteMany({});\nawait prismaAccounting.accountLog.deleteMany({});\nawait prismaAccounting.userAccount.deleteMany({});\nawait prismaAccounting.chartOfAccountLog.deleteMany({});\nawait prismaAccounting.chartOfAccount.deleteMany({});\nawait prismaAuth.appUser.deleteMany({});\nawait prismaApi.MerchantUser.deleteMany({});",
              "err": {},
              "uuid": "1bf27d6a-fe2c-4464-a78a-07310cd183b4",
              "parentUUID": "f508b82c-ddd5-4027-b409-9d130ffcbeb6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Set Pin for Mechant Onboarding\"",
              "fullTitle": "Set Pin for Mechant Onboarding \"after all\" hook in \"Set Pin for Mechant Onboarding\"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "002063ad-f257-491f-8467-ca876f75ae33",
              "parentUUID": "f508b82c-ddd5-4027-b409-9d130ffcbeb6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should check the user is stored in the DB after setting Pin",
              "fullTitle": "Set Pin for Mechant Onboarding should check the user is stored in the DB after setting Pin",
              "timedOut": false,
              "duration": 1205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const phoneNumber = \"01788448853\";\ntoken = generateTokenForSetPin(phoneNumber);\nconst res = await pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.setPin}`)\n  .withJson({\n    token: token,\n    pin: \"123459\",\n  })\n  .expectStatus(200);\nconst userInDb = await prismaAuth.appUser.findUnique({\n  where: { phone: phoneNumber },\n});\nexpect(userInDb.phone).to.equal(phoneNumber);\nexpect(userInDb.role).to.equal(\"MERCHANT\");",
              "err": {},
              "uuid": "bb7ec3a5-422e-4e44-a2ba-57e92c33cf43",
              "parentUUID": "f508b82c-ddd5-4027-b409-9d130ffcbeb6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bb7ec3a5-422e-4e44-a2ba-57e92c33cf43"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1205,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d6467096-47af-4596-b4ad-72686bd60363",
          "title": "Add Nominee (POST :/user/nominee)",
          "fullFile": "/opt/app/src/nominee/addNominee.test.js",
          "file": "/src/nominee/addNominee.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Add Nominee (POST :/user/nominee)\"",
              "fullTitle": "Add Nominee (POST :/user/nominee) \"before all\" hook in \"Add Nominee (POST :/user/nominee)\"",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "14b3c5f4-c6dd-442c-be69-5ec82a261cba",
              "parentUUID": "d6467096-47af-4596-b4ad-72686bd60363",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Add Nominee (POST :/user/nominee)\"",
              "fullTitle": "Add Nominee (POST :/user/nominee) \"before each\" hook in \"Add Nominee (POST :/user/nominee)\"",
              "timedOut": false,
              "duration": 1637,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nuserId = await prismaAuth.appUser.findFirst({\n    where: {\n        phone: \"01317577237\",\n    },\n});\ntoken = generateUserToken(userId.id, \"01317577237\", \"USER\");",
              "err": {},
              "uuid": "d711e85b-7121-4414-8df6-1e5198861abc",
              "parentUUID": "d6467096-47af-4596-b4ad-72686bd60363",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Add Nominee (POST :/user/nominee)\"",
              "fullTitle": "Add Nominee (POST :/user/nominee) \"after all\" hook in \"Add Nominee (POST :/user/nominee)\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$disconnect();\nawait prismaAccounting.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "1da35e14-1623-4cb3-a9cf-78992a012f0e",
              "parentUUID": "d6467096-47af-4596-b4ad-72686bd60363",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should create a new nominee",
              "fullTitle": "Add Nominee (POST :/user/nominee) should create a new nominee",
              "timedOut": false,
              "duration": 375,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum\n    .spec()\n    .withMethod(\"POST\")\n    .withBearerToken(token)\n    .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.addNominee}`)\n    .withJson(requesBodyNominee).expectStatus(200);\nconst createdNominee = await prismaAuth.nominee.findUnique({\n    where: { userId: userId.id },\n});\nexpect(createdNominee.name).to.equal(\"John Doe\");\nexpect(createdNominee.nidNumber).to.equal(\"123456789\");\nexpect(createdNominee.relation).to.equal(\"Brother\");\nexpect(createdNominee.phoneNumber).to.equal(\"01718984384\");",
              "err": {},
              "uuid": "5f66588c-8508-41bc-ad8e-badf27cb691b",
              "parentUUID": "d6467096-47af-4596-b4ad-72686bd60363",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should 400 if any data is missing",
              "fullTitle": "Add Nominee (POST :/user/nominee) should 400 if any data is missing",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum\n    .spec()\n    .withMethod(\"POST\")\n    .withBearerToken(token)\n    .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.addNominee}`)\n    .withJson({\n        ...requesBodyNominee,\n        name: \"\"\n    }).expectStatus(400);\nconst createdNominee = await prismaAuth.nominee.findUnique({\n    where: { userId: userId.id },\n});\nexpect(createdNominee).to.be.null;",
              "err": {},
              "uuid": "04a4cc15-5fd8-4804-b74d-1ff4343a8e20",
              "parentUUID": "d6467096-47af-4596-b4ad-72686bd60363",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5f66588c-8508-41bc-ad8e-badf27cb691b",
            "04a4cc15-5fd8-4804-b74d-1ff4343a8e20"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 388,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fb19c267-e596-4c5e-9954-d0293f90c467",
          "title": "Get Nominee (GET :/user/nominee)",
          "fullFile": "/opt/app/src/nominee/getNominee.test.js",
          "file": "/src/nominee/getNominee.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Get Nominee (GET :/user/nominee)\"",
              "fullTitle": "Get Nominee (GET :/user/nominee) \"before all\" hook in \"Get Nominee (GET :/user/nominee)\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "e0c6b662-f92b-477b-b4b9-440d3fd6974f",
              "parentUUID": "fb19c267-e596-4c5e-9954-d0293f90c467",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Get Nominee (GET :/user/nominee)\"",
              "fullTitle": "Get Nominee (GET :/user/nominee) \"before each\" hook in \"Get Nominee (GET :/user/nominee)\"",
              "timedOut": false,
              "duration": 1121,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nuserId = await prismaAuth.appUser.findFirst({\n    where: {\n        phone: \"01317577237\",\n    },\n});\ntoken = generateUserToken(userId.id, \"01317577237\", \"USER\");\nconst nomineeData = {\n    name: \"John Doe\",\n    nidNumber: \"123456789\",\n    relation: \"Brother\",\n    phoneNumber: \"01718984384\",\n    birthDate: \"25-02-2020\",\n    userId: userId.id\n};\nawait prismaAuth.nominee.create({\n    data: nomineeData,\n});",
              "err": {},
              "uuid": "d0fa5a24-eead-4bf1-84c5-c809633a4e4a",
              "parentUUID": "fb19c267-e596-4c5e-9954-d0293f90c467",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Get Nominee (GET :/user/nominee)\"",
              "fullTitle": "Get Nominee (GET :/user/nominee) \"after all\" hook in \"Get Nominee (GET :/user/nominee)\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$disconnect();\nawait prismaAccounting.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "17a73d78-2b43-48f1-8007-83da262f4faa",
              "parentUUID": "fb19c267-e596-4c5e-9954-d0293f90c467",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get a new nominee",
              "fullTitle": "Get Nominee (GET :/user/nominee) should get a new nominee",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getNominee = await pactum\n            .spec()\n            .withMethod(\"GET\")\n            .withBearerToken(token)\n            .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.addNominee}`)\n            .expectStatus(200);\n        const createdNominee = await prismaAuth.nominee.findUnique({\n            where: { userId: userId.id },\n        });\n        expect(createdNominee.name).to.equal(getNominee.body.nominee.name);\n        expect(createdNominee.nidNumber).to.equal(getNominee.body.nominee.nidnumber);\n        expect(createdNominee.relation).to.equal(getNominee.body.nominee.relation);\n        expect(createdNominee.phoneNumber).to.equal(getNominee.body.nominee.phonenumber);",
              "err": {},
              "uuid": "e70a72af-5189-4616-b1d0-c666c75492aa",
              "parentUUID": "fb19c267-e596-4c5e-9954-d0293f90c467",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e70a72af-5189-4616-b1d0-c666c75492aa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 29,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9d0185a6-a4ec-4591-b35f-d406a022a955",
          "title": "Merchant Add Information For QR Generation",
          "fullFile": "/opt/app/src/QR/addInforForQR.test.js",
          "file": "/src/QR/addInforForQR.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Merchant Add Information For QR Generation\"",
              "fullTitle": "Merchant Add Information For QR Generation \"before all\" hook in \"Merchant Add Information For QR Generation\"",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "5a058402-e776-4e81-9449-b1faa55ba3c3",
              "parentUUID": "9d0185a6-a4ec-4591-b35f-d406a022a955",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook for \"should successfully add information\"",
              "fullTitle": "Merchant Add Information For QR Generation \"before each\" hook for \"should successfully add information\"",
              "timedOut": false,
              "duration": 19,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait prismaAuth.appUser.create({\n  data: {\n    fullname: \"Mosharof Hossain\",\n    phone: \"01999999999\",\n    profilePicture: \"https://example.com/Jarin.jpg\",\n    email: \"mosharof@example.com\",\n    password:\n      \"$2a$10$C2JDo6LHB61PTl6mTBdEpeoPNRf7mDCKdbufHd.2uEJzwwm4hbP6q\",\n    fathername: \"John Jarin re\",\n    mothername: \"Jarin Doe pe\",\n    nidnumber: \"1234566899\",\n    dob: \"1990-01-01\",\n    nidaddress: \"House 123, Street 456, City, District\",\n    presentAddress: \"House 789, Street 321, City, District\",\n    district: \"Dhaka\",\n    hasLiveliness: true,\n    hasNidInfo: true,\n    isEmailVerified: false,\n    isPhoneVerified: false,\n    nidBack: \"https://example.com/nid_back.jpg\",\n    nidFront: \"https://example.com/nid_front.jpg\",\n    role: \"MERCHANT\",\n    wrongPinCount: 0\n  },\n});\nmerchantUser = await prismaAuth.appUser.findUnique({\n  where: { phone: \"01999999999\" },\n});\nconst adminUser = await prismaAuth.adminUser.findUnique({\n    where: { email: \"admin@example.com\" },\n  });\n\ntoken = generateToken(adminUser.id, \"admin@example.com\", \"ADMIN\", \"ADMIN\" );\nmerchantToken =  generateMerchantToken(merchantUser.id, merchantUser.phone, [\n    \"MERCHANT\",\n  ]);\nconst chartOfAccounts = await createBasicChartOfAccounts();\nawait createUserAccounts(chartOfAccounts);\nawait prismaApi.merchantUser.create({\n    data: {\n      userId: merchantUser.id,\n      billNumber: \"dsjk\",\n      merchantName: \"GREHOSUKH\",\n      merchantCity: \"RAJSHAHI\",\n      tid: \"23100157\",\n      panMastercard: \"511629555133965\",\n      bankAccountName: \"GREHOSUKH\",\n      bankAccountNo: \"1234567890\",\n      bankName: \"City Bank\",\n      bankBranchName: \"Mirpur\",\n      settlementFrequency: \"MONTHLY\"\n    }\n  });\nmerchantAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01999999999\" },\n});",
              "err": {
                "message": "PrismaClientKnownRequestError: \nInvalid `prisma.adminUser.findUnique()` invocation:\n\n\nThe column `p_pay_auth.admin_users.role` does not exist in the current database.",
                "estack": "PrismaClientKnownRequestError: \nInvalid `prisma.adminUser.findUnique()` invocation:\n\n\nThe column `p_pay_auth.admin_users.role` does not exist in the current database.\n    at qn.handleRequestError (prisma/generated/auth/runtime/library.js:121:7315)\n    at qn.handleAndLogRequestError (prisma/generated/auth/runtime/library.js:121:6640)\n    at qn.request (prisma/generated/auth/runtime/library.js:121:6347)\n    at async l (prisma/generated/auth/runtime/library.js:130:9616)\n    at async Context.<anonymous> (file:///opt/app/src/QR/addInforForQR.test.js:58:23)",
                "diff": null
              },
              "uuid": "637a2264-120d-4141-b153-8ae3e5fb7748",
              "parentUUID": "9d0185a6-a4ec-4591-b35f-d406a022a955",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Merchant Add Information For QR Generation\"",
              "fullTitle": "Merchant Add Information For QR Generation \"after all\" hook in \"Merchant Add Information For QR Generation\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$disconnect();\nawait prismaApi.$disconnect();\nawait prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "00bc8488-7ee1-4d1f-91a0-7878d41230e9",
              "parentUUID": "9d0185a6-a4ec-4591-b35f-d406a022a955",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should successfully add information",
              "fullTitle": "Merchant Add Information For QR Generation should successfully add information",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dataForQR={\n       userId: merchantUser.id,\n       panVisa: \"1234567890123456\",\n       mid: \"MID123456\",\n       mcc: \"5411\",\n     }; \n   await pactum\n     .spec()\n     .withMethod(\"POST\")\n     .withBearerToken(token)\n     .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.addInfoQR}`)\n     .withJson(dataForQR)\n     .expectStatus(200);\n   const merchantUserFromDb = await prismaApi.merchantUser.findFirst({\n     where: {\n       userId: merchantUser.id,\n     },\n   });\n   expect(merchantUserFromDb).to.not.be.null;\n   expect(merchantUserFromDb.panVisa).to.equal(\"1234567890123456\");\n   expect(merchantUserFromDb.mid).to.equal(\"MID123456\");\n   expect(merchantUserFromDb.mcc).to.equal(\"5411\");",
              "err": {},
              "uuid": "8f6c9e92-04de-4674-8c53-bc9f21e05c71",
              "parentUUID": "9d0185a6-a4ec-4591-b35f-d406a022a955",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should show error if any other user except Admin tries to add information",
              "fullTitle": "Merchant Add Information For QR Generation should show error if any other user except Admin tries to add information",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const dataForQR={\n        userId: merchantUser.id,\n        panVisa: \"1234567890123456\",\n        mid: \"MID123456\",\n        mcc: \"5411\",\n      }; \n    await pactum\n      .spec()\n      .withMethod(\"POST\")\n      .withBearerToken(merchantToken)\n      .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.addInfoQR}`)\n      .withJson(dataForQR)\n      .expectStatus(401);",
              "err": {},
              "uuid": "e375950f-b2a5-4350-8aa0-31484a8d7347",
              "parentUUID": "9d0185a6-a4ec-4591-b35f-d406a022a955",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "8f6c9e92-04de-4674-8c53-bc9f21e05c71",
            "e375950f-b2a5-4350-8aa0-31484a8d7347"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "811844f3-6b90-4068-b226-9cf0cade99e1",
          "title": "Merchant QR Code Generation",
          "fullFile": "/opt/app/src/QR/generateQR.test.js",
          "file": "/src/QR/generateQR.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Merchant QR Code Generation\"",
              "fullTitle": "Merchant QR Code Generation \"before all\" hook in \"Merchant QR Code Generation\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "bd1bdb76-29cd-4bc8-8efa-cf26b463b911",
              "parentUUID": "811844f3-6b90-4068-b226-9cf0cade99e1",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Merchant QR Code Generation\"",
              "fullTitle": "Merchant QR Code Generation \"before each\" hook in \"Merchant QR Code Generation\"",
              "timedOut": false,
              "duration": 78,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait prismaAuth.appUser.create({\n  data: {\n    fullname: \"Mosharof Hossain\",\n    phone: \"01999999999\",\n    profilePicture: \"https://example.com/Jarin.jpg\",\n    email: \"mosharof@example.com\",\n    password:\n      \"$2a$10$C2JDo6LHB61PTl6mTBdEpeoPNRf7mDCKdbufHd.2uEJzwwm4hbP6q\",\n    fathername: \"John Jarin re\",\n    mothername: \"Jarin Doe pe\",\n    nidnumber: \"1234566899\",\n    dob: \"1990-01-01\",\n    nidaddress: \"House 123, Street 456, City, District\",\n    presentAddress: \"House 789, Street 321, City, District\",\n    district: \"Dhaka\",\n    hasLiveliness: true,\n    hasNidInfo: true,\n    isEmailVerified: false,\n    isPhoneVerified: false,\n    nidBack: \"https://example.com/nid_back.jpg\",\n    nidFront: \"https://example.com/nid_front.jpg\",\n    role: \"MERCHANT\",\n    wrongPinCount: 0\n  },\n});\nmerchantUser = await prismaAuth.appUser.findUnique({\n  where: { phone: \"01999999999\" },\n});\ntoken = generateMerchantToken(merchantUser.id, merchantUser.phone, [\n  \"MERCHANT\",\n]);\nconst chartOfAccounts = await createBasicChartOfAccounts();\nawait createUserAccounts(chartOfAccounts);\nmerchantAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01999999999\" },\n});",
              "err": {},
              "uuid": "f020e041-ce3f-487f-a506-c95158c98199",
              "parentUUID": "811844f3-6b90-4068-b226-9cf0cade99e1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Merchant QR Code Generation\"",
              "fullTitle": "Merchant QR Code Generation \"after all\" hook in \"Merchant QR Code Generation\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$disconnect();\nawait prismaApi.$disconnect();\nawait prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "8b5e8cff-9486-4cb7-b976-b0b6a2a6bdbc",
              "parentUUID": "811844f3-6b90-4068-b226-9cf0cade99e1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should generate a valid QR code",
              "fullTitle": "Merchant QR Code Generation should generate a valid QR code",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaApi.merchantUser.create({\n  data: {\n    userId: merchantUser.id,\n    panVisa: \"1234567890123456\",\n    mid: \"MID123456\",\n    mcc: \"5411\",\n    settlementFrequency: \"MONTHLY\"\n  },\n});\n\n   const response =  await pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.generateQR}`)\n  .expectStatus(200)\n  .expectJsonLike({\n    qr: /000201.+/,\n  });\nexpect((response) => {\n  const qr = response.json.qr;\n  expect(qr).to.contain(\"1234567890123456\");\n  expect(qr).to.contain(\"MID123456\");\n  expect(qr).to.contain(\"5411\");\n});\nconst qrString = response.body.qr;  \nconst parsedQR = parseBanglaQR(qrString);  \nif (parsedQR === \"Invalid Bangla QR Structure\") {\n    throw new Error(\"QR validation failed: Invalid Bangla QR structure\");\n}\nexpect(validateBanglaQR(qrString, parsedQR)).to.equal(true);",
              "err": {},
              "uuid": "7f790bf5-6ab3-42ed-bf56-2a2ef33c51ac",
              "parentUUID": "811844f3-6b90-4068-b226-9cf0cade99e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should generate QR with only Phone Number if PanVisa, MCC, MID not provided ",
              "fullTitle": "Merchant QR Code Generation should generate QR with only Phone Number if PanVisa, MCC, MID not provided ",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaApi.merchantUser.create({\n    data: {\n      userId: merchantUser.id,\n      billNumber: \"dsjk\",\n      merchantName: \"GREHOSUKH\",\n      merchantCity: \"RAJSHAHI\",\n      tid: \"23100157\",\n      panMastercard: \"511629555133965\",\n      panUnionPay: \"3649005036490050116020149000008\",\n      settlementFrequency: \"MONTHLY\"\n    },\n  });\n \n  const response =  await pactum\n    .spec()\n    .withMethod(\"POST\")\n    .withBearerToken(token)\n    .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.generateQR}`)\n    .expectStatus(200);\n    expect((response) => {\n      const qr = response.json.qr;\n      expect(qr).to.contain(\"01999999999\");\n    });",
              "err": {},
              "uuid": "8d68eea1-41ce-4950-9ebb-b35b575abe4a",
              "parentUUID": "811844f3-6b90-4068-b226-9cf0cade99e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7f790bf5-6ab3-42ed-bf56-2a2ef33c51ac",
            "8d68eea1-41ce-4950-9ebb-b35b575abe4a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e2441005-e542-4d14-b8e6-c535f7f517e6",
          "title": "Request Money ",
          "fullFile": "/opt/app/src/requestMoney/requestMoney.test.js",
          "file": "/src/requestMoney/requestMoney.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Request Money \"",
              "fullTitle": "Request Money  \"before all\" hook in \"Request Money \"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "27e2045a-76a5-47f8-9fc6-7f56fcff7c16",
              "parentUUID": "e2441005-e542-4d14-b8e6-c535f7f517e6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Request Money \"",
              "fullTitle": "Request Money  \"before each\" hook in \"Request Money \"",
              "timedOut": false,
              "duration": 68,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\nawait prismaAccounting.transaction.deleteMany({});\nawait prismaAccounting.transactionTypeChangeLog.deleteMany({});\nawait prismaAccounting.transactionType.deleteMany({});\nawait prismaAccounting.transactionLegLog.deleteMany({});\nawait prismaAccounting.transactionLeg.deleteMany({});\nawait prismaAccounting.userAccount.deleteMany({});\nawait prismaAccounting.chartOfAccountLog.deleteMany({});\nawait prismaAccounting.chartOfAccount.deleteMany({});\nawait prismaApi.RequestMoney.deleteMany({});\nawait prismaAuth.appUser.deleteMany({});\nawait prismaAuth.appUser.createMany({\n  data: [\n    {\n      fullname: \"Onamika\",\n      phone: \"01747538382\",\n      profilePicture: \"https://example.com/onamika.jpg\",\n      email: \"johndoe1@example.com\",\n      password: \"123458\",\n      fathername: \"John Doe\",\n      mothername: \"Jane Doe\",\n      nidnumber: \"1234567890\",\n      dob: \"1990-01-01\",\n      nidaddress: \"House 123, Street 456, City, District\",\n      presentAddress: \"House 789, Street 321, City, District\",\n      district: \"Dhaka\",\n      hasLiveliness: true,\n      hasNidInfo: true,\n      isEmailVerified: false,\n      isPhoneVerified: false,\n      nidBack: \"https://example.com/nid_back.jpg\",\n      nidFront: \"https://example.com/nid_front.jpg\",\n      presentAddress: \"https://example.com/present_address.jpg\",\n      role:\"USER\",\n      wrongPinCount: 0\n    },\n    {\n      fullname: \"Jarin\",\n      phone: \"01711106999\",\n      profilePicture: \"https://example.com/Jarin.jpg\",\n      email: \"Jarin@example.com\",\n      password: \"123458\",\n      fathername: \"John Jarin\",\n      mothername: \"Jarin Doe\",\n      nidnumber: \"1234566890\",\n      dob: \"1990-01-01\",\n      nidaddress: \"House 123, Street 456, City, District\",\n      presentAddress: \"House 789, Street 321, City, District\",\n      district: \"Dhaka\",\n      hasLiveliness: true,\n      hasNidInfo: true,\n      isEmailVerified: false,\n      isPhoneVerified: false,\n      nidBack: \"https://example.com/nid_back.jpg\",\n      nidFront: \"https://example.com/nid_front.jpg\",\n      role:\"USER\",\n      wrongPinCount: 0\n    },\n  ],\n});\nappUser1 = await prismaAuth.appUser.findUnique({\n  where: { phone: \"01747538382\" },\n});\nappUser2 = await prismaAuth.appUser.findUnique({\n  where: { phone: \"01711106999\" },\n});\nawait prismaAccounting.chartOfAccount.createMany({\n  data: [\n    {\n      name: \"Chart of Account 1\",\n      description: \"Description for Account 1\",\n      transactionType: \"SYSTEM\",\n      headType: \"ASSET\",\n      code: \"001\",\n      onlyParent: true,\n      adminId: 1,\n      minWalletAmount: 100,\n      maxWalletAmount: 10000,\n    },\n    {\n      name: \"Chart of Account 2\",\n      description: \"Description for Account 2\",\n      transactionType: \"SYSTEM\",\n      headType: \"ASSET\",\n      code: \"002\",\n      onlyParent: true,\n      adminId: 1,\n      minWalletAmount: 100,\n      maxWalletAmount: 10000,\n    },\n    {\n      name: \"Chart of Account 3\",\n      description: \"Description for Account 3\",\n      transactionType: \"SYSTEM\",\n      headType: \"LIABILITY\",\n      code: \"003\",\n      onlyParent: true,\n      adminId: 1,\n      minWalletAmount: 100,\n      maxWalletAmount: 10000,\n    },\n    {\n      name: \"Chart of Account 4\",\n      description: \"Description for Account 4\",\n      transactionType: \"SYSTEM\",\n      headType: \"EXPENSE\",\n      code: \"004\",\n      onlyParent: true,\n      adminId: 1,\n      minWalletAmount: 100,\n      maxWalletAmount: 10000,\n    },\n  ],\n});\nconst coA1 = await prismaAccounting.chartOfAccount.findUnique({\n  where: { code: \"001\" },\n});\nconst coA2 = await prismaAccounting.chartOfAccount.findUnique({\n  where: { code: \"002\" },\n});\nconst coA3 = await prismaAccounting.chartOfAccount.findUnique({\n  where: { code: \"003\" },\n});\nconst coA4 = await prismaAccounting.chartOfAccount.findUnique({\n  where: { code: \"004\" },\n});\nawait prismaAccounting.userAccount.createMany({\n  data: [\n    {\n      accountName: appUser1.fullname,\n      identifier: appUser1.phone,\n      status: \"FULL_ACTIVE\",\n      dailyLimitAmount: 50000,\n      dailyLimitCount: 200000,\n      monthlyLimitAmount: 5000000,\n      monthlyLimitCount: 600000000,\n      maxWalletAmount: 1000000000,\n      minWalletAmount: 0,\n      chartOfAccount_id: coA1.id,\n    },\n    {\n      accountName: appUser2.fullname,\n      identifier: appUser2.phone,\n      dailyLimitAmount: 50000,\n      dailyLimitCount: 200000,\n      monthlyLimitAmount: 5000000,\n      monthlyLimitCount: 600000000,\n      maxWalletAmount: 1000000000,\n      minWalletAmount: 0,\n      status: \"FULL_ACTIVE\",\n      chartOfAccount_id: coA2.id,\n    },\n  ],\n});\naccount1 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01747538382\" },\n});\naccount2 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01711106999\" },\n});\nconst transactionTypes = [\n  {\n    transactionCode: \"223\",\n    name: \"Send Money\",\n    description: \"Send money between accounts\",\n    minAmount: 50,\n    maxAmount: 5000,\n    createdByAdminId: 1,\n    createdByAdminIdentifier: \"11\",\n    isActive: true,\n    fromChartOfAccount: { connect: { id: coA1.id } },\n    toChartOfAccount: { connect: { id: coA2.id } },\n  },\n  {\n    transactionCode: \"TOPUP\",\n    name: \"Top-up\",\n    description: \"Top-up wallet balance\",\n    minAmount: 10,\n    maxAmount: 10000,\n    createdByAdminId: 1,\n    createdByAdminIdentifier: \"11\",\n    isActive: true,\n    fromChartOfAccount: { connect: { id: coA1.id } },\n    toChartOfAccount: { connect: { id: coA3.id } },\n  },\n  {\n    transactionCode: \"UTILITY\",\n    name: \"Utility Payment\",\n    description: \"Pay utility bills\",\n    minAmount: 100,\n    maxAmount: 2000,\n    createdByAdminId: 1,\n    createdByAdminIdentifier: \"11\",\n    isActive: true,\n    fromChartOfAccount: { connect: { id: coA2.id } },\n    toChartOfAccount: { connect: { id: coA4.id } },\n  },\n  {\n    transactionCode: \"CASHOUT\",\n    name: \"Cash-out\",\n    description: \"Withdraw money\",\n    minAmount: 100,\n    maxAmount: 3000,\n    createdByAdminId: 1,\n    createdByAdminIdentifier: \"11\",\n    isActive: true,\n    fromChartOfAccount: { connect: { id: coA3.id } },\n    toChartOfAccount: { connect: { id: coA4.id } },\n  },\n];\nfor (const transactionType of transactionTypes) {\n  await prismaAccounting.transactionType.create({ data: transactionType });\n}\ncreatedType = await prismaAccounting.transactionType.findMany({\n  where: { createdByAdminIdentifier: \"11\" },\n});\nconst addMoneyTransactionToAccount1 =\n  await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: account1.id,\n      toAccountId: account2.id,\n      transactionTypeId: createdType[0].id,\n      amount: Number(100),\n      referenceNo: \"Initial Funding\",\n      note: \"Adding initial balance to sender's account\",\n    },\n  });\nawait prismaAccounting.ledger.create({\n  data: {\n    accountId: account1.id,\n    transactionId: addMoneyTransactionToAccount1.id,\n    amount: Number(100),\n    description: \"Add money transaction\",\n    type: \"CREDIT\",\n  },\n});\nconst addMoneyTransactionToAccount2 =\n  await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: account2.id,\n      toAccountId: account1.id,\n      transactionTypeId: createdType[0].id,\n      amount: Number(50),\n      referenceNo: \"Initial Funding\",\n      note: \"Adding initial balance to sender's account\",\n    },\n  });\nawait prismaAccounting.ledger.create({\n  data: {\n    accountId: account2.id,\n    transactionId: addMoneyTransactionToAccount2.id,\n    amount: Number(50),\n    description: \"Add money transaction\",\n    type: \"CREDIT\",\n  },\n});",
              "err": {},
              "uuid": "5bd32806-03dc-40f1-8c71-d6cd403ed6b4",
              "parentUUID": "e2441005-e542-4d14-b8e6-c535f7f517e6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Request Money \"",
              "fullTitle": "Request Money  \"after all\" hook in \"Request Money \"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "732688b5-2540-4798-9430-76b6ec5268a5",
              "parentUUID": "e2441005-e542-4d14-b8e6-c535f7f517e6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should request money successfully for all valid scenarios",
              "fullTitle": "Request Money  should request money successfully for all valid scenarios",
              "timedOut": false,
              "duration": 145,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestData = {\n  requestedNumber: appUser2.phone,\n  requestAmount: 50,\n  transactionTypeCode: createdType[0].transactionCode,\n};\ntoken = generateUserToken(appUser1.id, appUser1.phone, \"USER\");\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.requestMoney}`)\n  .withJson(requestData)\n  .expectStatus(200);\nconst requestsInDb = await prismaApi.requestMoney.findMany({});\nexpect(requestsInDb.length).to.be.equal(1);\nexpect(requestsInDb[0].requestSenderNumber).to.be.equal(appUser1.phone);\nexpect(requestsInDb[0].requestReceiverNumber).to.be.equal(appUser2.phone);\nexpect(Number(requestsInDb[0].requestedAmount)).to.be.equal(50);\nexpect(requestsInDb[0].requesterId).to.be.equal(appUser1.id);\nconst token2 = generateUserToken(appUser2.id, appUser2.phone, \"USER\");",
              "err": {},
              "uuid": "e06f6353-71d2-4105-a9ac-8532aed71aa4",
              "parentUUID": "e2441005-e542-4d14-b8e6-c535f7f517e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error if the requested Number is not P-pay user",
              "fullTitle": "Request Money  should show error if the requested Number is not P-pay user",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestData = {\n  requestedNumber: \"01711626600\",\n  requestAmount: 50,\n  transactionTypeCode: createdType[0].transactionCode,\n};\ntoken = generateUserToken(appUser1.id, appUser1.phone, \"USER\");\nconst response = await pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.requestMoney}`)\n  .withJson(requestData)\n  .expectStatus(400);\nexpect(response.body.error).to.equal(\"Receiver Doesn't exist\");",
              "err": {},
              "uuid": "faf8ad9f-57fa-4846-b569-17bba4ebe3e6",
              "parentUUID": "e2441005-e542-4d14-b8e6-c535f7f517e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error if the user requests negative amount",
              "fullTitle": "Request Money  should show error if the user requests negative amount",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestData = {\n  requestedNumber: appUser2.phone,\n  requestAmount: -50,\n  transactionTypeCode: createdType[0].transactionCode,\n};\ntoken = generateUserToken(appUser1.id, appUser1.phone, \"USER\");\nconst response = await pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.requestMoney}`)\n  .withJson(requestData)\n  .expectStatus(400);\nexpect(response.body.errors.requestAmount).to.equal(\n  \"Count must be at least 1\"\n);",
              "err": {},
              "uuid": "f3d4dba6-b315-426d-8000-8adf77b932ab",
              "parentUUID": "e2441005-e542-4d14-b8e6-c535f7f517e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error if user tries to request money to his number",
              "fullTitle": "Request Money  should show error if user tries to request money to his number",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestData = {\n  requestedNumber: appUser1.phone,\n  requestAmount: 50,\n  transactionTypeCode: createdType[0].transactionCode,\n};\ntoken = generateUserToken(appUser1.id, appUser1.phone, \"USER\");\nconst response = await pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.requestMoney}`)\n  .withJson(requestData)\n  .expectStatus(500);\nexpect(response.body.error).to.equal(\"Can't request money to own account\");",
              "err": {},
              "uuid": "75252915-2acc-44d3-9811-40622f1736ea",
              "parentUUID": "e2441005-e542-4d14-b8e6-c535f7f517e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error if requestedAmount is less than Min Amount of Transaction Type",
              "fullTitle": "Request Money  should show error if requestedAmount is less than Min Amount of Transaction Type",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { transactionType } = await createTrxnTypeWithMinAmount(50);\nconst requestData = {\n  requestedNumber: appUser2.phone,\n  requestAmount: 49,\n  transactionTypeCode: transactionType.transactionCode,\n};\ntoken = generateUserToken(appUser1.id, appUser1.phone, \"USER\");\nconst response = await pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.requestMoney}`)\n  .withJson(requestData)\n  .expectStatus(400);\nexpect(response.body.error).to.equal(\n  \"Transaction amount is less than minimum amount for this transaction type\"\n);",
              "err": {},
              "uuid": "8f0682fd-8682-46fe-a6f9-00fc98eb6481",
              "parentUUID": "e2441005-e542-4d14-b8e6-c535f7f517e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error if the requestedAmount is more than Max Amount of Transaction Type",
              "fullTitle": "Request Money  should show error if the requestedAmount is more than Max Amount of Transaction Type",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const { transactionType } = await createTrxnTypeWithMaxAmount(50);\n    const requestData = {\n      requestedNumber: appUser2.phone,\n      requestAmount: 5001,\n      transactionTypeCode: transactionType.transactionCode,\n    };\n    token = generateUserToken(appUser1.id, appUser1.phone, \"USER\");\n    const response = await pactum\n      .spec()\n      .withMethod(\"POST\")\n      .withBearerToken(token)\n      .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.requestMoney}`)\n      .withJson(requestData)\n      .expectStatus(400);\n    expect(response.body.error).to.equal(\n      \"Transaction amount is more than maximum amount for this transaction type\"\n    );\n    expect(requestData.requestAmount).to.greaterThan(createdType[0].maxAmount);",
              "err": {},
              "uuid": "98dd87ed-456d-443d-9d69-57aee0d870e4",
              "parentUUID": "e2441005-e542-4d14-b8e6-c535f7f517e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error for Invalid Transaction Type Code",
              "fullTitle": "Request Money  should show error for Invalid Transaction Type Code",
              "timedOut": false,
              "duration": 18,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const requestData = {\n  requestedNumber: appUser2.phone,\n  requestAmount: 50,\n  transactionTypeCode: 444444444,\n};\ntoken = generateUserToken(appUser1.id, appUser1.phone, \"USER\");\nconst response = await pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.requestMoney}`)\n  .withJson(requestData)\n  .expectStatus(406);\nexpect(response.body.error).to.equal(\n  \"Transaction Type not found with Transaction code: 4444\"\n);",
              "err": {
                "message": "AssertionError: expected 'Transaction Type not found with Trans…' to equal 'Transaction Type not found with Trans…'",
                "estack": "AssertionError: expected 'Transaction Type not found with Trans…' to equal 'Transaction Type not found with Trans…'\n    at Context.<anonymous> (file:///opt/app/src/requestMoney/requestMoney.test.js:451:36)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Transaction Type not found with Transaction Code: 444444444\n+ Transaction Type not found with Transaction code: 4444\n"
              },
              "uuid": "70c55880-61c6-4fca-b985-3ac83414dbe7",
              "parentUUID": "e2441005-e542-4d14-b8e6-c535f7f517e6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e06f6353-71d2-4105-a9ac-8532aed71aa4",
            "faf8ad9f-57fa-4846-b569-17bba4ebe3e6",
            "f3d4dba6-b315-426d-8000-8adf77b932ab",
            "75252915-2acc-44d3-9811-40622f1736ea",
            "8f0682fd-8682-46fe-a6f9-00fc98eb6481",
            "98dd87ed-456d-443d-9d69-57aee0d870e4"
          ],
          "failures": [
            "70c55880-61c6-4fca-b985-3ac83414dbe7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 236,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3726486f-7ba7-4399-8be7-43d41f89cef6",
          "title": "Get Saved Transaction After Send Money",
          "fullFile": "/opt/app/src/sendMoney/getSaveTrxnSendMoney.test.js",
          "file": "/src/sendMoney/getSaveTrxnSendMoney.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Get Saved Transaction After Send Money\"",
              "fullTitle": "Get Saved Transaction After Send Money \"before all\" hook in \"Get Saved Transaction After Send Money\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "0a720845-9206-4f1c-bca2-f0a8f50f92cf",
              "parentUUID": "3726486f-7ba7-4399-8be7-43d41f89cef6",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Get Saved Transaction After Send Money\"",
              "fullTitle": "Get Saved Transaction After Send Money \"before each\" hook in \"Get Saved Transaction After Send Money\"",
              "timedOut": false,
              "duration": 177,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nuserId1 = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577237\",\n  },\n});\nuserId2 = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01711106485\",\n  },\n});\ntokenUser1 = generateUserToken(userId1.id, \"01317577237\", \"USER\");\ntokenUser2 = generateUserToken(userId2.id, \"01711106485\", \"USER\");\nconst chartOfAccounts = await createBasicChartOfAccounts();\ncustomer = chartOfAccounts.find(\n  (account) => account.code === \"customer-01\"\n);\nawait setupTransactionTypes(chartOfAccounts);\ntype = await prismaAccounting.transactionType.findUnique({\n  where: { transactionCode: \"1002\" },\n});\ntrxnTypeId = type.id;\nawait createUserAccounts(chartOfAccounts);\ncustomerAccount1 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\ncustomerAccount2 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01711106485\" },\n});\ncustomerAccount3 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01717084774\" },\n});\ncustomerAccount4 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01717084775\" },\n});\ncustomerAccount5 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01717084776\" },\n});\ncustomerAccount6 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01717084777\" },\n});\ncustomerAccount7 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01717084778\" },\n});\nawait addInitialBalance(customerAccount1, 50000);",
              "err": {},
              "uuid": "0873e527-52da-4a57-b2f2-0cc06b933bfb",
              "parentUUID": "3726486f-7ba7-4399-8be7-43d41f89cef6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Get Saved Transaction After Send Money\"",
              "fullTitle": "Get Saved Transaction After Send Money \"after all\" hook in \"Get Saved Transaction After Send Money\"",
              "timedOut": false,
              "duration": 17,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$disconnect();\nawait prismaApi.$disconnect();\nawait prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "6797b639-e851-43d7-9c8e-fbfb51bbffa3",
              "parentUUID": "3726486f-7ba7-4399-8be7-43d41f89cef6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get saved transaction list",
              "fullTitle": "Get Saved Transaction After Send Money should get saved transaction list",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await insertSavedTransaction({\n  fromAccount: customerAccount1,\n  toAccount: customerAccount2,\n  transactionTypeId: trxnTypeId,\n  amount: 100,\n  userId: userId1,\n});\nawait pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.saveTrxnSendMoney}`)\n  .expectStatus(200);\nconst saveTrxnSendMoney = await prismaApi.sendMoneySave.findMany({});\nexpect(saveTrxnSendMoney).to.have.lengthOf(1);\nexpect(saveTrxnSendMoney[0].amount.toString()).to.equal(\"100\");\nexpect(saveTrxnSendMoney[0].save).to.be.true;\nexpect(saveTrxnSendMoney[0].fromAccount).to.equal(\"01317577237\");\nexpect(saveTrxnSendMoney[0].toAccount).to.equal(\"01711106485\");\nexpect(saveTrxnSendMoney[0].transactionTypeCode).to.equal(\"1002\");\nexpect(saveTrxnSendMoney[0].userId.toString()).to.equal(\n  userId1.id.toString()\n);\nexpect(saveTrxnSendMoney[0].createdAt).to.not.be.null;\nexpect(saveTrxnSendMoney[0].updatedAt).to.not.be.null;\nexpect(saveTrxnSendMoney[0].receiverPhone).to.equal(\"01711106485\");",
              "err": {},
              "uuid": "e4f1404c-9bda-4c54-9f1a-82fa3d1af5fe",
              "parentUUID": "3726486f-7ba7-4399-8be7-43d41f89cef6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the first transaction of ToAccount even after multiple transactions to the same account",
              "fullTitle": "Get Saved Transaction After Send Money should show the first transaction of ToAccount even after multiple transactions to the same account",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await insertSavedTransaction({\n  fromAccount: customerAccount1,\n  toAccount: customerAccount2,\n  transactionTypeId: trxnTypeId,\n  amount: 100,\n  userId: userId1,\n});\nawait insertSavedTransaction({\n  fromAccount: customerAccount1,\n  toAccount: customerAccount2,\n  transactionTypeId: trxnTypeId,\n  amount: 200,\n  userId: userId1,\n});\nawait pactum\n.spec()\n.withBearerToken(tokenUser1)\n.withMethod(\"GET\")\n.withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.saveTrxnSendMoney}`)\n.expectStatus(200);\nconst saveTrxnSendMoney = await prismaApi.sendMoneySave.findMany({});\nexpect(saveTrxnSendMoney).to.have.lengthOf(1);\nexpect(saveTrxnSendMoney[0].amount.toString()).to.equal(\"100\");",
              "err": {},
              "uuid": "d1f85d65-416c-4400-998c-1b34d56ac394",
              "parentUUID": "3726486f-7ba7-4399-8be7-43d41f89cef6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should save only one transaction per unique toAccount",
              "fullTitle": "Get Saved Transaction After Send Money should save only one transaction per unique toAccount",
              "timedOut": false,
              "duration": 75,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const uniqueToAccounts = [\n  \"01717084774\",\n  \"01717084775\",\n  \"01717084776\",\n  \"01717084777\",\n  \"01717084778\",\n];\nfor (let i = 0; i < 10; i++) {\n  await insertSavedTransaction({\n    fromAccount: customerAccount1,\n    toAccount: { identifier: uniqueToAccounts[i % 5] },\n    transactionTypeId: trxnTypeId,\n    amount: 100,\n    userId: userId1,\n  });\n}\nawait pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.saveTrxnSendMoney}`)\n  .expectStatus(200)\n  .returns(\"body\");\nconst savedTransactions = await prismaApi.sendMoneySave.findMany({});\nexpect(savedTransactions).to.have.lengthOf(5);\nconst savedToAccounts = savedTransactions.map((txn) => txn.toAccount);\nexpect(savedToAccounts).to.have.members(uniqueToAccounts);",
              "err": {},
              "uuid": "d7789696-70ed-40f8-afb2-d834fc7398a7",
              "parentUUID": "3726486f-7ba7-4399-8be7-43d41f89cef6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return correct pagination and size",
              "fullTitle": "Get Saved Transaction After Send Money should return correct pagination and size",
              "timedOut": false,
              "duration": 82,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const uniqueToAccounts = [\n  \"01717084774\",\n  \"01717084775\",\n  \"01717084776\",\n  \"01717084777\",\n  \"01717084778\",\n];\nfor (let i = 0; i < 10; i++) {\n  await insertSavedTransaction({\n    fromAccount: customerAccount1,\n    toAccount: { identifier: uniqueToAccounts[i % 5] },\n    transactionTypeId: trxnTypeId,\n    amount: 100,\n    userId: userId1,\n  });\n}\nconst response = await pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"GET\")\n  .withPath(\n    `${ApiUrls.apiBaseUrl}${ApiUrls.saveTrxnSendMoney}?page=0&size=3`\n  )\n  .expectStatus(200);\nexpect(response.body)\n  .to.have.property(\"saveTransactions\")\n  .that.is.an(\"array\");\nexpect(response.body.saveTransactions).to.have.lengthOf(3);\nexpect(response.body.saveTransactions[0].toAccount).to.equal(\"01717084778\");\nexpect(response.body.saveTransactions[1].toAccount).to.equal(\"01717084777\");\nexpect(response.body.saveTransactions[2].toAccount).to.equal(\"01717084776\");\nexpect(response.body.pagination.hasNext).to.equal(true);\nexpect(response.body.pagination.currentPageTotalCount).to.equal(3);\nexpect(response.body.pagination.totalCount).to.equal(5);\nexpect(response.body.pagination.currentPage).to.equal(0);",
              "err": {
                "message": "AssertionError: expected undefined to equal true",
                "estack": "AssertionError: expected undefined to equal true\n    at Context.<anonymous> (file:///opt/app/src/sendMoney/getSaveTrxnSendMoney.test.js:290:49)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d0d43000-0ca7-4493-a23c-de02f3d647cb",
              "parentUUID": "3726486f-7ba7-4399-8be7-43d41f89cef6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e4f1404c-9bda-4c54-9f1a-82fa3d1af5fe",
            "d1f85d65-416c-4400-998c-1b34d56ac394",
            "d7789696-70ed-40f8-afb2-d834fc7398a7"
          ],
          "failures": [
            "d0d43000-0ca7-4493-a23c-de02f3d647cb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 201,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "37611abd-a029-4ca6-8884-6a97deaf4fab",
          "title": "Send Money API Check:(POST)",
          "fullFile": "/opt/app/src/sendMoney/sendMoney.test.js",
          "file": "/src/sendMoney/sendMoney.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook: send money in \"Send Money API Check:(POST)\"",
              "fullTitle": "Send Money API Check:(POST) \"before all\" hook: send money in \"Send Money API Check:(POST)\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();\nawait redisClient.connect();",
              "err": {},
              "uuid": "afd71259-e15f-4a68-88ce-7fbec50ef6d8",
              "parentUUID": "37611abd-a029-4ca6-8884-6a97deaf4fab",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook: send money in \"Send Money API Check:(POST)\"",
              "fullTitle": "Send Money API Check:(POST) \"before each\" hook: send money in \"Send Money API Check:(POST)\"",
              "timedOut": false,
              "duration": 147,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577237\",\n  },\n});\ntoken = generateUserToken(userId.id, \"01317577237\", \"USER\");\nconst chartOfAccounts = await createBasicChartOfAccounts();\ncustomer = chartOfAccounts.find(\n  (account) => account.code === \"customer-01\"\n);\ntopUpProvider = chartOfAccounts.find(\n  (account) => account.code === \"top-up-providers-01\"\n);\nconst transactionTypes = await setupTransactionTypes(chartOfAccounts);\nawait createUserAccounts(chartOfAccounts);\nsender = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\nreceiver = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01711106485\" },\n});\ngp = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"gp-wallet-01\" },\n});\nteletalk = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"teletalk-wallet-01\" },\n});\nbanglalink = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"bl-wallet-01\" },\n});\nconst type = await prismaAccounting.transactionType.findUnique({\n  where: { transactionCode: \"1001\" },\n});",
              "err": {},
              "uuid": "a392c626-e1b0-4f23-a947-c5b150ea9776",
              "parentUUID": "37611abd-a029-4ca6-8884-6a97deaf4fab",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: send money in \"Send Money API Check:(POST)\"",
              "fullTitle": "Send Money API Check:(POST) \"after all\" hook: send money in \"Send Money API Check:(POST)\"",
              "timedOut": false,
              "duration": 136,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577237\",\n  },\n});\ntoken = generateUserToken(userId.id, \"01317577237\", \"USER\");\nconst chartOfAccounts = await createBasicChartOfAccounts();\ncustomer = chartOfAccounts.find(\n  (account) => account.code === \"customer-01\"\n);\ntopUpProvider = chartOfAccounts.find(\n  (account) => account.code === \"top-up-providers-01\"\n);\nconst transactionTypes = await setupTransactionTypes(chartOfAccounts);\nawait createUserAccounts(chartOfAccounts);\nsender = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\nreceiver = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01711106485\" },\n});\nonholdUser = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577238\" }\n});\nmaxwallet = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577210\" }\n});\ndailyLimitAmountUser = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01715170020\" }\n});\nconst testConfig = {\n  baseUrl: ApiUrls.apiBaseUrl,\n  endpoint: ApiUrls.doSendMoney,\n  token: token,\n  sender: sender,\n  receiver: receiver,\n  transactionTypeCode: \"1002\",\n  userId: userId.id,\n  requestBody: {\n    amount: 100,\n    receiverPhone: receiver.identifier,\n    transactionTypeCode: \"1002\",\n    verifiedPinToken: verifiedPinToken\n  },\n  requestBodyForNotFullActiveUser: {\n    amount: 200,\n    receiverPhone: receiver.identifier,\n    transactionTypeCode: \"1002\",\n    verifiedPinToken: verifiedPinToken\n  },\n  requestBodyForMinWalleAmount: {\n    amount: 4,\n    receiverPhone: receiver.identifier,\n    transactionTypeCode: \"1002\",\n    verifiedPinToken: verifiedPinToken\n  },\n  requestBodyForMaxWalleAmount: {\n    amount: 200,\n    receiverPhone: receiver.identifier,\n    transactionTypeCode: \"1002\",\n    verifiedPinToken: verifiedPinToken\n  },\n  requestBodyForDailyLimitAmount: {\n    amount: 100,\n    receiverPhone: receiver.identifier,\n    transactionTypeCode: \"1002\",\n    verifiedPinToken: verifiedPinToken\n  },\n  requestBodyForTypeMinAmount: {\n    amount: 9,\n    receiverPhone: receiver.identifier,\n    transactionTypeCode: \"1002\",\n    verifiedPinToken: verifiedPinToken\n  },\n  requestBodyForTypeMaxAmount: {\n    amount: 1000000,\n    receiverPhone: receiver.identifier,\n    transactionTypeCode: \"1002\",\n    verifiedPinToken: verifiedPinToken\n  },\n}\nawait runTransactionTests(testConfig);\n\nawait prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();\nawait redisClient.disconnect();",
              "err": {},
              "uuid": "c54d3292-b0e9-4c8d-b027-83cc16faaaf4",
              "parentUUID": "37611abd-a029-4ca6-8884-6a97deaf4fab",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: send money in \"Send Money API Check:(POST)\"",
              "fullTitle": "Send Money API Check:(POST) \"after each\" hook: send money in \"Send Money API Check:(POST)\"",
              "timedOut": false,
              "duration": 30,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait redisClient.FLUSHALL();",
              "err": {},
              "uuid": "ad80c896-2c1f-447e-b788-890b0c7d0b51",
              "parentUUID": "37611abd-a029-4ca6-8884-6a97deaf4fab",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 200 for successful send money and save this transaction",
              "fullTitle": "Send Money API Check:(POST) should return 200 for successful send money and save this transaction",
              "timedOut": false,
              "duration": 46,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await addInitialBalance(sender, 1000000);\n  \n  const verifiedPinToken = generateVerifyPinToken(\"1002\", userId.id, \"01317577237\", \"USER\");\n    await redisClient.FLUSHALL();\n\n    await redisClient.HSET(`token:${userId.phone}`, 'token', verifiedPinToken);\n\n    await redisClient.HGET(`token:${userId.phone}`, 'token');\n\n    await pactum\n.spec()\n.post(`${ApiUrls.apiBaseUrl}${ApiUrls.doSendMoney}`)\n.withBearerToken(token)\n.withJson({\n  amount: 100,\n  receiverPhone: receiver.identifier,\n  transactionTypeCode: \"1002\",\n  save: true,\n  verifiedPinToken: verifiedPinToken\n})\n.expectStatus(200);\n\n    await checkSuccess({\ngroupId: \"topup\",\ntopic: \"send_money_account_complete\",\nlog: 'Send Money: From 01317577237 to 01711106485',\namount: 100,\ncallback: async () => {\n}\n    })",
              "err": {
                "message": "AssertionError: HTTP status 400 !== 200\n\n400 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 400 !== 200\n\n400 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "e568de22-a4e8-4697-9ed0-406966260c2f",
              "parentUUID": "37611abd-a029-4ca6-8884-6a97deaf4fab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e568de22-a4e8-4697-9ed0-406966260c2f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 46,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "66269584-6da6-446c-b03d-792d01025921",
          "title": "Split Bill",
          "fullFile": "/opt/app/src/splitBill/splitBill.test.js",
          "file": "/src/splitBill/splitBill.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Split Bill\"",
              "fullTitle": "Split Bill \"before all\" hook in \"Split Bill\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "77273cee-6849-465f-a179-1e869a036f02",
              "parentUUID": "66269584-6da6-446c-b03d-792d01025921",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Split Bill\"",
              "fullTitle": "Split Bill \"before each\" hook in \"Split Bill\"",
              "timedOut": false,
              "duration": 168,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nconst userId1 = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577237\",\n  },\n});\nconst userId2 = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01711106485\",\n  },\n});\nconst userId3 = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577238\",\n  },\n});\nconst merchantUser = await prismaAuth.appUser.findUnique({\n  where: { phone: \"01999999999\" },\n});\ntokenUser1 = generateUserToken(userId1.id, \"01317577237\", \"USER\");\ntokenUser2 = generateUserToken(userId2.id, \"01711106485\", \"USER\");\ntokenUser3 = generateUserToken(userId3.id, \"01317577238\", \"USER\");\nconst chartOfAccounts = await createBasicChartOfAccounts();\ncustomer = chartOfAccounts.find(\n  (account) => account.code === \"customer-01\"\n);\nawait setupTransactionTypes(chartOfAccounts);\ntype = await prismaAccounting.transactionType.findUnique({\n  where: { transactionCode: \"make-payment-001\" },\n});\ntrxnTypeId = type.id;\nawait createUserAccounts(chartOfAccounts);\ncustomerAccount1 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\ncustomerAccount2 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01711106485\" },\n});\ncustomerAccount3 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577238\" },\n});\nawait prismaApi.merchantUser.create({\n  data: {\n    userId: merchantUser.id,\n    settlementFrequency: \"MONTHLY\",\n  },\n});\nmerchantAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01999999999\" },\n});\nawait addInitialBalance(customerAccount1, 50000);",
              "err": {},
              "uuid": "d87b598d-adaf-4514-911c-eef20ac25031",
              "parentUUID": "66269584-6da6-446c-b03d-792d01025921",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Split Bill\"",
              "fullTitle": "Split Bill \"after all\" hook in \"Split Bill\"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$disconnect();\nawait prismaApi.$disconnect();\nawait prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "d9e71591-4fdd-4ce6-b7d9-8568a9d5c56c",
              "parentUUID": "66269584-6da6-446c-b03d-792d01025921",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should split bill successfully for all valid scenarios",
              "fullTitle": "Split Bill should split bill successfully for all valid scenarios",
              "timedOut": false,
              "duration": 199,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(7000);\nconst splitBillData = {\n  totalAmount: 100,\n  merchantNumber: \"01999999999\",\n  requestedTo: [\n    { phone: \"01711106485\", amount: 50 },\n    { phone: \"01317577238\", amount: 50 },\n  ],\n  transactionTypeCode: \"make-payment-001\",\n  note: \"Dinner with friends\",\n};\nawait pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"POST\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.splitBill}`)\n  .withJson(splitBillData)\n  .expectStatus(200);\nconst splitBillTransaction = await prismaApi.splitBill.findFirst({\n  where: { requestReceiverNumber: \"01999999999\" },\n});\nexpect(splitBillTransaction).to.not.be.null;\nexpect(splitBillTransaction.status).to.equal(\"SUCCESS\");\nrefNumber = splitBillTransaction.referenceNumber;\nconst reqMoney = await prismaApi.requestMoney.findMany({\n  where: { splitBillId: splitBillTransaction.id.toString() },\n});\nawait checkSuccess({\n  groupId: \"splitbill\",\n  topic: \"split_bill_payment_result\",\n  log: \"Make Payment: From 01317577237 to 01999999999\",\n  amount: 100,\n  message: {\n    value: JSON.stringify({\n      referenceNo: refNumber,\n      status: \"SUCCESSFUL\",\n      totalAmount: 100,\n      note: \"Dinner with friends\",\n      totalAmountPaid: 100,\n      requestedTo: [\n        { phone: \"01711106485\", amount: 50 },\n        { phone: \"01317577238\", amount: 50 },\n      ],\n    }),\n  },\n  callback: async () => {\n    const transactionFromDB = await prismaAccounting.transaction.findFirst({\n      where: { referenceNo: refNumber },\n    });\n    expect(transactionFromDB).to.not.be.null;\n    expect(transactionFromDB.status).to.equal(\"SUCCESSFUL\");\n    expect(transactionFromDB.amount).to.equal(100);\n    const splitBillTransaction = await prismaApi.splitBill.findFirst({\n      where: { requestReceiverNumber: \"01999999999\" },\n    });\n    expect(splitBillTransaction).to.not.be.null;\n    expect(splitBillTransaction.status).to.equal(\"SUCCESS\");\n  },\n});",
              "err": {
                "message": "AssertionError: expected 'PENDING' to equal 'SUCCESS'",
                "estack": "AssertionError: expected 'PENDING' to equal 'SUCCESS'\n    at Context.<anonymous> (file:///opt/app/src/splitBill/splitBill.test.js:206:44)",
                "diff": "- PENDING\n+ SUCCESS\n"
              },
              "uuid": "f3fb41f0-5127-4d29-84ed-bf7485e5e452",
              "parentUUID": "66269584-6da6-446c-b03d-792d01025921",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error if the merchant doesnt exist",
              "fullTitle": "Split Bill should show error if the merchant doesnt exist",
              "timedOut": false,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const splitBillData = {\n  totalAmount: 100,\n  merchantNumber: \"01787878787\",\n  requestedTo: [\n    { phone: \"01711106485\", amount: 50 },\n    { phone: \"01317577238\", amount: 50 },\n  ],\n  transactionTypeCode: \"make-payment-001\",\n  note: \"Dinner with friends\",\n};\nawait pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"POST\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.splitBill}`)\n  .withJson(splitBillData)\n  .expectStatus(400);",
              "err": {
                "message": "AssertionError: HTTP status 502 !== 400\n\n502 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 502 !== 400\n\n502 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 502\n+ 400\n"
              },
              "uuid": "2f0f0684-8d20-45b7-a507-3b0341f2f7c9",
              "parentUUID": "66269584-6da6-446c-b03d-792d01025921",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show error if the user requests in his own account for Split Bill",
              "fullTitle": "Split Bill should show error if the user requests in his own account for Split Bill",
              "timedOut": false,
              "duration": 113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const splitBillData = {\n  totalAmount: 100,\n  merchantNumber: \"01999999999\",\n  requestedTo: [\n    { phone: \"01317577237\", amount: 50 },\n    { phone: \"01317577238\", amount: 50 },\n  ],\n  transactionTypeCode: \"make-payment-001\",\n  note: \"Dinner with friends\",\n};\nawait pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"POST\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.splitBill}`)\n  .withJson(splitBillData)\n  .expectStatus(500);",
              "err": {},
              "uuid": "3e1c857b-081f-414c-82a5-f3a7728a60cc",
              "parentUUID": "66269584-6da6-446c-b03d-792d01025921",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3e1c857b-081f-414c-82a5-f3a7728a60cc"
          ],
          "failures": [
            "f3fb41f0-5127-4d29-84ed-bf7485e5e452",
            "2f0f0684-8d20-45b7-a507-3b0341f2f7c9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 327,
          "root": false,
          "rootEmpty": false,
          "_timeout": 7000
        },
        {
          "uuid": "d0bbef18-4856-4909-acb3-d95e28e9768c",
          "title": "Get Saved Transaction After Top Up",
          "fullFile": "/opt/app/src/topUp/getSaveTrxnTopUp.test.js",
          "file": "/src/topUp/getSaveTrxnTopUp.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Get Saved Transaction After Top Up\"",
              "fullTitle": "Get Saved Transaction After Top Up \"before all\" hook in \"Get Saved Transaction After Top Up\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "9b31959d-90df-4124-8ab9-63d230b55847",
              "parentUUID": "d0bbef18-4856-4909-acb3-d95e28e9768c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Get Saved Transaction After Top Up\"",
              "fullTitle": "Get Saved Transaction After Top Up \"before each\" hook in \"Get Saved Transaction After Top Up\"",
              "timedOut": false,
              "duration": 156,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nuserId1 = await prismaAuth.appUser.findFirst({\n  where: { phone: \"01317577237\" },\n});\ntokenUser1 = generateUserToken(userId1.id, \"01317577237\", \"USER\");\nconst chartOfAccounts = await createBasicChartOfAccounts();\nawait setupTransactionTypes(chartOfAccounts);\nconst TopUpType = await prismaAccounting.transactionType.findUnique({\n  where: { transactionCode: \"1005\" },\n});\nTopUpTypeId = TopUpType.id;\nawait createUserAccounts(chartOfAccounts);\ncustomerAccount1 = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\noperatorAccountForGrameenphone =\n  await prismaAccounting.userAccount.findUnique({\n    where: { identifier: \"gp-wallet-01\" },\n  });\noperatorIdForGrameenphone = await prismaApi.operator.findFirst({\n  where: {\n    accountIdentifier: \"gp-wallet-01\",\n  type: \"GRAMEENPHONE\",\n  },\n});\noperatorAccountForBanglalink =\n  await prismaAccounting.userAccount.findUnique({\n    where: { identifier: \"bl-wallet-01\" },\n  });\noperatorIdForBanglalink = await prismaApi.operator.findFirst({\n  where: {\n    accountIdentifier: \"bl-wallet-01\",\n   type: \"BANGLALINK\",\n  },\n});\noperatorAccountForTeletalk = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"teletalk-wallet-01\" },\n});\noperatorIdForTeletalk = await prismaApi.operator.findFirst({\n  where: {\n    accountIdentifier: \"teletalk-wallet-01\",\n   type: \"TELETALK\",\n  },\n});\nawait addInitialBalance(customerAccount1, 100000);",
              "err": {},
              "uuid": "179e89c8-ce57-4dd3-82cb-4bb4223b31cf",
              "parentUUID": "d0bbef18-4856-4909-acb3-d95e28e9768c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Get Saved Transaction After Top Up\"",
              "fullTitle": "Get Saved Transaction After Top Up \"after all\" hook in \"Get Saved Transaction After Top Up\"",
              "timedOut": false,
              "duration": 15,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$disconnect();\nawait prismaApi.$disconnect();\nawait prismaAccounting.$disconnect();",
              "err": {},
              "uuid": "9d696c23-043e-4e33-95d3-507f52d73e82",
              "parentUUID": "d0bbef18-4856-4909-acb3-d95e28e9768c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get saved Top Up transaction list",
              "fullTitle": "Get Saved Transaction After Top Up should get saved Top Up transaction list",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await insertTopUpSavedTransaction({\n      amount: 1000,\n      fromAccount: customerAccount1,\n      toAccount: operatorAccountForGrameenphone,\n      transactionTypeId: TopUpTypeId,\n      transactionTypeCode: \"1005\",\n      operatorId: operatorIdForGrameenphone.id,\n      operatorType: \"GRAMEENPHONE\",\n      topUpId: 1,\n    });\n    await pactum\n      .spec()\n      .withBearerToken(tokenUser1)\n      .get(`${ApiUrls.apiBaseUrl}${ApiUrls.savetrxnTopUp}`)\n      .expectStatus(200);\n    const savedTopUpTrxns = await prismaApi.topUpSave.findMany({});\n    expect(savedTopUpTrxns).to.have.lengthOf(1);\n    expect(savedTopUpTrxns[0].amount.toString()).to.equal(\"1000\");\n    expect(savedTopUpTrxns[0].save).to.be.true;\n    expect(savedTopUpTrxns[0].fromAccount).to.equal(\"01317577237\");\n    expect(savedTopUpTrxns[0].toAccount).to.equal(\"gp-wallet-01\");\n    expect(savedTopUpTrxns[0].transactionTypeCode).to.equal(\"1005\");\n    expect(savedTopUpTrxns[0].operatorId.toString()).to.equal(\n      operatorIdForGrameenphone.id.toString()\n    );",
              "err": {
                "message": "TypeError: Cannot read properties of null (reading 'id')",
                "estack": "TypeError: Cannot read properties of null (reading 'id')\n    at Context.<anonymous> (file:///opt/app/src/topUp/getSaveTrxnTopUp.test.js:182:45)",
                "diff": null
              },
              "uuid": "b7f366b9-72a0-476f-ba99-7c837d111b82",
              "parentUUID": "d0bbef18-4856-4909-acb3-d95e28e9768c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the first Utility Pay transaction of bank account even after multiple transactions with the same bank account",
              "fullTitle": "Get Saved Transaction After Top Up should show the first Utility Pay transaction of bank account even after multiple transactions with the same bank account",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await insertTopUpSavedTransaction({\n  amount: 1000,\n  fromAccount: customerAccount1,\n  toAccount: operatorAccountForGrameenphone,\n  transactionTypeId: TopUpTypeId,\n  transactionTypeCode: \"1005\",\n  operatorId: operatorIdForGrameenphone.id,\n  operatorType: \"GRAMEENPHONE\",\n  topUpId: 1,\n});\nawait insertTopUpSavedTransaction({\n  amount: 2000,\n  fromAccount: customerAccount1,\n  toAccount: operatorAccountForGrameenphone,\n  transactionTypeId: TopUpTypeId,\n  transactionTypeCode: \"1005\",\n  operatorId: operatorIdForGrameenphone.id,\n  operatorType: \"GRAMEENPHONE\",\n  topUpId: 1,\n});\n\nawait pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.savetrxnTopUp}`)\n  .expectStatus(200)\n  .returns(\"body\");\nconst savedTopUpTrxns = await prismaApi.topUpSave.findMany({});\nexpect(savedTopUpTrxns).to.have.lengthOf(1);\nexpect(savedTopUpTrxns[0].amount.toString()).to.equal(\"1000\");\nexpect(savedTopUpTrxns[0].toAccount).to.equal(\"gp-wallet-01\");",
              "err": {
                "message": "TypeError: Cannot read properties of null (reading 'id')",
                "estack": "TypeError: Cannot read properties of null (reading 'id')\n    at Context.<anonymous> (file:///opt/app/src/topUp/getSaveTrxnTopUp.test.js:213:45)",
                "diff": null
              },
              "uuid": "36ef7e22-881d-4bd8-9a13-40056d09b42d",
              "parentUUID": "d0bbef18-4856-4909-acb3-d95e28e9768c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should save only one add money transaction per unique bank account",
              "fullTitle": "Get Saved Transaction After Top Up should save only one add money transaction per unique bank account",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "for (let i = 0; i < 10; i++) {\n      await insertTopUpSavedTransaction({\n        amount: 2000,\n        fromAccount: customerAccount1,\n        toAccount: operatorAccountForBanglalink,\n        transactionTypeId: TopUpTypeId,\n        transactionTypeCode: \"1005\",\n        operatorId: operatorIdForBanglalink.id,\n        operatorType: \"BANGLALINK\",\n        topUpId: 1,\n      });\n    }\n    for (let i = 0; i < 10; i++) {\n      await insertTopUpSavedTransaction({\n        amount: 2000,\n        fromAccount: customerAccount1,\n        toAccount: operatorAccountForGrameenphone,\n        transactionTypeId: TopUpTypeId,\n        transactionTypeCode: \"1005\",\n        operatorId: operatorIdForGrameenphone.id,\n        operatorType: \"GRAMEENPHONE\",\n        topUpId: 1,\n      });\n    }\n    for (let i = 0; i < 10; i++) {\n      await insertTopUpSavedTransaction({\n        amount: 2000,\n        fromAccount: customerAccount1,\n        toAccount: operatorAccountForTeletalk,\n        transactionTypeId: TopUpTypeId,\n        transactionTypeCode: \"1005\",\n        operatorId: operatorIdForTeletalk.id,\n        operatorType: \"TELETALK\",\n        topUpId: 1,\n      });\n    }\n    await pactum\n      .spec()\n      .withBearerToken(tokenUser1)\n      .withMethod(\"GET\")\n      .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.savetrxnTopUp}`)\n      .expectStatus(200)\n      .returns(\"body\");\n    const savedTopUpTrxns = await prismaApi.topUpSave.findMany({});\n    expect(savedTopUpTrxns).to.have.lengthOf(3);",
              "err": {
                "message": "TypeError: Cannot read properties of null (reading 'id')",
                "estack": "TypeError: Cannot read properties of null (reading 'id')\n    at Context.<anonymous> (file:///opt/app/src/topUp/getSaveTrxnTopUp.test.js:253:45)",
                "diff": null
              },
              "uuid": "7c7b9690-36ae-45b5-bcdf-2201f243ded5",
              "parentUUID": "d0bbef18-4856-4909-acb3-d95e28e9768c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return saved add money transaction list with correct pagination and size",
              "fullTitle": "Get Saved Transaction After Top Up should return saved add money transaction list with correct pagination and size",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await insertTopUpSavedTransaction({\n    amount: 2000,\n    fromAccount: customerAccount1,\n    toAccount: operatorAccountForBanglalink,\n    transactionTypeId: TopUpTypeId,\n    transactionTypeCode: \"1005\",\n    operatorId: operatorIdForBanglalink.id,\n    operatorType: \"BANGLALINK\",\n    topUpId: 1,\n  });\n  await insertTopUpSavedTransaction({\n    amount: 2000,\n    fromAccount: customerAccount1,\n    toAccount: operatorAccountForGrameenphone,\n    transactionTypeId: TopUpTypeId,\n    transactionTypeCode: \"1005\",\n    operatorId: operatorIdForGrameenphone.id,\n    operatorType: \"GRAMEENPHONE\",\n    topUpId: 1,\n  });\n\n  await insertTopUpSavedTransaction({\n    amount: 1000,\n    fromAccount: customerAccount1,\n    toAccount: operatorAccountForTeletalk,\n    transactionTypeId: TopUpTypeId,\n    transactionTypeCode: \"1005\",\n    operatorId: operatorIdForTeletalk.id,\n    operatorType: \"TELETALK\",\n    topUpId: 1,\n  });\nconst response = await pactum\n  .spec()\n  .withBearerToken(tokenUser1)\n  .withMethod(\"GET\")\n  .withPath(`${ApiUrls.apiBaseUrl}${ApiUrls.savetrxnTopUp}?page=0&size=2`)\n  .expectStatus(200);\nexpect(response.body)\n  .to.have.property(\"saveTransactions\")\n  .that.is.an(\"array\");\nexpect(response.body.saveTransactions).to.have.lengthOf(2);\nexpect(response.body.pagination.hasNext).to.equal(true);\nexpect(response.body.pagination.currentPageTotalCount).to.equal(2);\nexpect(response.body.pagination.totalCount).to.equal(3);\nexpect(response.body.pagination.currentPage).to.equal(0);",
              "err": {
                "message": "TypeError: Cannot read properties of null (reading 'id')",
                "estack": "TypeError: Cannot read properties of null (reading 'id')\n    at Context.<anonymous> (file:///opt/app/src/topUp/getSaveTrxnTopUp.test.js:304:45)",
                "diff": null
              },
              "uuid": "b24fbf2c-d5de-4233-961d-ce9c59b0c289",
              "parentUUID": "d0bbef18-4856-4909-acb3-d95e28e9768c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b7f366b9-72a0-476f-ba99-7c837d111b82",
            "36ef7e22-881d-4bd8-9a13-40056d09b42d",
            "7c7b9690-36ae-45b5-bcdf-2201f243ded5",
            "b24fbf2c-d5de-4233-961d-ce9c59b0c289"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6abfa6af-2ffa-41d8-b1b3-c885c387e107",
          "title": "Do Recharge API Check: TOPUP(POST)",
          "fullFile": "/opt/app/src/topUp/topup.test.js",
          "file": "/src/topUp/topup.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Do Recharge API Check: TOPUP(POST)\"",
              "fullTitle": "Do Recharge API Check: TOPUP(POST) \"before all\" hook in \"Do Recharge API Check: TOPUP(POST)\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAuth.$connect();\nawait prismaAccounting.$connect();\nawait prismaApi.$connect();",
              "err": {},
              "uuid": "146f8fb9-95d4-4bf9-af07-241bf535a468",
              "parentUUID": "6abfa6af-2ffa-41d8-b1b3-c885c387e107",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Do Recharge API Check: TOPUP(POST)\"",
              "fullTitle": "Do Recharge API Check: TOPUP(POST) \"before each\" hook in \"Do Recharge API Check: TOPUP(POST)\"",
              "timedOut": false,
              "duration": 109,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577237\",\n  },\n});\ntoken = generateUserToken(userId.id, \"01317577237\", \"USER\");\nconst chartOfAccounts = await createBasicChartOfAccounts();\ncustomer = chartOfAccounts.find(\n  (account) => account.code === \"customer-01\"\n);\ntopUpProvider = chartOfAccounts.find(\n  (account) => account.code === \"top-up-providers-01\"\n);\nawait setupTransactionTypes(chartOfAccounts);\nawait createUserAccounts(chartOfAccounts);\nsender = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\nreceiver = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01711106485\" },\n});\ngp = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"gp-wallet-01\" },\n});\nteletalk = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"teletalk-wallet-01\" },\n});\nbanglalink = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"bl-wallet-01\" },\n});\nconst type = await prismaAccounting.transactionType.findUnique({\n  where: { transactionCode: \"1001\" },\n});",
              "err": {},
              "uuid": "6c9d1f8d-f9f5-492e-b0f7-b55a639ea7bf",
              "parentUUID": "6abfa6af-2ffa-41d8-b1b3-c885c387e107",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook: topup in \"Do Recharge API Check: TOPUP(POST)\"",
              "fullTitle": "Do Recharge API Check: TOPUP(POST) \"after all\" hook: topup in \"Do Recharge API Check: TOPUP(POST)\"",
              "timedOut": false,
              "duration": 148,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();\nawait createAppUserAccounts();\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577237\",\n  },\n});\ntoken = generateUserToken(userId.id, \"01317577237\", \"USER\");\nconst chartOfAccounts = await createBasicChartOfAccounts();\ncustomer = chartOfAccounts.find(\n  (account) => account.code === \"customer-01\"\n);\ntopUpProvider = chartOfAccounts.find(\n  (account) => account.code === \"top-up-providers-01\"\n);\nconst transactionTypes = await setupTransactionTypes(chartOfAccounts);\nawait createUserAccounts(chartOfAccounts);\nsender = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577237\" },\n});\nreceiver = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01711106485\" },\n});\nonholdUser = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577238\" }\n});\nmaxwallet = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01317577210\" }\n});\ndailyLimitAmountUser = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: \"01715170020\" }\n});\nconst testConfig = {\n  baseUrl: ApiUrls.apiBaseUrl,\n  endpoint: ApiUrls.doTopUp,\n  token: token,\n  sender: sender,\n  receiver: receiver,\n  type: \"Top Up\",\n  database: [prismaApi.topUp],\n  transactionTypeCode: \"1005\",\n  provider: gp.identifier,\n  userId: userId.id,\n  requestBody: {\n    amount: 20,\n    phone: receiver.identifier,\n    operatorId: 2,\n    rechargeType: \"PREPAID\",\n    transactionTypeCode: \"1005\"\n  },\n  requestBodyForNotFullActiveUser: {\n    amount: 200,\n    phone: receiver.identifier,\n    operatorId: 2,\n    rechargeType: \"PREPAID\",\n    transactionTypeCode: \"1005\"\n  },\n  requestBodyForMinWalleAmount: {\n    amount: 40,\n    phone: receiver.identifier,\n    operatorId: 2,\n    rechargeType: \"PREPAID\",\n    transactionTypeCode: \"1005\"\n  },\n  requestBodyForMaxWalleAmount: {\n    amount: 1001,\n    phone: maxwallet.identifier,\n    operatorId: 5,\n    rechargeType: \"PREPAID\",\n    transactionTypeCode: \"1005\"\n  },\n  requestBodyForDailyLimitAmount: {\n    amount: 100,\n    phone: dailyLimitAmountUser.identifier,\n    operatorId: 2,\n    rechargeType: \"PREPAID\",\n    transactionTypeCode: \"1005\"\n  },\n  requestBodyForTypeMinAmount: {\n    amount: 5,\n    phone: receiver.identifier,\n    operatorId: 2,\n    rechargeType: \"PREPAID\",\n    transactionTypeCode: \"1005\"\n  },\n  requestBodyForTypeMaxAmount: {\n    amount: 1000000,\n    phone: receiver.identifier,\n    operatorId: 2,\n    rechargeType: \"PREPAID\",\n    transactionTypeCode: \"1005\"\n  },\n}\nawait runTransactionTests(testConfig);\nawait prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "56a167d8-a2b5-46a0-ad2b-470bafa142c7",
              "parentUUID": "6abfa6af-2ffa-41d8-b1b3-c885c387e107",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook: topup in \"Do Recharge API Check: TOPUP(POST)\"",
              "fullTitle": "Do Recharge API Check: TOPUP(POST) \"after each\" hook: topup in \"Do Recharge API Check: TOPUP(POST)\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await clearAllDatabases();",
              "err": {},
              "uuid": "8fd12c42-f204-4899-9ce8-6e10b1aaef2d",
              "parentUUID": "6abfa6af-2ffa-41d8-b1b3-c885c387e107",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 200 for successful topup and save this topup",
              "fullTitle": "Do Recharge API Check: TOPUP(POST) should return 200 for successful topup and save this topup",
              "timedOut": false,
              "duration": 24,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await addInitialBalance(sender, 1000000);\nawait pactum\n  .spec()\n  .post(`${ApiUrls.apiBaseUrl}${ApiUrls.doTopUp}`)\n  .withBearerToken(token)\n  .withJson({\n    amount: 50,\n    phone: receiver.identifier,\n    operatorId: 2,\n    rechargeType: \"PREPAID\",\n    transactionTypeCode: \"1005\",\n    save: true\n  })\n  .expectStatus(200);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01317577237\",\n  },\n});\nawait checkSuccess({\n  groupId: \"topup\",\n  topic: \"top_up_payment_result\",\n  log: 'Top Up: From 01317577237 to gp-wallet-01',\n  amount: 50,\n  callback: async () => {\n    const topUpTable = await prismaApi.topUp.findMany({\n      where: { userId: userId.id },\n    });\n    const saveTopUp = await prismaApi.topUpSave.findMany({\n      where: { topUpId: topUpTable.id },\n    });\n    expect(saveTopUp).to.have.lengthOf(1);\n    expect(topUpTable[0].status).to.equal(\"SUCCESS\");\n    expect(topUpTable[0].userId).to.equal(userId.id);\n  }\n})",
              "err": {
                "message": "AssertionError: HTTP status 400 !== 200\n\n400 !== 200\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 400 !== 200\n\n400 !== 200\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 400\n+ 200\n"
              },
              "uuid": "fcf967c8-35d4-4585-863e-539a404ff432",
              "parentUUID": "6abfa6af-2ffa-41d8-b1b3-c885c387e107",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the operator id does not exists in topup",
              "fullTitle": "Do Recharge API Check: TOPUP(POST) should return 400 if the operator id does not exists in topup",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await addInitialBalance(sender, 1000000);\nawait pactum\n  .spec()\n  .post(`${ApiUrls.apiBaseUrl}${ApiUrls.doTopUp}`)\n  .withBearerToken(token)\n  .withJson({\n    amount: validTopUpAmount,\n    phone: receiver.identifier,\n    operatorId: 9,\n    rechargeType: \"PREPAID\",\n    transactionTypeCode: \"1005\",\n  })\n  .expectStatus(400);",
              "err": {},
              "uuid": "9ea80563-d155-495b-a5fe-946e19e00aff",
              "parentUUID": "6abfa6af-2ffa-41d8-b1b3-c885c387e107",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9ea80563-d155-495b-a5fe-946e19e00aff"
          ],
          "failures": [
            "fcf967c8-35d4-4585-863e-539a404ff432"
          ],
          "pending": [],
          "skipped": [],
          "duration": 40,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "acab592f-7034-4ba7-be83-5eafebf463b8",
          "title": "Do Transaction API Check (POST) - Type: 1001",
          "fullFile": "/opt/app/src/topUp/topup.test.js",
          "file": "/src/topUp/topup.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Do Transaction API Check (POST) - Type: 1001\"",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1001 \"before each\" hook in \"Do Transaction API Check (POST) - Type: 1001\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const senderIdentifier = sender?.identifier;\nconst receiverIdentifier = receiver?.identifier;\nconst senderAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: senderIdentifier },\n});\nconst receiverAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: receiverIdentifier },\n});\ncreatedType = await prismaAccounting.transactionType.findMany({\n  where: { transactionCode: transactionTypeCode },\n});\nif (transactionTypeCode != '1002') {\n  await database[0].deleteMany({});\n}\nif (!redisClient.isOpen) {\n  await redisClient.connect();\n}\nawait redisClient.FLUSHALL();",
              "err": {},
              "uuid": "0f4e4747-e3d6-40ad-9b38-466446c86e74",
              "parentUUID": "acab592f-7034-4ba7-be83-5eafebf463b8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Do Transaction API Check (POST) - Type: 1001\"",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1001 \"after all\" hook in \"Do Transaction API Check (POST) - Type: 1001\"",
              "timedOut": false,
              "duration": 18,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "cc9e9a4f-048f-4aa9-8a8c-df4830e1cf3f",
              "parentUUID": "acab592f-7034-4ba7-be83-5eafebf463b8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 400 if sender's account balance is less than the transaction amount",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1001 should return 400 if sender's account balance is less than the transaction amount",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\n      await prismaAccounting.transaction.deleteMany({});\n      userId = await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      });\n      if (transactionTypeCode === '1001') { return; }\n      const verifiedPinToken = generateVerifyPinToken(transactionTypeCode, userId.id, \"01317577237\", \"USER\");\n      await redisClient.HSET(`token:${userId.phone}`, 'token', verifiedPinToken);\n      await redisClient.HGET(`token:${userId.phone}`, 'token');\n      if (transactionTypeCode != '1002') {\n        await database[0].deleteMany({});\n      }\n      const res = await pactum\n        .spec()\n        .withMethod(\"POST\")\n        .withBearerToken(token)\n        .withPath(`${baseUrl}${endpoint}`)\n        .withJson({\n          ...requestBody,\n          verifiedPinToken: verifiedPinToken\n        })\n        .expectStatus(400);\n      if (transactionTypeCode != '1002') {\n        const apiTable = await database[0].findMany({\n          where: {\n            userId: await prismaAuth.appUser.findFirst({\n              where: {\n                phone: sender.identifier,\n              },\n            })\n          }.id,\n        });\n        expect(apiTable[0].status).to.equal(\"TODO\");\n        const transactionsFromDB = await prismaAccounting.transaction.findMany({\n          where: { referenceNo: apiTable.referenceNumber },\n        });\n        expect(transactionsFromDB).to.be.empty;\n        const ledgerEntries = await prismaAccounting.ledger.findMany({\n          where: { transactionId: transactionsFromDB.id },\n        });\n        expect(ledgerEntries).to.be.empty;\n      }",
              "err": {},
              "uuid": "1c84397c-cff9-4571-900c-c072bde7ddf4",
              "parentUUID": "acab592f-7034-4ba7-be83-5eafebf463b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the sender's status is anything but FULL_ACTIVE",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1001 should return 400 if the sender's status is anything but FULL_ACTIVE",
              "timedOut": false,
              "duration": 12,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n        where: {\n          phone: \"01317577238\",\n        },\n      });\n      const accountingUser = await prismaAccounting.userAccount.findFirst({\n        where: {\n          identifier: \"01317577238\",\n        },\n      });\n      const onholdUserToken = generateUserToken(userId.id, \"01317577238\", \"USER\");\n      const onholdUserTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, \"01317577238\", \"USER\");\n      await redisClient.HSET(`token:${userId.phone}`, 'token', onholdUserTokenPin);\n      await redisClient.HGET(`token:${userId.phone}`, 'token');\n      if (transactionTypeCode != '1001') {\n        await addInitialBalance(accountingUser, 500000);\n      }\n      await pactum\n        .spec()\n        .withMethod(\"POST\")\n        .withBearerToken(onholdUserToken)\n        .withPath(`${baseUrl}${endpoint}`)\n        .withJson({\n          ...requestBody,\n          verifiedPinToken: onholdUserTokenPin\n        })\n        .expectStatus(400);\n      if (transactionTypeCode != '1002') {\n        const apiTable = await database[0].findMany({\n          where: {\n            userId: await prismaAuth.appUser.findFirst({\n              where: {\n                phone: sender.identifier,\n              },\n            })\n          }.id,\n        });\n        expect(apiTable[0].status).to.equal(\"TODO\");\n        // const transactionsFromDB = await prismaAccounting.transaction.findMany({\n        //   where: { referenceNo: apiTable.referenceNumber },\n        // });\n        // expect(transactionsFromDB).to.have.lengthOf(2);\n        // const ledgerEntries = await prismaAccounting.ledger.findMany({\n        //   where: { transactionId: transactionsFromDB[0].id },\n        // });\n        // expect(ledgerEntries).to.have.lengthOf(2);\n      }",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:172:28)",
                "diff": null
              },
              "uuid": "fb8397d7-c21a-4a25-b4b6-1bf277d1b16e",
              "parentUUID": "acab592f-7034-4ba7-be83-5eafebf463b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the balance after transaction amount is less than min Wallet Amount of sender account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1001 should return 400 if the balance after transaction amount is less than min Wallet Amount of sender account",
              "timedOut": false,
              "duration": 11,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      });\n      if (transactionTypeCode != '1001') {\n        await addInitialBalance(sender, 1000000);\n      }\n      const verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\n      await redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\n      await redisClient.HGET(`token:${userId.phone}`, 'token');\n      await pactum\n        .spec()\n        .withMethod(\"POST\")\n        .withBearerToken(token)\n        .withPath(`${baseUrl}${endpoint}`)\n        .withJson({\n          ...requestBodyForMinWalleAmount,\n          verifiedPinToken: verifiedTokenPin\n        })\n        .expectStatus(400);\n      if (transactionTypeCode != '1002') {\n        const apiTable = await database[0].findMany({\n          where: {\n            userId: await prismaAuth.appUser.findFirst({\n              where: {\n                phone: sender.identifier,\n              },\n            })\n          }.id,\n        });\n        expect(apiTable[0].status).to.equal(\"TODO\");\n        const transactionsFromDB = await prismaAccounting.transaction.findMany({\n          where: { referenceNo: apiTable.referenceNumber },\n        });\n        if (transactionTypeCode != '1001') {\n          // expect(transactionsFromDB).to.have.lengthOf(2);\n          // const ledgerEntries = await prismaAccounting.ledger.findMany({\n          //   where: { transactionId: transactionsFromDB[0].id },\n          // });\n          // expect(ledgerEntries).to.have.lengthOf(2);\n          // const ledgerEntries1 = await prismaAccounting.ledger.findMany({\n          //   where: { transactionId: transactionsFromDB[1].id },\n          // });\n          // expect(ledgerEntries1).to.have.lengthOf(2);\n        }\n        else {\n          expect(transactionsFromDB).to.be.empty;\n        }\n      }",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:225:28)",
                "diff": null
              },
              "uuid": "b9d326ba-a7c7-4d5f-a5d8-036a1f76d7ec",
              "parentUUID": "acab592f-7034-4ba7-be83-5eafebf463b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the balance after transaction is greater than max Wallet Amount of receiver account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1001 should return 400 if the balance after transaction is greater than max Wallet Amount of receiver account",
              "timedOut": false,
              "duration": 12,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const maxWalletUser = await prismaAuth.appUser.findUnique({\n  where: { phone: \"01317577210\" }\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01317577210\",\n  },\n});\nconst maxWalletUserToken = generateUserToken(maxWalletUser.id, \"01317577210\", \"USER\");\nif (transactionTypeCode != '1001') {\n  await addInitialBalance(accountingUser, 500000);\n  await addInitialBalance(receiver, 500);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, maxWalletUser.id, maxWalletUser.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(maxWalletUserToken)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForMaxWalleAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: \"01317577210\",\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:293:28)",
                "diff": null
              },
              "uuid": "6b7c72c0-138b-48e2-a073-87196c53ae7b",
              "parentUUID": "acab592f-7034-4ba7-be83-5eafebf463b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily count is greater than daily limit count of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1001 should return 400 if the daily count is greater than daily limit count of the source account",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nthis.timeout(120000);\nawait addInitialBalance(sender, 500000);\n\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170025\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170025\",\n  },\n});\nconst dailyLimitCountUser = generateUserToken(userId.id, \"01715170025\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nconst dailyLimitCount = accountingUser.dailyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nfor (let i = 0; i < dailyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(dailyLimitCountUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "d915df2e-daa5-48dc-8b52-e606f8501648",
              "parentUUID": "acab592f-7034-4ba7-be83-5eafebf463b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily transaction amount is greater than daily limit amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1001 should return 400 if the daily transaction amount is greater than daily limit amount of the source account",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170020\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170020\",\n  },\n});\nconst dailyLimitAmountUser = generateUserToken(userId.id, \"01715170020\", \"USER\");\nif (transactionTypeCode != '1001') {\n  await addInitialBalance(accountingUser, 500000);\n}\nconst dailyLimitAmount = accountingUser.dailyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < dailyLimitAmount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(dailyLimitAmountUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForDailyLimitAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "20b1be9e-6821-4264-af8d-9905b21a18fa",
              "parentUUID": "acab592f-7034-4ba7-be83-5eafebf463b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the monthly count is greater than maximum monthly limit count of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1001 should return 400 if the monthly count is greater than maximum monthly limit count of the source account",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nawait addInitialBalance(sender, 500000);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170021\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170021\",\n  },\n});\nconst monthlyLimitCountCountUser = generateUserToken(userId.id, \"01715170021\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst monthlyLimitCount = accountingUser.monthlyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < monthlyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(monthlyLimitCountCountUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedPinToken: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "5cd249aa-3ccc-486f-8f31-60912a5635fe",
              "parentUUID": "acab592f-7034-4ba7-be83-5eafebf463b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the monthly transaction amount is greater than monthly limit amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1001 should return 400 if the monthly transaction amount is greater than monthly limit amount of the source account",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nthis.timeout(120000);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170021\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170021\",\n  },\n});\nconst monthlyLimitAmounttUser = generateUserToken(userId.id, \"01715170021\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst monthlyLimitAmount = accountingUser.monthlyLimitAmount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < monthlyLimitAmount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(monthlyLimitAmounttUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedPinToken: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "96e7208b-34d5-4542-ad49-7128cf582c4a",
              "parentUUID": "acab592f-7034-4ba7-be83-5eafebf463b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly count is greater than maximum weekly limit count of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1001 should return 400 if the weekly count is greater than maximum weekly limit count of the source account",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nthis.timeout(120000);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170105\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170105\",\n  },\n});\nconst weeklyLimitAmounttUser = generateUserToken(userId.id, \"01715170105\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst weeklyLimitAmount = accountingUser.weeklyLimitAmount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < weeklyLimitAmount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(weeklyLimitAmounttUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "771c291b-c209-4bdc-955d-732eac90ce57",
              "parentUUID": "acab592f-7034-4ba7-be83-5eafebf463b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly transaction amount is greater than weekly limit amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1001 should return 400 if the weekly transaction amount is greater than weekly limit amount of the source account",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170105\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170105\",\n  },\n});\nconst weeklyLimitAmounttUser = generateUserToken(userId.id, \"01715170105\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst weeklyLimitCount = accountingUser.weeklyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < weeklyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(weeklyLimitAmounttUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "a554f42c-97c7-480b-87be-1915740bb183",
              "parentUUID": "acab592f-7034-4ba7-be83-5eafebf463b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the transaction amount is less than transaction type min amount",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1001 should return 400 if the transaction amount is less than transaction type min amount",
              "timedOut": false,
              "duration": 25,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01915170011\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01915170011\",\n  },\n});\nconst transactionTypeMinUserToken = generateUserToken(userId.id, \"01915170011\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(transactionTypeMinUserToken)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForTypeMinAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:926:28)",
                "diff": null
              },
              "uuid": "d366383f-f422-4262-b24e-6ddea7addf19",
              "parentUUID": "acab592f-7034-4ba7-be83-5eafebf463b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the transaction amount is greater than transaction type max amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1001 should return 400 if the transaction amount is greater than transaction type max amount of the source account",
              "timedOut": false,
              "duration": 23,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01915170011\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01915170011\",\n  },\n});\nconst transactionTypeMinUserToken = generateUserToken(userId.id, \"01915170011\", \"USER\");\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nawait addInitialBalance(accountingUser, 1000000);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(transactionTypeMinUserToken)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForTypeMaxAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:972:28)",
                "diff": null
              },
              "uuid": "72a04987-36bb-4690-a3d5-5fcb3358a191",
              "parentUUID": "acab592f-7034-4ba7-be83-5eafebf463b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily transaction amount is greater than daily limit amount of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1001 should return 400 if the daily transaction amount is greater than daily limit amount of the transaction type",
              "timedOut": false,
              "duration": 563,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, dailyLimitAmount: true },\n  })\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst dailyLimitCount = Number(typeId.dailyLimitAmount);\nconst transactionPromises = [];\nfor (let i = 0; i < dailyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait Promise.all(transactionPromises);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:1074:28)",
                "diff": null
              },
              "uuid": "0c701cc7-be63-49e1-a4c8-7a82a952e08f",
              "parentUUID": "acab592f-7034-4ba7-be83-5eafebf463b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily transaction count is greater than daily limit count of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1001 should return 400 if the daily transaction count is greater than daily limit count of the transaction type",
              "timedOut": false,
              "duration": 232,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, dailyLimitCount: true },\n  })\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 5000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst dailyLimitCount = Number(typeId.dailyLimitCount);\nconst transactionPromises = [];\nfor (let i = 0; i < dailyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait Promise.all(transactionPromises);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:1175:28)",
                "diff": null
              },
              "uuid": "916b57d3-b746-4f0f-b064-163ccc532219",
              "parentUUID": "acab592f-7034-4ba7-be83-5eafebf463b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly transaction amount is greater than weekly limit amount of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1001 should return 400 if the weekly transaction amount is greater than weekly limit amount of the transaction type",
              "timedOut": false,
              "duration": 23,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, weeklyLimitAmount: true },\n  }),\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst weeklyLimitAmountType = Number(typeId.weeklyLimitAmount);\nconst transactionPromises = [];\nfor (let i = 0; i < weeklyLimitAmountType / 100; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait Promise.all(transactionPromises);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:1277:28)",
                "diff": null
              },
              "uuid": "538d4af6-bee8-468c-91e3-beb82acfc931",
              "parentUUID": "acab592f-7034-4ba7-be83-5eafebf463b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly transaction count is greater than weekly limit count of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1001 should return 400 if the weekly transaction count is greater than weekly limit count of the transaction type",
              "timedOut": true,
              "duration": 1999,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, weeklyLimitCount: true },\n  })\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst weeklyLimitCountType = Number(typeId.weeklyLimitCount);\nconst batchSize = 5;\nfor (let i = 0; i < weeklyLimitCountType; i += batchSize) {\n  const batchPromises = [];\n  const end = Math.min(i + batchSize, weeklyLimitCountType);\n  for (let j = i; j < end; j++) {\n    const promise = prismaAccounting.transaction.create({\n      data: {\n        fromAccountId: (await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })).id,\n        toAccountId: (await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })).id,\n        transactionTypeId: typeId.id,\n        amount: 100,\n        referenceNo: `Transaction ${j + 1}`,\n        note: `Test transaction ${j + 1}`,\n      },\n    }).then(async transaction => {\n      return Promise.all([\n        prismaAccounting.ledger.create({\n          data: {\n            accountId: (await prismaAccounting.userAccount.findUnique({\n              where: { identifier: sender.identifier },\n            })).id,\n            transactionId: transaction.id,\n            amount: 100,\n            description: `Ledger entry for transaction ${j + 1}`,\n            type: \"DEBIT\",\n          },\n        }),\n        prismaAccounting.ledger.create({\n          data: {\n            accountId: (await prismaAccounting.userAccount.findUnique({\n              where: { identifier: receiver.identifier },\n            })).id,\n            transactionId: transaction.id,\n            amount: 100,\n            description: `Ledger entry for transaction ${j + 1}`,\n            type: \"CREDIT\",\n          },\n        })\n      ]);\n    });\n    batchPromises.push(promise);\n  }\n  await Promise.all(batchPromises);\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const senderUser = await prismaAuth.appUser.findFirst({\n    where: { phone: sender.identifier },\n    select: { id: true }\n  });\n  const [apiTable] = await  database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  expect(apiTable.status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "50870d42-c032-43ce-a76e-02348ba931d0",
              "parentUUID": "acab592f-7034-4ba7-be83-5eafebf463b8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the monthly transaction count is greater than monthly limit count of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1001 should return 400 if the monthly transaction count is greater than monthly limit count of the transaction type",
              "timedOut": false,
              "duration": 408,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n  })\n]);\nconst monthlyLimitCountType = Number(typeId.monthlyLimitCount);\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nfor (let i = 0; i < monthlyLimitCountType; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:1477:28)",
                "diff": null
              },
              "uuid": "65e2f996-982a-4442-b6c7-5cf1b2db4ae4",
              "parentUUID": "acab592f-7034-4ba7-be83-5eafebf463b8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1c84397c-cff9-4571-900c-c072bde7ddf4",
            "d915df2e-daa5-48dc-8b52-e606f8501648",
            "20b1be9e-6821-4264-af8d-9905b21a18fa",
            "5cd249aa-3ccc-486f-8f31-60912a5635fe",
            "96e7208b-34d5-4542-ad49-7128cf582c4a",
            "771c291b-c209-4bdc-955d-732eac90ce57",
            "a554f42c-97c7-480b-87be-1915740bb183"
          ],
          "failures": [
            "fb8397d7-c21a-4a25-b4b6-1bf277d1b16e",
            "b9d326ba-a7c7-4d5f-a5d8-036a1f76d7ec",
            "6b7c72c0-138b-48e2-a073-87196c53ae7b",
            "d366383f-f422-4262-b24e-6ddea7addf19",
            "72a04987-36bb-4690-a3d5-5fcb3358a191",
            "0c701cc7-be63-49e1-a4c8-7a82a952e08f",
            "916b57d3-b746-4f0f-b064-163ccc532219",
            "538d4af6-bee8-468c-91e3-beb82acfc931",
            "50870d42-c032-43ce-a76e-02348ba931d0",
            "65e2f996-982a-4442-b6c7-5cf1b2db4ae4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 3313,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
          "title": "Do Transaction API Check (POST) - Type: 1004",
          "fullFile": "/opt/app/src/topUp/topup.test.js",
          "file": "/src/topUp/topup.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Do Transaction API Check (POST) - Type: 1004\"",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1004 \"before each\" hook in \"Do Transaction API Check (POST) - Type: 1004\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const senderIdentifier = sender?.identifier;\nconst receiverIdentifier = receiver?.identifier;\nconst senderAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: senderIdentifier },\n});\nconst receiverAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: receiverIdentifier },\n});\ncreatedType = await prismaAccounting.transactionType.findMany({\n  where: { transactionCode: transactionTypeCode },\n});\nif (transactionTypeCode != '1002') {\n  await database[0].deleteMany({});\n}\nif (!redisClient.isOpen) {\n  await redisClient.connect();\n}\nawait redisClient.FLUSHALL();",
              "err": {},
              "uuid": "c26facf8-0f71-4cd4-aa8a-2dc80695f516",
              "parentUUID": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Do Transaction API Check (POST) - Type: 1004\"",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1004 \"after all\" hook in \"Do Transaction API Check (POST) - Type: 1004\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "6d29a7f0-46b3-44b0-b947-7f874c32eda1",
              "parentUUID": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 400 if sender's account balance is less than the transaction amount",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1004 should return 400 if sender's account balance is less than the transaction amount",
              "timedOut": false,
              "duration": 57,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\n      await prismaAccounting.transaction.deleteMany({});\n      userId = await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      });\n      if (transactionTypeCode === '1001') { return; }\n      const verifiedPinToken = generateVerifyPinToken(transactionTypeCode, userId.id, \"01317577237\", \"USER\");\n      await redisClient.HSET(`token:${userId.phone}`, 'token', verifiedPinToken);\n      await redisClient.HGET(`token:${userId.phone}`, 'token');\n      if (transactionTypeCode != '1002') {\n        await database[0].deleteMany({});\n      }\n      const res = await pactum\n        .spec()\n        .withMethod(\"POST\")\n        .withBearerToken(token)\n        .withPath(`${baseUrl}${endpoint}`)\n        .withJson({\n          ...requestBody,\n          verifiedPinToken: verifiedPinToken\n        })\n        .expectStatus(400);\n      if (transactionTypeCode != '1002') {\n        const apiTable = await database[0].findMany({\n          where: {\n            userId: await prismaAuth.appUser.findFirst({\n              where: {\n                phone: sender.identifier,\n              },\n            })\n          }.id,\n        });\n        expect(apiTable[0].status).to.equal(\"TODO\");\n        const transactionsFromDB = await prismaAccounting.transaction.findMany({\n          where: { referenceNo: apiTable.referenceNumber },\n        });\n        expect(transactionsFromDB).to.be.empty;\n        const ledgerEntries = await prismaAccounting.ledger.findMany({\n          where: { transactionId: transactionsFromDB.id },\n        });\n        expect(ledgerEntries).to.be.empty;\n      }",
              "err": {
                "message": "PrismaClientKnownRequestError: \nInvalid `prisma.transaction.deleteMany()` invocation:\n\n\nForeign key constraint violated: `transactionId`",
                "estack": "PrismaClientKnownRequestError: \nInvalid `prisma.transaction.deleteMany()` invocation:\n\n\nForeign key constraint violated: `transactionId`\n    at qn.handleRequestError (prisma/generated/accounting/generated/accounting/runtime/library.js:121:7315)\n    at qn.handleAndLogRequestError (prisma/generated/accounting/generated/accounting/runtime/library.js:121:6640)\n    at qn.request (prisma/generated/accounting/generated/accounting/runtime/library.js:121:6347)\n    at async l (prisma/generated/accounting/generated/accounting/runtime/library.js:130:9616)\n    at async Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:66:7)",
                "diff": null
              },
              "uuid": "c29309d7-0fa5-42da-8c5b-5f1dd78c68e5",
              "parentUUID": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the sender's status is anything but FULL_ACTIVE",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1004 should return 400 if the sender's status is anything but FULL_ACTIVE",
              "timedOut": false,
              "duration": 30,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n        where: {\n          phone: \"01317577238\",\n        },\n      });\n      const accountingUser = await prismaAccounting.userAccount.findFirst({\n        where: {\n          identifier: \"01317577238\",\n        },\n      });\n      const onholdUserToken = generateUserToken(userId.id, \"01317577238\", \"USER\");\n      const onholdUserTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, \"01317577238\", \"USER\");\n      await redisClient.HSET(`token:${userId.phone}`, 'token', onholdUserTokenPin);\n      await redisClient.HGET(`token:${userId.phone}`, 'token');\n      if (transactionTypeCode != '1001') {\n        await addInitialBalance(accountingUser, 500000);\n      }\n      await pactum\n        .spec()\n        .withMethod(\"POST\")\n        .withBearerToken(onholdUserToken)\n        .withPath(`${baseUrl}${endpoint}`)\n        .withJson({\n          ...requestBody,\n          verifiedPinToken: onholdUserTokenPin\n        })\n        .expectStatus(400);\n      if (transactionTypeCode != '1002') {\n        const apiTable = await database[0].findMany({\n          where: {\n            userId: await prismaAuth.appUser.findFirst({\n              where: {\n                phone: sender.identifier,\n              },\n            })\n          }.id,\n        });\n        expect(apiTable[0].status).to.equal(\"TODO\");\n        // const transactionsFromDB = await prismaAccounting.transaction.findMany({\n        //   where: { referenceNo: apiTable.referenceNumber },\n        // });\n        // expect(transactionsFromDB).to.have.lengthOf(2);\n        // const ledgerEntries = await prismaAccounting.ledger.findMany({\n        //   where: { transactionId: transactionsFromDB[0].id },\n        // });\n        // expect(ledgerEntries).to.have.lengthOf(2);\n      }",
              "err": {
                "message": "AssertionError: HTTP status 502 !== 400\n\n502 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 502 !== 400\n\n502 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 502\n+ 400\n"
              },
              "uuid": "3a6b3ddf-8700-44c7-a637-a3892cf02aa5",
              "parentUUID": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the balance after transaction amount is less than min Wallet Amount of sender account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1004 should return 400 if the balance after transaction amount is less than min Wallet Amount of sender account",
              "timedOut": false,
              "duration": 26,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      });\n      if (transactionTypeCode != '1001') {\n        await addInitialBalance(sender, 1000000);\n      }\n      const verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\n      await redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\n      await redisClient.HGET(`token:${userId.phone}`, 'token');\n      await pactum\n        .spec()\n        .withMethod(\"POST\")\n        .withBearerToken(token)\n        .withPath(`${baseUrl}${endpoint}`)\n        .withJson({\n          ...requestBodyForMinWalleAmount,\n          verifiedPinToken: verifiedTokenPin\n        })\n        .expectStatus(400);\n      if (transactionTypeCode != '1002') {\n        const apiTable = await database[0].findMany({\n          where: {\n            userId: await prismaAuth.appUser.findFirst({\n              where: {\n                phone: sender.identifier,\n              },\n            })\n          }.id,\n        });\n        expect(apiTable[0].status).to.equal(\"TODO\");\n        const transactionsFromDB = await prismaAccounting.transaction.findMany({\n          where: { referenceNo: apiTable.referenceNumber },\n        });\n        if (transactionTypeCode != '1001') {\n          // expect(transactionsFromDB).to.have.lengthOf(2);\n          // const ledgerEntries = await prismaAccounting.ledger.findMany({\n          //   where: { transactionId: transactionsFromDB[0].id },\n          // });\n          // expect(ledgerEntries).to.have.lengthOf(2);\n          // const ledgerEntries1 = await prismaAccounting.ledger.findMany({\n          //   where: { transactionId: transactionsFromDB[1].id },\n          // });\n          // expect(ledgerEntries1).to.have.lengthOf(2);\n        }\n        else {\n          expect(transactionsFromDB).to.be.empty;\n        }\n      }",
              "err": {
                "message": "AssertionError: HTTP status 502 !== 400\n\n502 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 502 !== 400\n\n502 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 502\n+ 400\n"
              },
              "uuid": "4f9822a1-2937-4978-974f-1fb39cbe5e40",
              "parentUUID": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the balance after transaction is greater than max Wallet Amount of receiver account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1004 should return 400 if the balance after transaction is greater than max Wallet Amount of receiver account",
              "timedOut": false,
              "duration": 41,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const maxWalletUser = await prismaAuth.appUser.findUnique({\n  where: { phone: \"01317577210\" }\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01317577210\",\n  },\n});\nconst maxWalletUserToken = generateUserToken(maxWalletUser.id, \"01317577210\", \"USER\");\nif (transactionTypeCode != '1001') {\n  await addInitialBalance(accountingUser, 500000);\n  await addInitialBalance(receiver, 500);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, maxWalletUser.id, maxWalletUser.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(maxWalletUserToken)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForMaxWalleAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: \"01317577210\",\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 400\n\n500 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 400\n\n500 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 400\n"
              },
              "uuid": "e3299511-67da-4af9-bde4-f1011e7cc9df",
              "parentUUID": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily count is greater than daily limit count of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1004 should return 400 if the daily count is greater than daily limit count of the source account",
              "timedOut": false,
              "duration": 391,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nthis.timeout(120000);\nawait addInitialBalance(sender, 500000);\n\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170025\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170025\",\n  },\n});\nconst dailyLimitCountUser = generateUserToken(userId.id, \"01715170025\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nconst dailyLimitCount = accountingUser.dailyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nfor (let i = 0; i < dailyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(dailyLimitCountUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 400\n\n500 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 400\n\n500 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 400\n"
              },
              "uuid": "d5018adc-3b23-402f-9c8d-108cf93417cc",
              "parentUUID": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily transaction amount is greater than daily limit amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1004 should return 400 if the daily transaction amount is greater than daily limit amount of the source account",
              "timedOut": true,
              "duration": 2000,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170020\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170020\",\n  },\n});\nconst dailyLimitAmountUser = generateUserToken(userId.id, \"01715170020\", \"USER\");\nif (transactionTypeCode != '1001') {\n  await addInitialBalance(accountingUser, 500000);\n}\nconst dailyLimitAmount = accountingUser.dailyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < dailyLimitAmount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(dailyLimitAmountUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForDailyLimitAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "cb22118d-e4d7-48fb-b301-2da77560c1a5",
              "parentUUID": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the monthly count is greater than maximum monthly limit count of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1004 should return 400 if the monthly count is greater than maximum monthly limit count of the source account",
              "timedOut": false,
              "duration": 424,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nawait addInitialBalance(sender, 500000);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170021\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170021\",\n  },\n});\nconst monthlyLimitCountCountUser = generateUserToken(userId.id, \"01715170021\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst monthlyLimitCount = accountingUser.monthlyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < monthlyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(monthlyLimitCountCountUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedPinToken: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "AssertionError: HTTP status 502 !== 400\n\n502 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 502 !== 400\n\n502 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 502\n+ 400\n"
              },
              "uuid": "5bbfda74-4e24-47cc-a67e-024972407d46",
              "parentUUID": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the monthly transaction amount is greater than monthly limit amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1004 should return 400 if the monthly transaction amount is greater than monthly limit amount of the source account",
              "timedOut": false,
              "duration": 8873,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nthis.timeout(120000);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170021\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170021\",\n  },\n});\nconst monthlyLimitAmounttUser = generateUserToken(userId.id, \"01715170021\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst monthlyLimitAmount = accountingUser.monthlyLimitAmount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < monthlyLimitAmount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(monthlyLimitAmounttUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedPinToken: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "AssertionError: HTTP status 502 !== 400\n\n502 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 502 !== 400\n\n502 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 502\n+ 400\n"
              },
              "uuid": "bb6db151-e428-40d7-9c89-2ee56644f63c",
              "parentUUID": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly count is greater than maximum weekly limit count of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1004 should return 400 if the weekly count is greater than maximum weekly limit count of the source account",
              "timedOut": false,
              "duration": 6944,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nthis.timeout(120000);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170105\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170105\",\n  },\n});\nconst weeklyLimitAmounttUser = generateUserToken(userId.id, \"01715170105\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst weeklyLimitAmount = accountingUser.weeklyLimitAmount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < weeklyLimitAmount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(weeklyLimitAmounttUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 400\n\n500 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 400\n\n500 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 400\n"
              },
              "uuid": "e728ccea-648f-4815-9c0e-15c82bf2265a",
              "parentUUID": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly transaction amount is greater than weekly limit amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1004 should return 400 if the weekly transaction amount is greater than weekly limit amount of the source account",
              "timedOut": false,
              "duration": 112,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170105\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170105\",\n  },\n});\nconst weeklyLimitAmounttUser = generateUserToken(userId.id, \"01715170105\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst weeklyLimitCount = accountingUser.weeklyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < weeklyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(weeklyLimitAmounttUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 400\n\n500 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 400\n\n500 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 400\n"
              },
              "uuid": "43ec4ced-c0f5-4016-8147-be2d3a42a191",
              "parentUUID": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the transaction amount is less than transaction type min amount",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1004 should return 400 if the transaction amount is less than transaction type min amount",
              "timedOut": false,
              "duration": 24,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01915170011\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01915170011\",\n  },\n});\nconst transactionTypeMinUserToken = generateUserToken(userId.id, \"01915170011\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(transactionTypeMinUserToken)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForTypeMinAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 400\n\n500 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 400\n\n500 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 400\n"
              },
              "uuid": "6a4096fe-038e-4ba5-8e43-ee491df12411",
              "parentUUID": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the transaction amount is greater than transaction type max amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1004 should return 400 if the transaction amount is greater than transaction type max amount of the source account",
              "timedOut": false,
              "duration": 20,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01915170011\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01915170011\",\n  },\n});\nconst transactionTypeMinUserToken = generateUserToken(userId.id, \"01915170011\", \"USER\");\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nawait addInitialBalance(accountingUser, 1000000);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(transactionTypeMinUserToken)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForTypeMaxAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 400\n\n500 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 400\n\n500 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 400\n"
              },
              "uuid": "61176b9e-e536-4656-b3d5-672536a94c95",
              "parentUUID": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily transaction amount is greater than daily limit amount of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1004 should return 400 if the daily transaction amount is greater than daily limit amount of the transaction type",
              "timedOut": true,
              "duration": 1999,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, dailyLimitAmount: true },\n  })\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst dailyLimitCount = Number(typeId.dailyLimitAmount);\nconst transactionPromises = [];\nfor (let i = 0; i < dailyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait Promise.all(transactionPromises);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "949074c2-3f19-49c7-ba0e-9fe93f054b64",
              "parentUUID": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily transaction count is greater than daily limit count of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1004 should return 400 if the daily transaction count is greater than daily limit count of the transaction type",
              "timedOut": false,
              "duration": 279,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, dailyLimitCount: true },\n  })\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 5000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst dailyLimitCount = Number(typeId.dailyLimitCount);\nconst transactionPromises = [];\nfor (let i = 0; i < dailyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait Promise.all(transactionPromises);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 400\n\n500 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 400\n\n500 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 400\n"
              },
              "uuid": "824e8a19-81d8-45ef-a642-0abac5130259",
              "parentUUID": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly transaction amount is greater than weekly limit amount of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1004 should return 400 if the weekly transaction amount is greater than weekly limit amount of the transaction type",
              "timedOut": false,
              "duration": 532,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, weeklyLimitAmount: true },\n  }),\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst weeklyLimitAmountType = Number(typeId.weeklyLimitAmount);\nconst transactionPromises = [];\nfor (let i = 0; i < weeklyLimitAmountType / 100; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait Promise.all(transactionPromises);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 400\n\n500 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 400\n\n500 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 400\n"
              },
              "uuid": "cefc00b3-d8b1-408d-a7fd-c1fbdbd2a8f9",
              "parentUUID": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly transaction count is greater than weekly limit count of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1004 should return 400 if the weekly transaction count is greater than weekly limit count of the transaction type",
              "timedOut": false,
              "duration": 161,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, weeklyLimitCount: true },\n  })\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst weeklyLimitCountType = Number(typeId.weeklyLimitCount);\nconst batchSize = 5;\nfor (let i = 0; i < weeklyLimitCountType; i += batchSize) {\n  const batchPromises = [];\n  const end = Math.min(i + batchSize, weeklyLimitCountType);\n  for (let j = i; j < end; j++) {\n    const promise = prismaAccounting.transaction.create({\n      data: {\n        fromAccountId: (await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })).id,\n        toAccountId: (await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })).id,\n        transactionTypeId: typeId.id,\n        amount: 100,\n        referenceNo: `Transaction ${j + 1}`,\n        note: `Test transaction ${j + 1}`,\n      },\n    }).then(async transaction => {\n      return Promise.all([\n        prismaAccounting.ledger.create({\n          data: {\n            accountId: (await prismaAccounting.userAccount.findUnique({\n              where: { identifier: sender.identifier },\n            })).id,\n            transactionId: transaction.id,\n            amount: 100,\n            description: `Ledger entry for transaction ${j + 1}`,\n            type: \"DEBIT\",\n          },\n        }),\n        prismaAccounting.ledger.create({\n          data: {\n            accountId: (await prismaAccounting.userAccount.findUnique({\n              where: { identifier: receiver.identifier },\n            })).id,\n            transactionId: transaction.id,\n            amount: 100,\n            description: `Ledger entry for transaction ${j + 1}`,\n            type: \"CREDIT\",\n          },\n        })\n      ]);\n    });\n    batchPromises.push(promise);\n  }\n  await Promise.all(batchPromises);\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const senderUser = await prismaAuth.appUser.findFirst({\n    where: { phone: sender.identifier },\n    select: { id: true }\n  });\n  const [apiTable] = await  database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  expect(apiTable.status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 400\n\n500 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 400\n\n500 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 400\n"
              },
              "uuid": "a77e00b6-323a-4732-a5f7-a0694a501d59",
              "parentUUID": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the monthly transaction count is greater than monthly limit count of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1004 should return 400 if the monthly transaction count is greater than monthly limit count of the transaction type",
              "timedOut": false,
              "duration": 415,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n  })\n]);\nconst monthlyLimitCountType = Number(typeId.monthlyLimitCount);\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nfor (let i = 0; i < monthlyLimitCountType; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "AssertionError: HTTP status 500 !== 400\n\n500 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 500 !== 400\n\n500 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 500\n+ 400\n"
              },
              "uuid": "a795d3d0-fb47-4fe2-bc86-8dc914fa9717",
              "parentUUID": "439f151f-bd68-4466-bcc5-e7ee288bdde8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c29309d7-0fa5-42da-8c5b-5f1dd78c68e5",
            "3a6b3ddf-8700-44c7-a637-a3892cf02aa5",
            "4f9822a1-2937-4978-974f-1fb39cbe5e40",
            "e3299511-67da-4af9-bde4-f1011e7cc9df",
            "d5018adc-3b23-402f-9c8d-108cf93417cc",
            "cb22118d-e4d7-48fb-b301-2da77560c1a5",
            "5bbfda74-4e24-47cc-a67e-024972407d46",
            "bb6db151-e428-40d7-9c89-2ee56644f63c",
            "e728ccea-648f-4815-9c0e-15c82bf2265a",
            "43ec4ced-c0f5-4016-8147-be2d3a42a191",
            "6a4096fe-038e-4ba5-8e43-ee491df12411",
            "61176b9e-e536-4656-b3d5-672536a94c95",
            "949074c2-3f19-49c7-ba0e-9fe93f054b64",
            "824e8a19-81d8-45ef-a642-0abac5130259",
            "cefc00b3-d8b1-408d-a7fd-c1fbdbd2a8f9",
            "a77e00b6-323a-4732-a5f7-a0694a501d59",
            "a795d3d0-fb47-4fe2-bc86-8dc914fa9717"
          ],
          "pending": [],
          "skipped": [],
          "duration": 22328,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
          "title": "Do Transaction API Check (POST) - Type: 1003",
          "fullFile": "/opt/app/src/topUp/topup.test.js",
          "file": "/src/topUp/topup.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Do Transaction API Check (POST) - Type: 1003\"",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1003 \"before each\" hook in \"Do Transaction API Check (POST) - Type: 1003\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const senderIdentifier = sender?.identifier;\nconst receiverIdentifier = receiver?.identifier;\nconst senderAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: senderIdentifier },\n});\nconst receiverAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: receiverIdentifier },\n});\ncreatedType = await prismaAccounting.transactionType.findMany({\n  where: { transactionCode: transactionTypeCode },\n});\nif (transactionTypeCode != '1002') {\n  await database[0].deleteMany({});\n}\nif (!redisClient.isOpen) {\n  await redisClient.connect();\n}\nawait redisClient.FLUSHALL();",
              "err": {},
              "uuid": "921938bc-fc2f-4309-b08e-8998b2487e2d",
              "parentUUID": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Do Transaction API Check (POST) - Type: 1003\"",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1003 \"after all\" hook in \"Do Transaction API Check (POST) - Type: 1003\"",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "25a2da8c-8530-431e-afdc-5083c835a004",
              "parentUUID": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 400 if sender's account balance is less than the transaction amount",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1003 should return 400 if sender's account balance is less than the transaction amount",
              "timedOut": false,
              "duration": 220,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\n      await prismaAccounting.transaction.deleteMany({});\n      userId = await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      });\n      if (transactionTypeCode === '1001') { return; }\n      const verifiedPinToken = generateVerifyPinToken(transactionTypeCode, userId.id, \"01317577237\", \"USER\");\n      await redisClient.HSET(`token:${userId.phone}`, 'token', verifiedPinToken);\n      await redisClient.HGET(`token:${userId.phone}`, 'token');\n      if (transactionTypeCode != '1002') {\n        await database[0].deleteMany({});\n      }\n      const res = await pactum\n        .spec()\n        .withMethod(\"POST\")\n        .withBearerToken(token)\n        .withPath(`${baseUrl}${endpoint}`)\n        .withJson({\n          ...requestBody,\n          verifiedPinToken: verifiedPinToken\n        })\n        .expectStatus(400);\n      if (transactionTypeCode != '1002') {\n        const apiTable = await database[0].findMany({\n          where: {\n            userId: await prismaAuth.appUser.findFirst({\n              where: {\n                phone: sender.identifier,\n              },\n            })\n          }.id,\n        });\n        expect(apiTable[0].status).to.equal(\"TODO\");\n        const transactionsFromDB = await prismaAccounting.transaction.findMany({\n          where: { referenceNo: apiTable.referenceNumber },\n        });\n        expect(transactionsFromDB).to.be.empty;\n        const ledgerEntries = await prismaAccounting.ledger.findMany({\n          where: { transactionId: transactionsFromDB.id },\n        });\n        expect(ledgerEntries).to.be.empty;\n      }",
              "err": {
                "message": "PrismaClientKnownRequestError: \nInvalid `prisma.transaction.deleteMany()` invocation:\n\n\nForeign key constraint violated: `transactionId`",
                "estack": "PrismaClientKnownRequestError: \nInvalid `prisma.transaction.deleteMany()` invocation:\n\n\nForeign key constraint violated: `transactionId`\n    at qn.handleRequestError (prisma/generated/accounting/generated/accounting/runtime/library.js:121:7315)\n    at qn.handleAndLogRequestError (prisma/generated/accounting/generated/accounting/runtime/library.js:121:6640)\n    at qn.request (prisma/generated/accounting/generated/accounting/runtime/library.js:121:6347)\n    at async l (prisma/generated/accounting/generated/accounting/runtime/library.js:130:9616)\n    at async Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:66:7)",
                "diff": null
              },
              "uuid": "fdf1581a-efb1-46ae-b2c3-33e4be1d3697",
              "parentUUID": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the sender's status is anything but FULL_ACTIVE",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1003 should return 400 if the sender's status is anything but FULL_ACTIVE",
              "timedOut": false,
              "duration": 28,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n        where: {\n          phone: \"01317577238\",\n        },\n      });\n      const accountingUser = await prismaAccounting.userAccount.findFirst({\n        where: {\n          identifier: \"01317577238\",\n        },\n      });\n      const onholdUserToken = generateUserToken(userId.id, \"01317577238\", \"USER\");\n      const onholdUserTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, \"01317577238\", \"USER\");\n      await redisClient.HSET(`token:${userId.phone}`, 'token', onholdUserTokenPin);\n      await redisClient.HGET(`token:${userId.phone}`, 'token');\n      if (transactionTypeCode != '1001') {\n        await addInitialBalance(accountingUser, 500000);\n      }\n      await pactum\n        .spec()\n        .withMethod(\"POST\")\n        .withBearerToken(onholdUserToken)\n        .withPath(`${baseUrl}${endpoint}`)\n        .withJson({\n          ...requestBody,\n          verifiedPinToken: onholdUserTokenPin\n        })\n        .expectStatus(400);\n      if (transactionTypeCode != '1002') {\n        const apiTable = await database[0].findMany({\n          where: {\n            userId: await prismaAuth.appUser.findFirst({\n              where: {\n                phone: sender.identifier,\n              },\n            })\n          }.id,\n        });\n        expect(apiTable[0].status).to.equal(\"TODO\");\n        // const transactionsFromDB = await prismaAccounting.transaction.findMany({\n        //   where: { referenceNo: apiTable.referenceNumber },\n        // });\n        // expect(transactionsFromDB).to.have.lengthOf(2);\n        // const ledgerEntries = await prismaAccounting.ledger.findMany({\n        //   where: { transactionId: transactionsFromDB[0].id },\n        // });\n        // expect(ledgerEntries).to.have.lengthOf(2);\n      }",
              "err": {
                "message": "AssertionError: HTTP status 502 !== 400\n\n502 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 502 !== 400\n\n502 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 502\n+ 400\n"
              },
              "uuid": "8c26d945-a211-4d79-807f-7fd9163b7b4e",
              "parentUUID": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the balance after transaction amount is less than min Wallet Amount of sender account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1003 should return 400 if the balance after transaction amount is less than min Wallet Amount of sender account",
              "timedOut": false,
              "duration": 28,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      });\n      if (transactionTypeCode != '1001') {\n        await addInitialBalance(sender, 1000000);\n      }\n      const verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\n      await redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\n      await redisClient.HGET(`token:${userId.phone}`, 'token');\n      await pactum\n        .spec()\n        .withMethod(\"POST\")\n        .withBearerToken(token)\n        .withPath(`${baseUrl}${endpoint}`)\n        .withJson({\n          ...requestBodyForMinWalleAmount,\n          verifiedPinToken: verifiedTokenPin\n        })\n        .expectStatus(400);\n      if (transactionTypeCode != '1002') {\n        const apiTable = await database[0].findMany({\n          where: {\n            userId: await prismaAuth.appUser.findFirst({\n              where: {\n                phone: sender.identifier,\n              },\n            })\n          }.id,\n        });\n        expect(apiTable[0].status).to.equal(\"TODO\");\n        const transactionsFromDB = await prismaAccounting.transaction.findMany({\n          where: { referenceNo: apiTable.referenceNumber },\n        });\n        if (transactionTypeCode != '1001') {\n          // expect(transactionsFromDB).to.have.lengthOf(2);\n          // const ledgerEntries = await prismaAccounting.ledger.findMany({\n          //   where: { transactionId: transactionsFromDB[0].id },\n          // });\n          // expect(ledgerEntries).to.have.lengthOf(2);\n          // const ledgerEntries1 = await prismaAccounting.ledger.findMany({\n          //   where: { transactionId: transactionsFromDB[1].id },\n          // });\n          // expect(ledgerEntries1).to.have.lengthOf(2);\n        }\n        else {\n          expect(transactionsFromDB).to.be.empty;\n        }\n      }",
              "err": {
                "message": "AssertionError: HTTP status 502 !== 400\n\n502 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 502 !== 400\n\n502 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 502\n+ 400\n"
              },
              "uuid": "10149a76-b840-4843-9ead-4070025fb0bb",
              "parentUUID": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the balance after transaction is greater than max Wallet Amount of receiver account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1003 should return 400 if the balance after transaction is greater than max Wallet Amount of receiver account",
              "timedOut": false,
              "duration": 42,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const maxWalletUser = await prismaAuth.appUser.findUnique({\n  where: { phone: \"01317577210\" }\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01317577210\",\n  },\n});\nconst maxWalletUserToken = generateUserToken(maxWalletUser.id, \"01317577210\", \"USER\");\nif (transactionTypeCode != '1001') {\n  await addInitialBalance(accountingUser, 500000);\n  await addInitialBalance(receiver, 500);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, maxWalletUser.id, maxWalletUser.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(maxWalletUserToken)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForMaxWalleAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: \"01317577210\",\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:293:28)",
                "diff": null
              },
              "uuid": "06408a6f-6d0e-4999-851e-4cde3e24d162",
              "parentUUID": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily count is greater than daily limit count of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1003 should return 400 if the daily count is greater than daily limit count of the source account",
              "timedOut": false,
              "duration": 303,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nthis.timeout(120000);\nawait addInitialBalance(sender, 500000);\n\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170025\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170025\",\n  },\n});\nconst dailyLimitCountUser = generateUserToken(userId.id, \"01715170025\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nconst dailyLimitCount = accountingUser.dailyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nfor (let i = 0; i < dailyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(dailyLimitCountUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:395:28)",
                "diff": null
              },
              "uuid": "59e171d1-e7b9-4a48-b1e6-93acf6f5d32b",
              "parentUUID": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily transaction amount is greater than daily limit amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1003 should return 400 if the daily transaction amount is greater than daily limit amount of the source account",
              "timedOut": true,
              "duration": 2001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170020\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170020\",\n  },\n});\nconst dailyLimitAmountUser = generateUserToken(userId.id, \"01715170020\", \"USER\");\nif (transactionTypeCode != '1001') {\n  await addInitialBalance(accountingUser, 500000);\n}\nconst dailyLimitAmount = accountingUser.dailyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < dailyLimitAmount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(dailyLimitAmountUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForDailyLimitAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "fb6d4bf7-2838-4f07-b084-0504684b0786",
              "parentUUID": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the monthly count is greater than maximum monthly limit count of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1003 should return 400 if the monthly count is greater than maximum monthly limit count of the source account",
              "timedOut": false,
              "duration": 353,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nawait addInitialBalance(sender, 500000);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170021\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170021\",\n  },\n});\nconst monthlyLimitCountCountUser = generateUserToken(userId.id, \"01715170021\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst monthlyLimitCount = accountingUser.monthlyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < monthlyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(monthlyLimitCountCountUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedPinToken: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "AssertionError: HTTP status 502 !== 400\n\n502 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 502 !== 400\n\n502 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 502\n+ 400\n"
              },
              "uuid": "16202cbe-ccf4-4436-9018-29fa83742786",
              "parentUUID": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the monthly transaction amount is greater than monthly limit amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1003 should return 400 if the monthly transaction amount is greater than monthly limit amount of the source account",
              "timedOut": false,
              "duration": 6638,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nthis.timeout(120000);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170021\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170021\",\n  },\n});\nconst monthlyLimitAmounttUser = generateUserToken(userId.id, \"01715170021\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst monthlyLimitAmount = accountingUser.monthlyLimitAmount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < monthlyLimitAmount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(monthlyLimitAmounttUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedPinToken: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "AssertionError: HTTP status 502 !== 400\n\n502 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 502 !== 400\n\n502 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 502\n+ 400\n"
              },
              "uuid": "72f83479-2a16-407f-b4a3-7e638d47f5b8",
              "parentUUID": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly count is greater than maximum weekly limit count of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1003 should return 400 if the weekly count is greater than maximum weekly limit count of the source account",
              "timedOut": false,
              "duration": 6668,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nthis.timeout(120000);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170105\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170105\",\n  },\n});\nconst weeklyLimitAmounttUser = generateUserToken(userId.id, \"01715170105\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst weeklyLimitAmount = accountingUser.weeklyLimitAmount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < weeklyLimitAmount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(weeklyLimitAmounttUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:786:28)",
                "diff": null
              },
              "uuid": "1123e112-0c46-473c-b2ef-681cb431522b",
              "parentUUID": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly transaction amount is greater than weekly limit amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1003 should return 400 if the weekly transaction amount is greater than weekly limit amount of the source account",
              "timedOut": false,
              "duration": 153,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170105\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170105\",\n  },\n});\nconst weeklyLimitAmounttUser = generateUserToken(userId.id, \"01715170105\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst weeklyLimitCount = accountingUser.weeklyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < weeklyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(weeklyLimitAmounttUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:880:28)",
                "diff": null
              },
              "uuid": "8d0e87db-0997-41d3-8984-4a76fd170dc2",
              "parentUUID": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the transaction amount is less than transaction type min amount",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1003 should return 400 if the transaction amount is less than transaction type min amount",
              "timedOut": false,
              "duration": 25,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01915170011\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01915170011\",\n  },\n});\nconst transactionTypeMinUserToken = generateUserToken(userId.id, \"01915170011\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(transactionTypeMinUserToken)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForTypeMinAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:926:28)",
                "diff": null
              },
              "uuid": "02362709-bdd0-48f9-8760-4a7fa25937a9",
              "parentUUID": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the transaction amount is greater than transaction type max amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1003 should return 400 if the transaction amount is greater than transaction type max amount of the source account",
              "timedOut": false,
              "duration": 25,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01915170011\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01915170011\",\n  },\n});\nconst transactionTypeMinUserToken = generateUserToken(userId.id, \"01915170011\", \"USER\");\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nawait addInitialBalance(accountingUser, 1000000);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(transactionTypeMinUserToken)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForTypeMaxAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:972:28)",
                "diff": null
              },
              "uuid": "f4393577-dd4a-426f-b2b1-774410840bd3",
              "parentUUID": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily transaction amount is greater than daily limit amount of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1003 should return 400 if the daily transaction amount is greater than daily limit amount of the transaction type",
              "timedOut": false,
              "duration": 686,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, dailyLimitAmount: true },\n  })\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst dailyLimitCount = Number(typeId.dailyLimitAmount);\nconst transactionPromises = [];\nfor (let i = 0; i < dailyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait Promise.all(transactionPromises);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:1074:28)",
                "diff": null
              },
              "uuid": "21650ce3-c91b-4ce5-8ba4-6532fed76da6",
              "parentUUID": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily transaction count is greater than daily limit count of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1003 should return 400 if the daily transaction count is greater than daily limit count of the transaction type",
              "timedOut": false,
              "duration": 276,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, dailyLimitCount: true },\n  })\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 5000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst dailyLimitCount = Number(typeId.dailyLimitCount);\nconst transactionPromises = [];\nfor (let i = 0; i < dailyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait Promise.all(transactionPromises);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:1175:28)",
                "diff": null
              },
              "uuid": "2e46c119-86a5-4f7d-b5cd-9b908e1dcddb",
              "parentUUID": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly transaction amount is greater than weekly limit amount of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1003 should return 400 if the weekly transaction amount is greater than weekly limit amount of the transaction type",
              "timedOut": false,
              "duration": 34,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, weeklyLimitAmount: true },\n  }),\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst weeklyLimitAmountType = Number(typeId.weeklyLimitAmount);\nconst transactionPromises = [];\nfor (let i = 0; i < weeklyLimitAmountType / 100; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait Promise.all(transactionPromises);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:1277:28)",
                "diff": null
              },
              "uuid": "73fd1d12-eafa-41b4-9f3c-5c97326c49aa",
              "parentUUID": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly transaction count is greater than weekly limit count of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1003 should return 400 if the weekly transaction count is greater than weekly limit count of the transaction type",
              "timedOut": true,
              "duration": 1999,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, weeklyLimitCount: true },\n  })\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst weeklyLimitCountType = Number(typeId.weeklyLimitCount);\nconst batchSize = 5;\nfor (let i = 0; i < weeklyLimitCountType; i += batchSize) {\n  const batchPromises = [];\n  const end = Math.min(i + batchSize, weeklyLimitCountType);\n  for (let j = i; j < end; j++) {\n    const promise = prismaAccounting.transaction.create({\n      data: {\n        fromAccountId: (await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })).id,\n        toAccountId: (await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })).id,\n        transactionTypeId: typeId.id,\n        amount: 100,\n        referenceNo: `Transaction ${j + 1}`,\n        note: `Test transaction ${j + 1}`,\n      },\n    }).then(async transaction => {\n      return Promise.all([\n        prismaAccounting.ledger.create({\n          data: {\n            accountId: (await prismaAccounting.userAccount.findUnique({\n              where: { identifier: sender.identifier },\n            })).id,\n            transactionId: transaction.id,\n            amount: 100,\n            description: `Ledger entry for transaction ${j + 1}`,\n            type: \"DEBIT\",\n          },\n        }),\n        prismaAccounting.ledger.create({\n          data: {\n            accountId: (await prismaAccounting.userAccount.findUnique({\n              where: { identifier: receiver.identifier },\n            })).id,\n            transactionId: transaction.id,\n            amount: 100,\n            description: `Ledger entry for transaction ${j + 1}`,\n            type: \"CREDIT\",\n          },\n        })\n      ]);\n    });\n    batchPromises.push(promise);\n  }\n  await Promise.all(batchPromises);\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const senderUser = await prismaAuth.appUser.findFirst({\n    where: { phone: sender.identifier },\n    select: { id: true }\n  });\n  const [apiTable] = await  database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  expect(apiTable.status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "08d4413f-055f-4913-a5a6-6965edf06a23",
              "parentUUID": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the monthly transaction count is greater than monthly limit count of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1003 should return 400 if the monthly transaction count is greater than monthly limit count of the transaction type",
              "timedOut": false,
              "duration": 407,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n  })\n]);\nconst monthlyLimitCountType = Number(typeId.monthlyLimitCount);\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nfor (let i = 0; i < monthlyLimitCountType; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'status')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'status')\n    at Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:1477:28)",
                "diff": null
              },
              "uuid": "d57cb290-a1b4-469f-9cb3-66d854a5452b",
              "parentUUID": "98a54949-54e6-4eb9-ad7d-6256f45001c6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "fdf1581a-efb1-46ae-b2c3-33e4be1d3697",
            "8c26d945-a211-4d79-807f-7fd9163b7b4e",
            "10149a76-b840-4843-9ead-4070025fb0bb",
            "06408a6f-6d0e-4999-851e-4cde3e24d162",
            "59e171d1-e7b9-4a48-b1e6-93acf6f5d32b",
            "fb6d4bf7-2838-4f07-b084-0504684b0786",
            "16202cbe-ccf4-4436-9018-29fa83742786",
            "72f83479-2a16-407f-b4a3-7e638d47f5b8",
            "1123e112-0c46-473c-b2ef-681cb431522b",
            "8d0e87db-0997-41d3-8984-4a76fd170dc2",
            "02362709-bdd0-48f9-8760-4a7fa25937a9",
            "f4393577-dd4a-426f-b2b1-774410840bd3",
            "21650ce3-c91b-4ce5-8ba4-6532fed76da6",
            "2e46c119-86a5-4f7d-b5cd-9b908e1dcddb",
            "73fd1d12-eafa-41b4-9f3c-5c97326c49aa",
            "08d4413f-055f-4913-a5a6-6965edf06a23",
            "d57cb290-a1b4-469f-9cb3-66d854a5452b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 19886,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
          "title": "Do Transaction API Check (POST) - Type: make-payment-001",
          "fullFile": "/opt/app/src/topUp/topup.test.js",
          "file": "/src/topUp/topup.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Do Transaction API Check (POST) - Type: make-payment-001\"",
              "fullTitle": "Do Transaction API Check (POST) - Type: make-payment-001 \"before each\" hook in \"Do Transaction API Check (POST) - Type: make-payment-001\"",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const senderIdentifier = sender?.identifier;\nconst receiverIdentifier = receiver?.identifier;\nconst senderAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: senderIdentifier },\n});\nconst receiverAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: receiverIdentifier },\n});\ncreatedType = await prismaAccounting.transactionType.findMany({\n  where: { transactionCode: transactionTypeCode },\n});\nif (transactionTypeCode != '1002') {\n  await database[0].deleteMany({});\n}\nif (!redisClient.isOpen) {\n  await redisClient.connect();\n}\nawait redisClient.FLUSHALL();",
              "err": {},
              "uuid": "09ef82ab-b00f-438c-913f-f4e3554c0fc4",
              "parentUUID": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Do Transaction API Check (POST) - Type: make-payment-001\"",
              "fullTitle": "Do Transaction API Check (POST) - Type: make-payment-001 \"after all\" hook in \"Do Transaction API Check (POST) - Type: make-payment-001\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "b479107b-0e6d-4d5d-b78e-0e4a3747bcd2",
              "parentUUID": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 400 if sender's account balance is less than the transaction amount",
              "fullTitle": "Do Transaction API Check (POST) - Type: make-payment-001 should return 400 if sender's account balance is less than the transaction amount",
              "timedOut": false,
              "duration": 292,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\n      await prismaAccounting.transaction.deleteMany({});\n      userId = await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      });\n      if (transactionTypeCode === '1001') { return; }\n      const verifiedPinToken = generateVerifyPinToken(transactionTypeCode, userId.id, \"01317577237\", \"USER\");\n      await redisClient.HSET(`token:${userId.phone}`, 'token', verifiedPinToken);\n      await redisClient.HGET(`token:${userId.phone}`, 'token');\n      if (transactionTypeCode != '1002') {\n        await database[0].deleteMany({});\n      }\n      const res = await pactum\n        .spec()\n        .withMethod(\"POST\")\n        .withBearerToken(token)\n        .withPath(`${baseUrl}${endpoint}`)\n        .withJson({\n          ...requestBody,\n          verifiedPinToken: verifiedPinToken\n        })\n        .expectStatus(400);\n      if (transactionTypeCode != '1002') {\n        const apiTable = await database[0].findMany({\n          where: {\n            userId: await prismaAuth.appUser.findFirst({\n              where: {\n                phone: sender.identifier,\n              },\n            })\n          }.id,\n        });\n        expect(apiTable[0].status).to.equal(\"TODO\");\n        const transactionsFromDB = await prismaAccounting.transaction.findMany({\n          where: { referenceNo: apiTable.referenceNumber },\n        });\n        expect(transactionsFromDB).to.be.empty;\n        const ledgerEntries = await prismaAccounting.ledger.findMany({\n          where: { transactionId: transactionsFromDB.id },\n        });\n        expect(ledgerEntries).to.be.empty;\n      }",
              "err": {
                "message": "PrismaClientKnownRequestError: \nInvalid `prisma.transaction.deleteMany()` invocation:\n\n\nForeign key constraint violated: `transactionId`",
                "estack": "PrismaClientKnownRequestError: \nInvalid `prisma.transaction.deleteMany()` invocation:\n\n\nForeign key constraint violated: `transactionId`\n    at qn.handleRequestError (prisma/generated/accounting/generated/accounting/runtime/library.js:121:7315)\n    at qn.handleAndLogRequestError (prisma/generated/accounting/generated/accounting/runtime/library.js:121:6640)\n    at qn.request (prisma/generated/accounting/generated/accounting/runtime/library.js:121:6347)\n    at async l (prisma/generated/accounting/generated/accounting/runtime/library.js:130:9616)\n    at async Context.<anonymous> (file:///opt/app/src/utils/doTransaction.js:66:7)",
                "diff": null
              },
              "uuid": "cf638cb6-c6bc-408c-962c-784f2c4939a2",
              "parentUUID": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the sender's status is anything but FULL_ACTIVE",
              "fullTitle": "Do Transaction API Check (POST) - Type: make-payment-001 should return 400 if the sender's status is anything but FULL_ACTIVE",
              "timedOut": false,
              "duration": 38,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n        where: {\n          phone: \"01317577238\",\n        },\n      });\n      const accountingUser = await prismaAccounting.userAccount.findFirst({\n        where: {\n          identifier: \"01317577238\",\n        },\n      });\n      const onholdUserToken = generateUserToken(userId.id, \"01317577238\", \"USER\");\n      const onholdUserTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, \"01317577238\", \"USER\");\n      await redisClient.HSET(`token:${userId.phone}`, 'token', onholdUserTokenPin);\n      await redisClient.HGET(`token:${userId.phone}`, 'token');\n      if (transactionTypeCode != '1001') {\n        await addInitialBalance(accountingUser, 500000);\n      }\n      await pactum\n        .spec()\n        .withMethod(\"POST\")\n        .withBearerToken(onholdUserToken)\n        .withPath(`${baseUrl}${endpoint}`)\n        .withJson({\n          ...requestBody,\n          verifiedPinToken: onholdUserTokenPin\n        })\n        .expectStatus(400);\n      if (transactionTypeCode != '1002') {\n        const apiTable = await database[0].findMany({\n          where: {\n            userId: await prismaAuth.appUser.findFirst({\n              where: {\n                phone: sender.identifier,\n              },\n            })\n          }.id,\n        });\n        expect(apiTable[0].status).to.equal(\"TODO\");\n        // const transactionsFromDB = await prismaAccounting.transaction.findMany({\n        //   where: { referenceNo: apiTable.referenceNumber },\n        // });\n        // expect(transactionsFromDB).to.have.lengthOf(2);\n        // const ledgerEntries = await prismaAccounting.ledger.findMany({\n        //   where: { transactionId: transactionsFromDB[0].id },\n        // });\n        // expect(ledgerEntries).to.have.lengthOf(2);\n      }",
              "err": {
                "message": "AssertionError: HTTP status 502 !== 400\n\n502 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 502 !== 400\n\n502 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 502\n+ 400\n"
              },
              "uuid": "a6d0eedc-196c-4b4f-8367-e4f1d52c7fc4",
              "parentUUID": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the balance after transaction amount is less than min Wallet Amount of sender account",
              "fullTitle": "Do Transaction API Check (POST) - Type: make-payment-001 should return 400 if the balance after transaction amount is less than min Wallet Amount of sender account",
              "timedOut": false,
              "duration": 29,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      });\n      if (transactionTypeCode != '1001') {\n        await addInitialBalance(sender, 1000000);\n      }\n      const verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\n      await redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\n      await redisClient.HGET(`token:${userId.phone}`, 'token');\n      await pactum\n        .spec()\n        .withMethod(\"POST\")\n        .withBearerToken(token)\n        .withPath(`${baseUrl}${endpoint}`)\n        .withJson({\n          ...requestBodyForMinWalleAmount,\n          verifiedPinToken: verifiedTokenPin\n        })\n        .expectStatus(400);\n      if (transactionTypeCode != '1002') {\n        const apiTable = await database[0].findMany({\n          where: {\n            userId: await prismaAuth.appUser.findFirst({\n              where: {\n                phone: sender.identifier,\n              },\n            })\n          }.id,\n        });\n        expect(apiTable[0].status).to.equal(\"TODO\");\n        const transactionsFromDB = await prismaAccounting.transaction.findMany({\n          where: { referenceNo: apiTable.referenceNumber },\n        });\n        if (transactionTypeCode != '1001') {\n          // expect(transactionsFromDB).to.have.lengthOf(2);\n          // const ledgerEntries = await prismaAccounting.ledger.findMany({\n          //   where: { transactionId: transactionsFromDB[0].id },\n          // });\n          // expect(ledgerEntries).to.have.lengthOf(2);\n          // const ledgerEntries1 = await prismaAccounting.ledger.findMany({\n          //   where: { transactionId: transactionsFromDB[1].id },\n          // });\n          // expect(ledgerEntries1).to.have.lengthOf(2);\n        }\n        else {\n          expect(transactionsFromDB).to.be.empty;\n        }\n      }",
              "err": {
                "message": "AssertionError: HTTP status 502 !== 400\n\n502 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 502 !== 400\n\n502 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 502\n+ 400\n"
              },
              "uuid": "0602e837-0171-4117-b167-d90a157f27fe",
              "parentUUID": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the balance after transaction is greater than max Wallet Amount of receiver account",
              "fullTitle": "Do Transaction API Check (POST) - Type: make-payment-001 should return 400 if the balance after transaction is greater than max Wallet Amount of receiver account",
              "timedOut": false,
              "duration": 112,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const maxWalletUser = await prismaAuth.appUser.findUnique({\n  where: { phone: \"01317577210\" }\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01317577210\",\n  },\n});\nconst maxWalletUserToken = generateUserToken(maxWalletUser.id, \"01317577210\", \"USER\");\nif (transactionTypeCode != '1001') {\n  await addInitialBalance(accountingUser, 500000);\n  await addInitialBalance(receiver, 500);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, maxWalletUser.id, maxWalletUser.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(maxWalletUserToken)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForMaxWalleAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: \"01317577210\",\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "7a1de767-e4bb-4aea-9a1b-ed6f166f855a",
              "parentUUID": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily count is greater than daily limit count of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: make-payment-001 should return 400 if the daily count is greater than daily limit count of the source account",
              "timedOut": false,
              "duration": 486,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nthis.timeout(120000);\nawait addInitialBalance(sender, 500000);\n\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170025\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170025\",\n  },\n});\nconst dailyLimitCountUser = generateUserToken(userId.id, \"01715170025\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nconst dailyLimitCount = accountingUser.dailyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nfor (let i = 0; i < dailyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(dailyLimitCountUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "6afe5d14-4bb7-4444-9a6b-348d01862e8d",
              "parentUUID": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily transaction amount is greater than daily limit amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: make-payment-001 should return 400 if the daily transaction amount is greater than daily limit amount of the source account",
              "timedOut": true,
              "duration": 2000,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170020\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170020\",\n  },\n});\nconst dailyLimitAmountUser = generateUserToken(userId.id, \"01715170020\", \"USER\");\nif (transactionTypeCode != '1001') {\n  await addInitialBalance(accountingUser, 500000);\n}\nconst dailyLimitAmount = accountingUser.dailyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < dailyLimitAmount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(dailyLimitAmountUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForDailyLimitAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "6b0a3c27-36ad-42f1-b6cd-bd213dcb9fdd",
              "parentUUID": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the monthly count is greater than maximum monthly limit count of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: make-payment-001 should return 400 if the monthly count is greater than maximum monthly limit count of the source account",
              "timedOut": false,
              "duration": 412,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nawait addInitialBalance(sender, 500000);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170021\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170021\",\n  },\n});\nconst monthlyLimitCountCountUser = generateUserToken(userId.id, \"01715170021\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst monthlyLimitCount = accountingUser.monthlyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < monthlyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(monthlyLimitCountCountUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedPinToken: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "AssertionError: HTTP status 502 !== 400\n\n502 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 502 !== 400\n\n502 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 502\n+ 400\n"
              },
              "uuid": "fad0063d-a276-4876-a73b-0602d6522d77",
              "parentUUID": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the monthly transaction amount is greater than monthly limit amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: make-payment-001 should return 400 if the monthly transaction amount is greater than monthly limit amount of the source account",
              "timedOut": false,
              "duration": 9607,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nthis.timeout(120000);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170021\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170021\",\n  },\n});\nconst monthlyLimitAmounttUser = generateUserToken(userId.id, \"01715170021\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst monthlyLimitAmount = accountingUser.monthlyLimitAmount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < monthlyLimitAmount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(monthlyLimitAmounttUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedPinToken: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "AssertionError: HTTP status 502 !== 400\n\n502 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 502 !== 400\n\n502 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 502\n+ 400\n"
              },
              "uuid": "8ac09d16-999e-4430-a2e6-4b91992889ce",
              "parentUUID": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly count is greater than maximum weekly limit count of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: make-payment-001 should return 400 if the weekly count is greater than maximum weekly limit count of the source account",
              "timedOut": false,
              "duration": 19376,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nthis.timeout(120000);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170105\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170105\",\n  },\n});\nconst weeklyLimitAmounttUser = generateUserToken(userId.id, \"01715170105\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst weeklyLimitAmount = accountingUser.weeklyLimitAmount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < weeklyLimitAmount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(weeklyLimitAmounttUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "2a5c2063-66d0-4ad2-bbe4-1d4c1dbcc52c",
              "parentUUID": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly transaction amount is greater than weekly limit amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: make-payment-001 should return 400 if the weekly transaction amount is greater than weekly limit amount of the source account",
              "timedOut": false,
              "duration": 342,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170105\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170105\",\n  },\n});\nconst weeklyLimitAmounttUser = generateUserToken(userId.id, \"01715170105\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst weeklyLimitCount = accountingUser.weeklyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < weeklyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(weeklyLimitAmounttUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "37b7b821-6f78-46f6-b2a5-71230ca7b857",
              "parentUUID": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the transaction amount is less than transaction type min amount",
              "fullTitle": "Do Transaction API Check (POST) - Type: make-payment-001 should return 400 if the transaction amount is less than transaction type min amount",
              "timedOut": false,
              "duration": 76,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01915170011\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01915170011\",\n  },\n});\nconst transactionTypeMinUserToken = generateUserToken(userId.id, \"01915170011\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(transactionTypeMinUserToken)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForTypeMinAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "0abb7810-671d-463b-bf7c-d2f116dc47ef",
              "parentUUID": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the transaction amount is greater than transaction type max amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: make-payment-001 should return 400 if the transaction amount is greater than transaction type max amount of the source account",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01915170011\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01915170011\",\n  },\n});\nconst transactionTypeMinUserToken = generateUserToken(userId.id, \"01915170011\", \"USER\");\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nawait addInitialBalance(accountingUser, 1000000);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(transactionTypeMinUserToken)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForTypeMaxAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "189533da-a960-47ce-861f-416049e7a8ba",
              "parentUUID": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily transaction amount is greater than daily limit amount of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: make-payment-001 should return 400 if the daily transaction amount is greater than daily limit amount of the transaction type",
              "timedOut": true,
              "duration": 2001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, dailyLimitAmount: true },\n  })\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst dailyLimitCount = Number(typeId.dailyLimitAmount);\nconst transactionPromises = [];\nfor (let i = 0; i < dailyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait Promise.all(transactionPromises);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "17aef4a0-8ac3-4cbe-ab18-88e8d3a158c4",
              "parentUUID": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily transaction count is greater than daily limit count of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: make-payment-001 should return 400 if the daily transaction count is greater than daily limit count of the transaction type",
              "timedOut": false,
              "duration": 490,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, dailyLimitCount: true },\n  })\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 5000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst dailyLimitCount = Number(typeId.dailyLimitCount);\nconst transactionPromises = [];\nfor (let i = 0; i < dailyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait Promise.all(transactionPromises);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "34c9bc51-3812-4772-8126-fb5a4ab381f5",
              "parentUUID": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly transaction amount is greater than weekly limit amount of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: make-payment-001 should return 400 if the weekly transaction amount is greater than weekly limit amount of the transaction type",
              "timedOut": false,
              "duration": 202,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, weeklyLimitAmount: true },\n  }),\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst weeklyLimitAmountType = Number(typeId.weeklyLimitAmount);\nconst transactionPromises = [];\nfor (let i = 0; i < weeklyLimitAmountType / 100; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait Promise.all(transactionPromises);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "d49ec67e-e075-4e67-8ed5-35f0286368d4",
              "parentUUID": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly transaction count is greater than weekly limit count of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: make-payment-001 should return 400 if the weekly transaction count is greater than weekly limit count of the transaction type",
              "timedOut": false,
              "duration": 404,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, weeklyLimitCount: true },\n  })\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst weeklyLimitCountType = Number(typeId.weeklyLimitCount);\nconst batchSize = 5;\nfor (let i = 0; i < weeklyLimitCountType; i += batchSize) {\n  const batchPromises = [];\n  const end = Math.min(i + batchSize, weeklyLimitCountType);\n  for (let j = i; j < end; j++) {\n    const promise = prismaAccounting.transaction.create({\n      data: {\n        fromAccountId: (await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })).id,\n        toAccountId: (await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })).id,\n        transactionTypeId: typeId.id,\n        amount: 100,\n        referenceNo: `Transaction ${j + 1}`,\n        note: `Test transaction ${j + 1}`,\n      },\n    }).then(async transaction => {\n      return Promise.all([\n        prismaAccounting.ledger.create({\n          data: {\n            accountId: (await prismaAccounting.userAccount.findUnique({\n              where: { identifier: sender.identifier },\n            })).id,\n            transactionId: transaction.id,\n            amount: 100,\n            description: `Ledger entry for transaction ${j + 1}`,\n            type: \"DEBIT\",\n          },\n        }),\n        prismaAccounting.ledger.create({\n          data: {\n            accountId: (await prismaAccounting.userAccount.findUnique({\n              where: { identifier: receiver.identifier },\n            })).id,\n            transactionId: transaction.id,\n            amount: 100,\n            description: `Ledger entry for transaction ${j + 1}`,\n            type: \"CREDIT\",\n          },\n        })\n      ]);\n    });\n    batchPromises.push(promise);\n  }\n  await Promise.all(batchPromises);\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const senderUser = await prismaAuth.appUser.findFirst({\n    where: { phone: sender.identifier },\n    select: { id: true }\n  });\n  const [apiTable] = await  database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  expect(apiTable.status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "49c5f5bf-4081-4b56-983b-45244e8a3793",
              "parentUUID": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the monthly transaction count is greater than monthly limit count of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: make-payment-001 should return 400 if the monthly transaction count is greater than monthly limit count of the transaction type",
              "timedOut": false,
              "duration": 1063,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n  })\n]);\nconst monthlyLimitCountType = Number(typeId.monthlyLimitCount);\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nfor (let i = 0; i < monthlyLimitCountType; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "447def6d-020f-4c47-85d3-b4e9723b639e",
              "parentUUID": "ca22f5e8-c6a9-40c6-9546-9c34e4b0b66c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7a1de767-e4bb-4aea-9a1b-ed6f166f855a",
            "6afe5d14-4bb7-4444-9a6b-348d01862e8d",
            "2a5c2063-66d0-4ad2-bbe4-1d4c1dbcc52c",
            "37b7b821-6f78-46f6-b2a5-71230ca7b857",
            "0abb7810-671d-463b-bf7c-d2f116dc47ef",
            "189533da-a960-47ce-861f-416049e7a8ba",
            "34c9bc51-3812-4772-8126-fb5a4ab381f5",
            "d49ec67e-e075-4e67-8ed5-35f0286368d4",
            "49c5f5bf-4081-4b56-983b-45244e8a3793",
            "447def6d-020f-4c47-85d3-b4e9723b639e"
          ],
          "failures": [
            "cf638cb6-c6bc-408c-962c-784f2c4939a2",
            "a6d0eedc-196c-4b4f-8367-e4f1d52c7fc4",
            "0602e837-0171-4117-b167-d90a157f27fe",
            "6b0a3c27-36ad-42f1-b6cd-bd213dcb9fdd",
            "fad0063d-a276-4876-a73b-0602d6522d77",
            "8ac09d16-999e-4430-a2e6-4b91992889ce",
            "17aef4a0-8ac3-4cbe-ab18-88e8d3a158c4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 37013,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
          "title": "Do Transaction API Check (POST) - Type: 1002",
          "fullFile": "/opt/app/src/topUp/topup.test.js",
          "file": "/src/topUp/topup.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Do Transaction API Check (POST) - Type: 1002\"",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1002 \"before each\" hook in \"Do Transaction API Check (POST) - Type: 1002\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const senderIdentifier = sender?.identifier;\nconst receiverIdentifier = receiver?.identifier;\nconst senderAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: senderIdentifier },\n});\nconst receiverAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: receiverIdentifier },\n});\ncreatedType = await prismaAccounting.transactionType.findMany({\n  where: { transactionCode: transactionTypeCode },\n});\nif (transactionTypeCode != '1002') {\n  await database[0].deleteMany({});\n}\nif (!redisClient.isOpen) {\n  await redisClient.connect();\n}\nawait redisClient.FLUSHALL();",
              "err": {},
              "uuid": "27d155c8-858f-46a0-9de9-ecbc5187a090",
              "parentUUID": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Do Transaction API Check (POST) - Type: 1002\"",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1002 \"after all\" hook in \"Do Transaction API Check (POST) - Type: 1002\"",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "7a26c651-20ba-4e0c-9652-937671b5975c",
              "parentUUID": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 400 if sender's account balance is less than the transaction amount",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1002 should return 400 if sender's account balance is less than the transaction amount",
              "timedOut": true,
              "duration": 2000,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\n      await prismaAccounting.transaction.deleteMany({});\n      userId = await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      });\n      if (transactionTypeCode === '1001') { return; }\n      const verifiedPinToken = generateVerifyPinToken(transactionTypeCode, userId.id, \"01317577237\", \"USER\");\n      await redisClient.HSET(`token:${userId.phone}`, 'token', verifiedPinToken);\n      await redisClient.HGET(`token:${userId.phone}`, 'token');\n      if (transactionTypeCode != '1002') {\n        await database[0].deleteMany({});\n      }\n      const res = await pactum\n        .spec()\n        .withMethod(\"POST\")\n        .withBearerToken(token)\n        .withPath(`${baseUrl}${endpoint}`)\n        .withJson({\n          ...requestBody,\n          verifiedPinToken: verifiedPinToken\n        })\n        .expectStatus(400);\n      if (transactionTypeCode != '1002') {\n        const apiTable = await database[0].findMany({\n          where: {\n            userId: await prismaAuth.appUser.findFirst({\n              where: {\n                phone: sender.identifier,\n              },\n            })\n          }.id,\n        });\n        expect(apiTable[0].status).to.equal(\"TODO\");\n        const transactionsFromDB = await prismaAccounting.transaction.findMany({\n          where: { referenceNo: apiTable.referenceNumber },\n        });\n        expect(transactionsFromDB).to.be.empty;\n        const ledgerEntries = await prismaAccounting.ledger.findMany({\n          where: { transactionId: transactionsFromDB.id },\n        });\n        expect(ledgerEntries).to.be.empty;\n      }",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "5241e1d0-dbd4-40f4-9a21-de4024fc8e39",
              "parentUUID": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the sender's status is anything but FULL_ACTIVE",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1002 should return 400 if the sender's status is anything but FULL_ACTIVE",
              "timedOut": false,
              "duration": 1573,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n        where: {\n          phone: \"01317577238\",\n        },\n      });\n      const accountingUser = await prismaAccounting.userAccount.findFirst({\n        where: {\n          identifier: \"01317577238\",\n        },\n      });\n      const onholdUserToken = generateUserToken(userId.id, \"01317577238\", \"USER\");\n      const onholdUserTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, \"01317577238\", \"USER\");\n      await redisClient.HSET(`token:${userId.phone}`, 'token', onholdUserTokenPin);\n      await redisClient.HGET(`token:${userId.phone}`, 'token');\n      if (transactionTypeCode != '1001') {\n        await addInitialBalance(accountingUser, 500000);\n      }\n      await pactum\n        .spec()\n        .withMethod(\"POST\")\n        .withBearerToken(onholdUserToken)\n        .withPath(`${baseUrl}${endpoint}`)\n        .withJson({\n          ...requestBody,\n          verifiedPinToken: onholdUserTokenPin\n        })\n        .expectStatus(400);\n      if (transactionTypeCode != '1002') {\n        const apiTable = await database[0].findMany({\n          where: {\n            userId: await prismaAuth.appUser.findFirst({\n              where: {\n                phone: sender.identifier,\n              },\n            })\n          }.id,\n        });\n        expect(apiTable[0].status).to.equal(\"TODO\");\n        // const transactionsFromDB = await prismaAccounting.transaction.findMany({\n        //   where: { referenceNo: apiTable.referenceNumber },\n        // });\n        // expect(transactionsFromDB).to.have.lengthOf(2);\n        // const ledgerEntries = await prismaAccounting.ledger.findMany({\n        //   where: { transactionId: transactionsFromDB[0].id },\n        // });\n        // expect(ledgerEntries).to.have.lengthOf(2);\n      }",
              "err": {},
              "uuid": "ed4cf5b4-9d2e-4533-aac7-c949d18406af",
              "parentUUID": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the balance after transaction amount is less than min Wallet Amount of sender account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1002 should return 400 if the balance after transaction amount is less than min Wallet Amount of sender account",
              "timedOut": false,
              "duration": 428,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      });\n      if (transactionTypeCode != '1001') {\n        await addInitialBalance(sender, 1000000);\n      }\n      const verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\n      await redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\n      await redisClient.HGET(`token:${userId.phone}`, 'token');\n      await pactum\n        .spec()\n        .withMethod(\"POST\")\n        .withBearerToken(token)\n        .withPath(`${baseUrl}${endpoint}`)\n        .withJson({\n          ...requestBodyForMinWalleAmount,\n          verifiedPinToken: verifiedTokenPin\n        })\n        .expectStatus(400);\n      if (transactionTypeCode != '1002') {\n        const apiTable = await database[0].findMany({\n          where: {\n            userId: await prismaAuth.appUser.findFirst({\n              where: {\n                phone: sender.identifier,\n              },\n            })\n          }.id,\n        });\n        expect(apiTable[0].status).to.equal(\"TODO\");\n        const transactionsFromDB = await prismaAccounting.transaction.findMany({\n          where: { referenceNo: apiTable.referenceNumber },\n        });\n        if (transactionTypeCode != '1001') {\n          // expect(transactionsFromDB).to.have.lengthOf(2);\n          // const ledgerEntries = await prismaAccounting.ledger.findMany({\n          //   where: { transactionId: transactionsFromDB[0].id },\n          // });\n          // expect(ledgerEntries).to.have.lengthOf(2);\n          // const ledgerEntries1 = await prismaAccounting.ledger.findMany({\n          //   where: { transactionId: transactionsFromDB[1].id },\n          // });\n          // expect(ledgerEntries1).to.have.lengthOf(2);\n        }\n        else {\n          expect(transactionsFromDB).to.be.empty;\n        }\n      }",
              "err": {},
              "uuid": "8a83db4f-ecdb-485c-a835-f6652b3a093d",
              "parentUUID": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the balance after transaction is greater than max Wallet Amount of receiver account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1002 should return 400 if the balance after transaction is greater than max Wallet Amount of receiver account",
              "timedOut": false,
              "duration": 1203,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const maxWalletUser = await prismaAuth.appUser.findUnique({\n  where: { phone: \"01317577210\" }\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01317577210\",\n  },\n});\nconst maxWalletUserToken = generateUserToken(maxWalletUser.id, \"01317577210\", \"USER\");\nif (transactionTypeCode != '1001') {\n  await addInitialBalance(accountingUser, 500000);\n  await addInitialBalance(receiver, 500);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, maxWalletUser.id, maxWalletUser.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(maxWalletUserToken)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForMaxWalleAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: \"01317577210\",\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "5d635ffb-e319-4397-abfd-15f8e50875a1",
              "parentUUID": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily count is greater than daily limit count of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1002 should return 400 if the daily count is greater than daily limit count of the source account",
              "timedOut": false,
              "duration": 4779,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nthis.timeout(120000);\nawait addInitialBalance(sender, 500000);\n\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170025\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170025\",\n  },\n});\nconst dailyLimitCountUser = generateUserToken(userId.id, \"01715170025\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nconst dailyLimitCount = accountingUser.dailyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nfor (let i = 0; i < dailyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(dailyLimitCountUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "ade2f489-c45e-415c-a034-8b7decbb85c5",
              "parentUUID": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily transaction amount is greater than daily limit amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1002 should return 400 if the daily transaction amount is greater than daily limit amount of the source account",
              "timedOut": true,
              "duration": 1999,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170020\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170020\",\n  },\n});\nconst dailyLimitAmountUser = generateUserToken(userId.id, \"01715170020\", \"USER\");\nif (transactionTypeCode != '1001') {\n  await addInitialBalance(accountingUser, 500000);\n}\nconst dailyLimitAmount = accountingUser.dailyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < dailyLimitAmount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(dailyLimitAmountUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForDailyLimitAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "6b13b59c-2c4f-4d2b-9f07-b505b6e899ef",
              "parentUUID": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the monthly count is greater than maximum monthly limit count of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1002 should return 400 if the monthly count is greater than maximum monthly limit count of the source account",
              "timedOut": false,
              "duration": 307,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nawait addInitialBalance(sender, 500000);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170021\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170021\",\n  },\n});\nconst monthlyLimitCountCountUser = generateUserToken(userId.id, \"01715170021\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst monthlyLimitCount = accountingUser.monthlyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < monthlyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(monthlyLimitCountCountUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedPinToken: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "4a6f7e50-8937-47eb-b8ee-9151e1073c63",
              "parentUUID": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the monthly transaction amount is greater than monthly limit amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1002 should return 400 if the monthly transaction amount is greater than monthly limit amount of the source account",
              "timedOut": false,
              "duration": 6387,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nthis.timeout(120000);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170021\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170021\",\n  },\n});\nconst monthlyLimitAmounttUser = generateUserToken(userId.id, \"01715170021\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst monthlyLimitAmount = accountingUser.monthlyLimitAmount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < monthlyLimitAmount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(monthlyLimitAmounttUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedPinToken: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "526f30e4-c340-421a-a16c-e094f056ba34",
              "parentUUID": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly count is greater than maximum weekly limit count of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1002 should return 400 if the weekly count is greater than maximum weekly limit count of the source account",
              "timedOut": false,
              "duration": 5755,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nthis.timeout(120000);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170105\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170105\",\n  },\n});\nconst weeklyLimitAmounttUser = generateUserToken(userId.id, \"01715170105\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst weeklyLimitAmount = accountingUser.weeklyLimitAmount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < weeklyLimitAmount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(weeklyLimitAmounttUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "ca8a383c-1b08-4107-a34a-ae68aaca6372",
              "parentUUID": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly transaction amount is greater than weekly limit amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1002 should return 400 if the weekly transaction amount is greater than weekly limit amount of the source account",
              "timedOut": false,
              "duration": 173,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170105\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170105\",\n  },\n});\nconst weeklyLimitAmounttUser = generateUserToken(userId.id, \"01715170105\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst weeklyLimitCount = accountingUser.weeklyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < weeklyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(weeklyLimitAmounttUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "55a266c2-3749-41f0-9214-1965a76b9b5f",
              "parentUUID": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the transaction amount is less than transaction type min amount",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1002 should return 400 if the transaction amount is less than transaction type min amount",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01915170011\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01915170011\",\n  },\n});\nconst transactionTypeMinUserToken = generateUserToken(userId.id, \"01915170011\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(transactionTypeMinUserToken)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForTypeMinAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "0c3d7c68-e0a8-46c0-95f2-87b96ba319a9",
              "parentUUID": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the transaction amount is greater than transaction type max amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1002 should return 400 if the transaction amount is greater than transaction type max amount of the source account",
              "timedOut": false,
              "duration": 49,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01915170011\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01915170011\",\n  },\n});\nconst transactionTypeMinUserToken = generateUserToken(userId.id, \"01915170011\", \"USER\");\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nawait addInitialBalance(accountingUser, 1000000);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(transactionTypeMinUserToken)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForTypeMaxAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "b0f5e0d9-e6ed-4aaf-b2af-ad375773c6bb",
              "parentUUID": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily transaction amount is greater than daily limit amount of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1002 should return 400 if the daily transaction amount is greater than daily limit amount of the transaction type",
              "timedOut": true,
              "duration": 2000,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, dailyLimitAmount: true },\n  })\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst dailyLimitCount = Number(typeId.dailyLimitAmount);\nconst transactionPromises = [];\nfor (let i = 0; i < dailyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait Promise.all(transactionPromises);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "cc244bd0-5718-4a19-8901-c35428c0b00f",
              "parentUUID": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily transaction count is greater than daily limit count of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1002 should return 400 if the daily transaction count is greater than daily limit count of the transaction type",
              "timedOut": false,
              "duration": 230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, dailyLimitCount: true },\n  })\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 5000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst dailyLimitCount = Number(typeId.dailyLimitCount);\nconst transactionPromises = [];\nfor (let i = 0; i < dailyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait Promise.all(transactionPromises);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "f1715f3e-eba2-48d9-a07c-561db49ff0f9",
              "parentUUID": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly transaction amount is greater than weekly limit amount of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1002 should return 400 if the weekly transaction amount is greater than weekly limit amount of the transaction type",
              "timedOut": false,
              "duration": 125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, weeklyLimitAmount: true },\n  }),\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst weeklyLimitAmountType = Number(typeId.weeklyLimitAmount);\nconst transactionPromises = [];\nfor (let i = 0; i < weeklyLimitAmountType / 100; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait Promise.all(transactionPromises);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "0b58b3e2-b3d5-4318-9339-7b6681cb9adc",
              "parentUUID": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly transaction count is greater than weekly limit count of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1002 should return 400 if the weekly transaction count is greater than weekly limit count of the transaction type",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, weeklyLimitCount: true },\n  })\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst weeklyLimitCountType = Number(typeId.weeklyLimitCount);\nconst batchSize = 5;\nfor (let i = 0; i < weeklyLimitCountType; i += batchSize) {\n  const batchPromises = [];\n  const end = Math.min(i + batchSize, weeklyLimitCountType);\n  for (let j = i; j < end; j++) {\n    const promise = prismaAccounting.transaction.create({\n      data: {\n        fromAccountId: (await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })).id,\n        toAccountId: (await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })).id,\n        transactionTypeId: typeId.id,\n        amount: 100,\n        referenceNo: `Transaction ${j + 1}`,\n        note: `Test transaction ${j + 1}`,\n      },\n    }).then(async transaction => {\n      return Promise.all([\n        prismaAccounting.ledger.create({\n          data: {\n            accountId: (await prismaAccounting.userAccount.findUnique({\n              where: { identifier: sender.identifier },\n            })).id,\n            transactionId: transaction.id,\n            amount: 100,\n            description: `Ledger entry for transaction ${j + 1}`,\n            type: \"DEBIT\",\n          },\n        }),\n        prismaAccounting.ledger.create({\n          data: {\n            accountId: (await prismaAccounting.userAccount.findUnique({\n              where: { identifier: receiver.identifier },\n            })).id,\n            transactionId: transaction.id,\n            amount: 100,\n            description: `Ledger entry for transaction ${j + 1}`,\n            type: \"CREDIT\",\n          },\n        })\n      ]);\n    });\n    batchPromises.push(promise);\n  }\n  await Promise.all(batchPromises);\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const senderUser = await prismaAuth.appUser.findFirst({\n    where: { phone: sender.identifier },\n    select: { id: true }\n  });\n  const [apiTable] = await  database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  expect(apiTable.status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "49c98740-18b0-46ae-bd87-11f3d4e9d152",
              "parentUUID": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the monthly transaction count is greater than monthly limit count of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1002 should return 400 if the monthly transaction count is greater than monthly limit count of the transaction type",
              "timedOut": false,
              "duration": 329,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n  })\n]);\nconst monthlyLimitCountType = Number(typeId.monthlyLimitCount);\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nfor (let i = 0; i < monthlyLimitCountType; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "d8b4fe98-4b63-40f2-b9ed-643c0c963e2b",
              "parentUUID": "0169f73c-90a5-4116-a5c4-1872aa7034f5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ed4cf5b4-9d2e-4533-aac7-c949d18406af",
            "8a83db4f-ecdb-485c-a835-f6652b3a093d",
            "5d635ffb-e319-4397-abfd-15f8e50875a1",
            "ade2f489-c45e-415c-a034-8b7decbb85c5",
            "4a6f7e50-8937-47eb-b8ee-9151e1073c63",
            "526f30e4-c340-421a-a16c-e094f056ba34",
            "ca8a383c-1b08-4107-a34a-ae68aaca6372",
            "55a266c2-3749-41f0-9214-1965a76b9b5f",
            "0c3d7c68-e0a8-46c0-95f2-87b96ba319a9",
            "b0f5e0d9-e6ed-4aaf-b2af-ad375773c6bb",
            "f1715f3e-eba2-48d9-a07c-561db49ff0f9",
            "0b58b3e2-b3d5-4318-9339-7b6681cb9adc",
            "49c98740-18b0-46ae-bd87-11f3d4e9d152",
            "d8b4fe98-4b63-40f2-b9ed-643c0c963e2b"
          ],
          "failures": [
            "5241e1d0-dbd4-40f4-9a21-de4024fc8e39",
            "6b13b59c-2c4f-4d2b-9f07-b505b6e899ef",
            "cc244bd0-5718-4a19-8901-c35428c0b00f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 27531,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b7082267-573c-4d3a-952d-a6528fcb1833",
          "title": "Do Transaction API Check (POST) - Type: 1005",
          "fullFile": "/opt/app/src/topUp/topup.test.js",
          "file": "/src/topUp/topup.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Do Transaction API Check (POST) - Type: 1005\"",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1005 \"before each\" hook in \"Do Transaction API Check (POST) - Type: 1005\"",
              "timedOut": false,
              "duration": 9,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const senderIdentifier = sender?.identifier;\nconst receiverIdentifier = receiver?.identifier;\nconst senderAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: senderIdentifier },\n});\nconst receiverAccount = await prismaAccounting.userAccount.findUnique({\n  where: { identifier: receiverIdentifier },\n});\ncreatedType = await prismaAccounting.transactionType.findMany({\n  where: { transactionCode: transactionTypeCode },\n});\nif (transactionTypeCode != '1002') {\n  await database[0].deleteMany({});\n}\nif (!redisClient.isOpen) {\n  await redisClient.connect();\n}\nawait redisClient.FLUSHALL();",
              "err": {},
              "uuid": "f892fdeb-4aea-421b-8ebb-287f3c5d65d1",
              "parentUUID": "b7082267-573c-4d3a-952d-a6528fcb1833",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Do Transaction API Check (POST) - Type: 1005\"",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1005 \"after all\" hook in \"Do Transaction API Check (POST) - Type: 1005\"",
              "timedOut": false,
              "duration": 16,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.$disconnect();\nawait prismaAuth.$disconnect();\nawait prismaApi.$disconnect();",
              "err": {},
              "uuid": "ddaa12e0-b367-4305-b14a-8be0fe6268eb",
              "parentUUID": "b7082267-573c-4d3a-952d-a6528fcb1833",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return 400 if sender's account balance is less than the transaction amount",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1005 should return 400 if sender's account balance is less than the transaction amount",
              "timedOut": false,
              "duration": 63,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await prismaAccounting.ledger.deleteMany({});\n      await prismaAccounting.transaction.deleteMany({});\n      userId = await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      });\n      if (transactionTypeCode === '1001') { return; }\n      const verifiedPinToken = generateVerifyPinToken(transactionTypeCode, userId.id, \"01317577237\", \"USER\");\n      await redisClient.HSET(`token:${userId.phone}`, 'token', verifiedPinToken);\n      await redisClient.HGET(`token:${userId.phone}`, 'token');\n      if (transactionTypeCode != '1002') {\n        await database[0].deleteMany({});\n      }\n      const res = await pactum\n        .spec()\n        .withMethod(\"POST\")\n        .withBearerToken(token)\n        .withPath(`${baseUrl}${endpoint}`)\n        .withJson({\n          ...requestBody,\n          verifiedPinToken: verifiedPinToken\n        })\n        .expectStatus(400);\n      if (transactionTypeCode != '1002') {\n        const apiTable = await database[0].findMany({\n          where: {\n            userId: await prismaAuth.appUser.findFirst({\n              where: {\n                phone: sender.identifier,\n              },\n            })\n          }.id,\n        });\n        expect(apiTable[0].status).to.equal(\"TODO\");\n        const transactionsFromDB = await prismaAccounting.transaction.findMany({\n          where: { referenceNo: apiTable.referenceNumber },\n        });\n        expect(transactionsFromDB).to.be.empty;\n        const ledgerEntries = await prismaAccounting.ledger.findMany({\n          where: { transactionId: transactionsFromDB.id },\n        });\n        expect(ledgerEntries).to.be.empty;\n      }",
              "err": {
                "message": "AssertionError: HTTP status 502 !== 400\n\n502 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 502 !== 400\n\n502 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 502\n+ 400\n"
              },
              "uuid": "1b50c78f-ddd4-412c-b585-317af4f02636",
              "parentUUID": "b7082267-573c-4d3a-952d-a6528fcb1833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the sender's status is anything but FULL_ACTIVE",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1005 should return 400 if the sender's status is anything but FULL_ACTIVE",
              "timedOut": false,
              "duration": 25,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n        where: {\n          phone: \"01317577238\",\n        },\n      });\n      const accountingUser = await prismaAccounting.userAccount.findFirst({\n        where: {\n          identifier: \"01317577238\",\n        },\n      });\n      const onholdUserToken = generateUserToken(userId.id, \"01317577238\", \"USER\");\n      const onholdUserTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, \"01317577238\", \"USER\");\n      await redisClient.HSET(`token:${userId.phone}`, 'token', onholdUserTokenPin);\n      await redisClient.HGET(`token:${userId.phone}`, 'token');\n      if (transactionTypeCode != '1001') {\n        await addInitialBalance(accountingUser, 500000);\n      }\n      await pactum\n        .spec()\n        .withMethod(\"POST\")\n        .withBearerToken(onholdUserToken)\n        .withPath(`${baseUrl}${endpoint}`)\n        .withJson({\n          ...requestBody,\n          verifiedPinToken: onholdUserTokenPin\n        })\n        .expectStatus(400);\n      if (transactionTypeCode != '1002') {\n        const apiTable = await database[0].findMany({\n          where: {\n            userId: await prismaAuth.appUser.findFirst({\n              where: {\n                phone: sender.identifier,\n              },\n            })\n          }.id,\n        });\n        expect(apiTable[0].status).to.equal(\"TODO\");\n        // const transactionsFromDB = await prismaAccounting.transaction.findMany({\n        //   where: { referenceNo: apiTable.referenceNumber },\n        // });\n        // expect(transactionsFromDB).to.have.lengthOf(2);\n        // const ledgerEntries = await prismaAccounting.ledger.findMany({\n        //   where: { transactionId: transactionsFromDB[0].id },\n        // });\n        // expect(ledgerEntries).to.have.lengthOf(2);\n      }",
              "err": {
                "message": "AssertionError: HTTP status 502 !== 400\n\n502 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 502 !== 400\n\n502 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 502\n+ 400\n"
              },
              "uuid": "37d5cb28-b934-49fe-83d0-6e11241d4c03",
              "parentUUID": "b7082267-573c-4d3a-952d-a6528fcb1833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the balance after transaction amount is less than min Wallet Amount of sender account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1005 should return 400 if the balance after transaction amount is less than min Wallet Amount of sender account",
              "timedOut": false,
              "duration": 21,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      });\n      if (transactionTypeCode != '1001') {\n        await addInitialBalance(sender, 1000000);\n      }\n      const verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\n      await redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\n      await redisClient.HGET(`token:${userId.phone}`, 'token');\n      await pactum\n        .spec()\n        .withMethod(\"POST\")\n        .withBearerToken(token)\n        .withPath(`${baseUrl}${endpoint}`)\n        .withJson({\n          ...requestBodyForMinWalleAmount,\n          verifiedPinToken: verifiedTokenPin\n        })\n        .expectStatus(400);\n      if (transactionTypeCode != '1002') {\n        const apiTable = await database[0].findMany({\n          where: {\n            userId: await prismaAuth.appUser.findFirst({\n              where: {\n                phone: sender.identifier,\n              },\n            })\n          }.id,\n        });\n        expect(apiTable[0].status).to.equal(\"TODO\");\n        const transactionsFromDB = await prismaAccounting.transaction.findMany({\n          where: { referenceNo: apiTable.referenceNumber },\n        });\n        if (transactionTypeCode != '1001') {\n          // expect(transactionsFromDB).to.have.lengthOf(2);\n          // const ledgerEntries = await prismaAccounting.ledger.findMany({\n          //   where: { transactionId: transactionsFromDB[0].id },\n          // });\n          // expect(ledgerEntries).to.have.lengthOf(2);\n          // const ledgerEntries1 = await prismaAccounting.ledger.findMany({\n          //   where: { transactionId: transactionsFromDB[1].id },\n          // });\n          // expect(ledgerEntries1).to.have.lengthOf(2);\n        }\n        else {\n          expect(transactionsFromDB).to.be.empty;\n        }\n      }",
              "err": {
                "message": "AssertionError: HTTP status 502 !== 400\n\n502 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 502 !== 400\n\n502 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 502\n+ 400\n"
              },
              "uuid": "76dbf3e1-cfbf-42b7-b7a2-56b15b74949e",
              "parentUUID": "b7082267-573c-4d3a-952d-a6528fcb1833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the balance after transaction is greater than max Wallet Amount of receiver account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1005 should return 400 if the balance after transaction is greater than max Wallet Amount of receiver account",
              "timedOut": false,
              "duration": 35,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const maxWalletUser = await prismaAuth.appUser.findUnique({\n  where: { phone: \"01317577210\" }\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01317577210\",\n  },\n});\nconst maxWalletUserToken = generateUserToken(maxWalletUser.id, \"01317577210\", \"USER\");\nif (transactionTypeCode != '1001') {\n  await addInitialBalance(accountingUser, 500000);\n  await addInitialBalance(receiver, 500);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, maxWalletUser.id, maxWalletUser.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(maxWalletUserToken)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForMaxWalleAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: \"01317577210\",\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "f76b5af4-81ce-44c5-bbbc-cc6b5e786f4e",
              "parentUUID": "b7082267-573c-4d3a-952d-a6528fcb1833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily count is greater than daily limit count of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1005 should return 400 if the daily count is greater than daily limit count of the source account",
              "timedOut": false,
              "duration": 267,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nthis.timeout(120000);\nawait addInitialBalance(sender, 500000);\n\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170025\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170025\",\n  },\n});\nconst dailyLimitCountUser = generateUserToken(userId.id, \"01715170025\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nconst dailyLimitCount = accountingUser.dailyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nfor (let i = 0; i < dailyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(dailyLimitCountUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "7f8cbc50-b447-495b-a07f-b036c7d02504",
              "parentUUID": "b7082267-573c-4d3a-952d-a6528fcb1833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily transaction amount is greater than daily limit amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1005 should return 400 if the daily transaction amount is greater than daily limit amount of the source account",
              "timedOut": true,
              "duration": 2001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170020\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170020\",\n  },\n});\nconst dailyLimitAmountUser = generateUserToken(userId.id, \"01715170020\", \"USER\");\nif (transactionTypeCode != '1001') {\n  await addInitialBalance(accountingUser, 500000);\n}\nconst dailyLimitAmount = accountingUser.dailyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < dailyLimitAmount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(dailyLimitAmountUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForDailyLimitAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "1fafd933-e2f5-4e20-a80a-3bbb117e2f57",
              "parentUUID": "b7082267-573c-4d3a-952d-a6528fcb1833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the monthly count is greater than maximum monthly limit count of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1005 should return 400 if the monthly count is greater than maximum monthly limit count of the source account",
              "timedOut": false,
              "duration": 288,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nawait addInitialBalance(sender, 500000);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170021\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170021\",\n  },\n});\nconst monthlyLimitCountCountUser = generateUserToken(userId.id, \"01715170021\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst monthlyLimitCount = accountingUser.monthlyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < monthlyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(monthlyLimitCountCountUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedPinToken: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "AssertionError: HTTP status 502 !== 400\n\n502 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 502 !== 400\n\n502 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 502\n+ 400\n"
              },
              "uuid": "16b80036-7f92-4039-b09b-0dc2d9025b42",
              "parentUUID": "b7082267-573c-4d3a-952d-a6528fcb1833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the monthly transaction amount is greater than monthly limit amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1005 should return 400 if the monthly transaction amount is greater than monthly limit amount of the source account",
              "timedOut": false,
              "duration": 5573,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nthis.timeout(120000);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170021\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170021\",\n  },\n});\nconst monthlyLimitAmounttUser = generateUserToken(userId.id, \"01715170021\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst monthlyLimitAmount = accountingUser.monthlyLimitAmount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < monthlyLimitAmount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(monthlyLimitAmounttUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedPinToken: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "AssertionError: HTTP status 502 !== 400\n\n502 !== 400\n",
                "estack": "AssertionError [ERR_ASSERTION]: HTTP status 502 !== 400\n\n502 !== 400\n\n    at Expect._validateStatus (node_modules/pactum/src/models/expect.js:106:14)\n    at Expect.validate (node_modules/pactum/src/models/expect.js:47:10)\n    at Tosser.validateResponse (node_modules/pactum/src/models/Tosser.js:249:23)\n    at Tosser.validate (node_modules/pactum/src/models/Tosser.js:214:18)\n    at Tosser.toss (node_modules/pactum/src/models/Tosser.js:46:18)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 502\n+ 400\n"
              },
              "uuid": "283391f5-5296-43b9-ba4f-63f5d2a1411b",
              "parentUUID": "b7082267-573c-4d3a-952d-a6528fcb1833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly count is greater than maximum weekly limit count of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1005 should return 400 if the weekly count is greater than maximum weekly limit count of the source account",
              "timedOut": false,
              "duration": 5567,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nthis.timeout(120000);\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170105\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170105\",\n  },\n});\nconst weeklyLimitAmounttUser = generateUserToken(userId.id, \"01715170105\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst weeklyLimitAmount = accountingUser.weeklyLimitAmount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < weeklyLimitAmount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(weeklyLimitAmounttUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "ca660b90-3376-4689-8f7e-3e330fbd498a",
              "parentUUID": "b7082267-573c-4d3a-952d-a6528fcb1833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly transaction amount is greater than weekly limit amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1005 should return 400 if the weekly transaction amount is greater than weekly limit amount of the source account",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (transactionTypeCode === '1001') { return; }\nuserId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01715170105\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01715170105\",\n  },\n});\nconst weeklyLimitAmounttUser = generateUserToken(userId.id, \"01715170105\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst weeklyLimitCount = accountingUser.weeklyLimitCount;\nconst typeId = await prismaAccounting.transactionType.findFirst({\n  where: { transactionCode: transactionTypeCode }\n});\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nfor (let i = 0; i < weeklyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier }\n      })).id,\n      toAccountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: sender.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (await prismaAccounting.userAccount.findUnique({\n        where: { identifier: receiver.identifier },\n      })).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(weeklyLimitAmounttUser)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "106645c5-007e-4c8e-a6a7-149ce1ae46ff",
              "parentUUID": "b7082267-573c-4d3a-952d-a6528fcb1833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the transaction amount is less than transaction type min amount",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1005 should return 400 if the transaction amount is less than transaction type min amount",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01915170011\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01915170011\",\n  },\n});\nconst transactionTypeMinUserToken = generateUserToken(userId.id, \"01915170011\", \"USER\");\nawait addInitialBalance(accountingUser, 500000);\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(transactionTypeMinUserToken)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForTypeMinAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "da6ad3f2-ac79-4c54-9229-c014e3e9579c",
              "parentUUID": "b7082267-573c-4d3a-952d-a6528fcb1833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the transaction amount is greater than transaction type max amount of the source account",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1005 should return 400 if the transaction amount is greater than transaction type max amount of the source account",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "userId = await prismaAuth.appUser.findFirst({\n  where: {\n    phone: \"01915170011\",\n  },\n});\nconst accountingUser = await prismaAccounting.userAccount.findFirst({\n  where: {\n    identifier: \"01915170011\",\n  },\n});\nconst transactionTypeMinUserToken = generateUserToken(userId.id, \"01915170011\", \"USER\");\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, 'token', verifiedTokenPin);\nawait redisClient.HGET(`token:${userId.phone}`, 'token');\nawait addInitialBalance(accountingUser, 1000000);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(transactionTypeMinUserToken)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBodyForTypeMaxAmount,\n    verifiedTokenPin: verifiedTokenPin\n  })\n  .expectStatus(400);\nif (transactionTypeCode != '1002') {\n  const apiTable = await database[0].findMany({\n    where: {\n      userId: await prismaAuth.appUser.findFirst({\n        where: {\n          phone: sender.identifier,\n        },\n      })\n    }.id,\n  });\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "c634cd04-174a-413c-ad27-5cc160b88e29",
              "parentUUID": "b7082267-573c-4d3a-952d-a6528fcb1833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily transaction amount is greater than daily limit amount of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1005 should return 400 if the daily transaction amount is greater than daily limit amount of the transaction type",
              "timedOut": true,
              "duration": 2001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, dailyLimitAmount: true },\n  })\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst dailyLimitCount = Number(typeId.dailyLimitAmount);\nconst transactionPromises = [];\nfor (let i = 0; i < dailyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait Promise.all(transactionPromises);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/opt/app/src/topUp/topup.test.js)\n    at listOnTimeout (node:internal/timers:581:17)\n    at process.processTimers (node:internal/timers:519:7)",
                "diff": null
              },
              "uuid": "fe4f87eb-6dd6-40e3-a924-27702dc09916",
              "parentUUID": "b7082267-573c-4d3a-952d-a6528fcb1833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the daily transaction count is greater than daily limit count of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1005 should return 400 if the daily transaction count is greater than daily limit count of the transaction type",
              "timedOut": false,
              "duration": 157,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, dailyLimitCount: true },\n  })\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 5000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst dailyLimitCount = Number(typeId.dailyLimitCount);\nconst transactionPromises = [];\nfor (let i = 0; i < dailyLimitCount; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait Promise.all(transactionPromises);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "b24df78e-531f-4ff6-8d20-3168558faabf",
              "parentUUID": "b7082267-573c-4d3a-952d-a6528fcb1833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly transaction amount is greater than weekly limit amount of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1005 should return 400 if the weekly transaction amount is greater than weekly limit amount of the transaction type",
              "timedOut": false,
              "duration": 61,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, weeklyLimitAmount: true },\n  }),\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst weeklyLimitAmountType = Number(typeId.weeklyLimitAmount);\nconst transactionPromises = [];\nfor (let i = 0; i < weeklyLimitAmountType / 100; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nawait Promise.all(transactionPromises);\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "bb7a9536-61a4-4ff3-bdad-eab2710dca59",
              "parentUUID": "b7082267-573c-4d3a-952d-a6528fcb1833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the weekly transaction count is greater than weekly limit count of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1005 should return 400 if the weekly transaction count is greater than weekly limit count of the transaction type",
              "timedOut": false,
              "duration": 98,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n    select: { id: true, weeklyLimitCount: true },\n  })\n]);\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nconst weeklyLimitCountType = Number(typeId.weeklyLimitCount);\nconst batchSize = 5;\nfor (let i = 0; i < weeklyLimitCountType; i += batchSize) {\n  const batchPromises = [];\n  const end = Math.min(i + batchSize, weeklyLimitCountType);\n  for (let j = i; j < end; j++) {\n    const promise = prismaAccounting.transaction.create({\n      data: {\n        fromAccountId: (await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })).id,\n        toAccountId: (await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })).id,\n        transactionTypeId: typeId.id,\n        amount: 100,\n        referenceNo: `Transaction ${j + 1}`,\n        note: `Test transaction ${j + 1}`,\n      },\n    }).then(async transaction => {\n      return Promise.all([\n        prismaAccounting.ledger.create({\n          data: {\n            accountId: (await prismaAccounting.userAccount.findUnique({\n              where: { identifier: sender.identifier },\n            })).id,\n            transactionId: transaction.id,\n            amount: 100,\n            description: `Ledger entry for transaction ${j + 1}`,\n            type: \"DEBIT\",\n          },\n        }),\n        prismaAccounting.ledger.create({\n          data: {\n            accountId: (await prismaAccounting.userAccount.findUnique({\n              where: { identifier: receiver.identifier },\n            })).id,\n            transactionId: transaction.id,\n            amount: 100,\n            description: `Ledger entry for transaction ${j + 1}`,\n            type: \"CREDIT\",\n          },\n        })\n      ]);\n    });\n    batchPromises.push(promise);\n  }\n  await Promise.all(batchPromises);\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const senderUser = await prismaAuth.appUser.findFirst({\n    where: { phone: sender.identifier },\n    select: { id: true }\n  });\n  const [apiTable] = await  database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  expect(apiTable.status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "e99deb98-9774-4af4-8ddb-16fdc0c66a73",
              "parentUUID": "b7082267-573c-4d3a-952d-a6528fcb1833",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 if the monthly transaction count is greater than monthly limit count of the transaction type",
              "fullTitle": "Do Transaction API Check (POST) - Type: 1005 should return 400 if the monthly transaction count is greater than monthly limit count of the transaction type",
              "timedOut": false,
              "duration": 243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const [userId, typeId] = await Promise.all([\n  prismaAuth.appUser.findFirst({\n    where: { phone: \"01317577237\" },\n    select: { id: true, phone: true },\n  }),\n  prismaAccounting.transactionType.findFirst({\n    where: { transactionCode: transactionTypeCode },\n  })\n]);\nconst monthlyLimitCountType = Number(typeId.monthlyLimitCount);\nconst verifiedTokenPin = generateVerifyPinToken(transactionTypeCode, userId.id, userId.phone, \"USER\");\nawait redisClient.HSET(`token:${userId.phone}`, \"token\", verifiedTokenPin);\nfor (let i = 0; i < monthlyLimitCountType; i++) {\n  const transaction = await prismaAccounting.transaction.create({\n    data: {\n      fromAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      toAccountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionTypeId: typeId.id,\n      amount: 100,\n      referenceNo: `Transaction ${i + 1}`,\n      note: `Test transaction ${i + 1}`,\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: sender.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"DEBIT\",\n    },\n  });\n  await prismaAccounting.ledger.create({\n    data: {\n      accountId: (\n        await prismaAccounting.userAccount.findUnique({\n          where: { identifier: receiver.identifier },\n        })\n      ).id,\n      transactionId: transaction.id,\n      amount: 100,\n      description: `Ledger entry for transaction ${i + 1}`,\n      type: \"CREDIT\",\n    },\n  });\n}\nif (transactionTypeCode != \"1001\") {\n  await addInitialBalance(sender, 500000);\n}\nawait pactum\n  .spec()\n  .withMethod(\"POST\")\n  .withBearerToken(token)\n  .withPath(`${baseUrl}${endpoint}`)\n  .withJson({\n    ...requestBody,\n    verifiedTokenPin: verifiedTokenPin,\n  })\n  .expectStatus(400);\nif (transactionTypeCode != \"1002\") {\n  const [apiTable] = await Promise.all([\n    await database[0].findMany({\n      where: {\n        userId: await prismaAuth.appUser.findFirst({\n          where: {\n            phone: sender.identifier,\n          }, select: { id: true, phone: true },\n        })\n      }.id,\n    })\n  ]);\n  expect(apiTable[0].status).to.equal(\"TODO\");\n}",
              "err": {},
              "uuid": "105464a1-99de-4f3c-b7e2-ba8a72aaea8a",
              "parentUUID": "b7082267-573c-4d3a-952d-a6528fcb1833",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f76b5af4-81ce-44c5-bbbc-cc6b5e786f4e",
            "7f8cbc50-b447-495b-a07f-b036c7d02504",
            "ca660b90-3376-4689-8f7e-3e330fbd498a",
            "106645c5-007e-4c8e-a6a7-149ce1ae46ff",
            "da6ad3f2-ac79-4c54-9229-c014e3e9579c",
            "c634cd04-174a-413c-ad27-5cc160b88e29",
            "b24df78e-531f-4ff6-8d20-3168558faabf",
            "bb7a9536-61a4-4ff3-bdad-eab2710dca59",
            "e99deb98-9774-4af4-8ddb-16fdc0c66a73",
            "105464a1-99de-4f3c-b7e2-ba8a72aaea8a"
          ],
          "failures": [
            "1b50c78f-ddd4-412c-b585-317af4f02636",
            "37d5cb28-b934-49fe-83d0-6e11241d4c03",
            "76dbf3e1-cfbf-42b7-b7a2-56b15b74949e",
            "1fafd933-e2f5-4e20-a80a-3bbb117e2f57",
            "16b80036-7f92-4039-b09b-0dc2d9025b42",
            "283391f5-5296-43b9-ba4f-63f5d2a1411b",
            "fe4f87eb-6dd6-40e3-a924-27702dc09916"
          ],
          "pending": [],
          "skipped": [],
          "duration": 16544,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}